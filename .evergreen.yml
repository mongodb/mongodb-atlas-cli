stepback: true
command_type: system
pre_error_fails_task: true

# Files that match an ignore-list pattern will not trigger a build, if they're the only modified
# files in the patch.
ignore:
  - "*.md"
  - "*.txt"

variables:
  - &go_options
    GO111MODULE: "on"
functions:
  "clone":
    - command: git.get_project
      type: setup
      params:
        directory: src/github.com/mongodb/mongocli
  "build":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          WORKDIR: ${workdir}
          GOROOT: ${go_root}
          <<: *go_options
        command: make build
  "test":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          WORKDIR: ${workdir}
          GOROOT: ${go_root}
          <<: *go_options
        command: make test
  "atlas e2e":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          WORKDIR: ${workdir}
          GOROOT: ${go_root}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: ${atlas_service}
          <<: *go_options
        command: make e2e-test-atlas
  "iam e2e":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          WORKDIR: ${workdir}
          GOROOT: ${go_root}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: ${atlas_service}
          <<: *go_options
        command: make e2e-test-iam
  "cloud manager e2e":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          WORKDIR: ${workdir}
          GOROOT: ${go_root}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_ORG_ID: ${cloud_manager_org_id}
          MCLI_PROJECT_ID: ${cloud_manager_project_id}
          MCLI_PRIVATE_API_KEY: ${cloud_manager_private_api_key}
          MCLI_PUBLIC_API_KEY: ${cloud_manager_public_api_key}
          MCLI_SERVICE: ${cloud_manager_service}
          <<: *go_options
        command: make e2e-test-cloud
  "lint":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          WORKDIR: ${workdir}
          GOROOT: ${go_root}
          <<: *go_options
        command: make lint
  "generate notices":
    - command: shell.exec
      type: test
      params:
        script: |
          set -o xtrace
          set -o errexit
          set -o verbose

          export GOROOT="${go_root}"
          export GOPATH=$(pwd)
          export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"
          mkdir -p github.com/google/go-licenses
          pushd github.com/google/go-licenses

          go get github.com/google/go-licenses
          popd
          cd src/github.com/mongodb/mongocli
          go-licenses save "github.com/mongodb/mongocli" --save_path=third_party_notices
  "install gon":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          set -o xtrace
          set -o errexit
          set -o verbose

          mkdir -p bin
          cd bin

          curl -sL https://github.com/mitchellh/gon/releases/download/v0.2.3/gon_macos.zip | tar zx
  "install goreleaser":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          set -o xtrace
          set -o errexit
          set -o verbose

          curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh
  "set up gon":
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongocli
        silent: true
        script: |
          set -o errexit

          OUTPUT_PATH="./dist/mongocli_macos_signed_x86_64.zip"
          # gon settings
          cat <<EOF_GON_JSON > gon.json
          {
            "source" : ["./dist/macos_darwin_amd64/mongocli"],
            "bundle_id" : "com.mongodb.mongocli",
            "apple_id": {
              "username": "${ac_username}",
              "password": "${ac_password}"
            },
            "sign" :{
              "application_identity" : "Developer ID Application: MongoDB, Inc. (4XWMY46275)"
            },
            "zip" :{
              "output_path": "$OUTPUT_PATH"
            }
          }
          EOF_GON_JSON
  "package":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          set -o errexit

          cat <<EOF_BUILD_SH > ~/mongocli_package.sh
          #! /usr/bin/env bash

          cd $(pwd)

          export GOROOT="${go_root}"
          export PATH="./bin:${go_bin}:$PATH"

          ${goreleaser_cmd|goreleaser --rm-dist --snapshot}
          EOF_BUILD_SH

          set -o xtrace
          set -o verbose
          # notarization and signing can only happen in a session with access to the GUI, so we use ssh to it
          ssh -v -p 2222 localhost "bash ~/mongocli_package.sh"
  "install go-msi":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        command: choco install -y "go-msi" --force
  "uninstall go-msi":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        command: choco uninstall -y "go-msi"
  "generate msi":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          set -o xtrace
          set -o errexit
          set -o verbose

          export GOROOT="${go_root}"
          export GOCACHE="$(cygpath --mixed "${workdir}\.gocache")"
          export CGO_ENABLED=0
          export GOMSI="/cygdrive/c/Program Files/go-msi"
          export PATH="$GOMSI:/cygdrive/c/wixtools/bin:$GOROOT\bin:$PATH"

          go-msi check-env

          VERSION=$(git describe | cut -d "v" -f 2)

          env GOOS=windows GOARCH=amd64 go build -ldflags "-s -w -X github.com/mongodb/mongocli/internal/version.Version=$VERSION" -o mongocli.exe

          mkdir {build,dist}

          go-msi make --msi "dist/mongocli_$VERSION.msi" --version $VERSION
  "rename pkg unstable":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli/dist
        script: |
          set -o xtrace
          set -o errexit
          set -o verbose

          VERSION=$(git describe --abbrev=0 | cut -d "v" -f 2)

          mkdir {yum,apt}
          # we could generate a similar name with goreleaser but we want to keep the vars evg compatibale to use later
          cp mongocli_next_linux_x86_64.deb apt/
          mv apt/mongocli_next_linux_x86_64.deb apt/mongodb-cli-unstable_$VERSION~latest_amd64.deb
          cp mongocli_next_linux_x86_64.rpm yum/
          mv yum/mongocli_next_linux_x86_64.rpm yum/mongodb-cli-unstable-$VERSION.latest.x86_64.rpm
  "rename pkg stable":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli/dist
        script: |
          set -o xtrace
          set -o errexit
          set -o verbose

          VERSION=$(git describe | cut -d "v" -f 2)

          mkdir {yum,apt}
          # we could generate a similar name with goreleaser but we want to keep the vars evg compatibale to use later
          cp mongocli_next_linux_x86_64.deb apt/
          mv apt/mongocli_$VERSION_linux_x86_64.deb apt/mongodb-cli_$VERSION_amd64.deb

          cp mongocli_next_linux_x86_64.rpm yum/
          mv yum/mongocli_$VERSION_linux_x86_64.rpm yum/mongodb-cli-$VERSION.x86_64.rpm
  "generate download archive json":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli/dist
        script: |
          set -o xtrace
          set -o errexit
          set -o verbose

          export GOROOT="${go_root}"
          export PATH="./bin:${go_bin}:$PATH"

          VERSION=$(git describe | cut -d "v" -f 2)

          go run ../internal/release/main.go "$VERSION"
  "set up notary client credentials":
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongocli
        silent: true
        script: |
          set -o errexit

          # curator env variables
          cat <<EOF > notary_env.sh
          export NOTARY_KEY_NAME='server-4.4'
          export NOTARY_TOKEN=${signing_auth_token_44}
          export BARQUE_USERNAME=${barque_user}
          export BARQUE_PASSWORD=${barque_password}
          EOF

          echo "${signing_auth_token_44}" > ./signing_auth_token
  "push":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          . ./notary_env.sh

          set -o xtrace
          set -o errexit
          set -o verbose

          CURATOR_RELEASE=${curator_release|"latest"}
          curl -L -O http://boxes.10gen.com/build/curator/curator-dist-rhel70-$CURATOR_RELEASE.tar.gz
          tar -zxvf curator-dist-rhel70-$CURATOR_RELEASE.tar.gz

          # --version needs to match the mongodb server version to publish to the right repo
          # 4.X goes to the 4.x repo
          # any *-rc version goes to testing repo
          # everything else goes to development repo
          ./curator \
            --level debug \
            repo submit \
            --service ${barque_url} \
            --config etc/repo_config.yml \
            --distro ${distro} \
            --edition ${edition} \
            --version ${server_version} \
            --arch x86_64 \
            --packages https://s3.amazonaws.com/mongodb-mongocli-build/${project}/dist/${revision}_${created_at}/${ext}.tgz
tasks:
  - name: compile
    commands:
      - func: "clone"
      - func: "build"
  - name: test
    commands:
      - func: "clone"
      - func: "test"
  - name: atlas_e2e
    commands:
      - func: "clone"
      - func: "build"
      - func: "atlas e2e"
  - name: iam_e2e
    commands:
      - func: "clone"
      - func: "build"
      - func: "iam e2e"
  - name: cloud_manager_e2e
    commands:
      - func: "clone"
      - func: "build"
      - func: "cloud manager e2e"
  - name: package_msi
    tags: ["packaging"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install go-msi"
      - func: "generate msi"
      - func: "uninstall go-msi"
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_files_include_filter:
            - src/github.com/mongodb/mongocli/dist/*.msi
          remote_file: ${project}/dist/${revision}_${created_at}/
          bucket: mongodb-mongocli-build
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
  - name: package_goreleaser
    tags: ["packaging"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "generate notices"
      - func: "install goreleaser"
      - func: "install gon"
      - func: "set up gon"
      - func: "package"
      - func: "rename pkg unstable"
      - command: archive.targz_pack
        params:
          target: src/github.com/mongodb/mongocli/dist/deb.tgz
          source_dir: src/github.com/mongodb/mongocli/dist/apt
          include:
            - "*.deb"
      - command: archive.targz_pack
        params:
          target: src/github.com/mongodb/mongocli/dist/rpm.tgz
          source_dir: src/github.com/mongodb/mongocli/dist/yum
          include:
            - "*.rpm"
      - func: "generate download archive json"
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_files_include_filter:
            - src/github.com/mongodb/mongocli/dist/*.tar.gz
            - src/github.com/mongodb/mongocli/dist/*.zip
            - src/github.com/mongodb/mongocli/dist/*.deb
            - src/github.com/mongodb/mongocli/dist/*.rpm
            - src/github.com/mongodb/mongocli/dist/*.tgz
            - src/github.com/mongodb/mongocli/dist/*.json
          remote_file: ${project}/dist/${revision}_${created_at}/
          bucket: mongodb-mongocli-build
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
  - name: release
    stepback: false
    patch_only: true
    depends_on:
      - name: compile
        variant: "code_health"
    commands:
      - func: "clone"
      - func: "generate notices"
      - func: "install goreleaser"
      - func: "install gon"
      - func: "set up gon"
      - func: "package"
        vars:
          goreleaser_cmd: goreleaser --rm-dist
      - func: "rename pkg stable"
      - func: "generate download archive json"
      - command: s3.put
        params:
          aws_key: ${download_center_aws_key}
          aws_secret: ${download_center_aws_secret}
          local_files_include_filter:
            - src/github.com/mongodb/mongocli/dist/*.tar.gz
            - src/github.com/mongodb/mongocli/dist/*.zip
            - src/github.com/mongodb/mongocli/dist/*.deb
            - src/github.com/mongodb/mongocli/dist/*.rpm
            - src/github.com/mongodb/mongocli/dist/*.tgz
            - src/github.com/mongodb/mongocli/dist/*.json
          remote_file: mongocli/
          bucket: downloads.mongodb.org
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
  # RPM Distros
  - name: push_rhel70_enterprise
    <<: &default_push_def
      # This should prevent this task from running in patch builds, where we
      # don't want to publish packages.
      patchable: false
      stepback: false
      tags: ["push"]
      depends_on:
        - name: compile
          variant: "code_health"
        - name: package_goreleaser
          variant: "goreleaser_snaphot"
    commands:
        - func: "clone"
        - func: "set up notary client credentials"
        - func: "push"
          vars:
            edition: enterprise
            distro: rhel70
            ext: rpm
  - name: push_rhel70_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
          ext: rpm
  - name: push_rhel80_enterprise
    <<: *default_push_def
    depends_on:
      - name: compile
        variant: "code_health"
      - name: package_goreleaser
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel80
          ext: rpm
  - name: push_rhel80_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: rhel80
          ext: rpm
  - name: push_amazon2_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: amazon2
          ext: rpm
  - name: push_amazon2_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: amazon2
          ext: rpm
  # DEB Distros
  - name: push_ubuntu1604_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1604_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1804_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1804
          ext: deb
  - name: push_ubuntu1804_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1804
          ext: deb
  - name: push_debian71_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian71
          ext: deb
  - name: push_debian71_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: debian71
          ext: deb
  - name: push_debian81_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian81
          ext: deb
  - name: push_debian81_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: debian81
          ext: deb
  - name: push_debian92_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian92
          ext: deb
  - name: push_debian92_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: debian92
          ext: deb
  - name: push_debian10_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian10
          ext: deb
  - name: push_debian10_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: debian10
          ext: deb
buildvariants:
  - name: code_health
    display_name: "Code Health"
    run_on:
      - rhel70-small
    expansions:
      go_root: "/opt/golang/go1.14"
      go_bin: "/opt/golang/go1.14/bin"
    tasks:
      - name: compile
      - name: test
  - name: e2e
    display_name: "E2E"
    run_on:
      - rhel70-small
    expansions:
      go_root: "/opt/golang/go1.14"
      go_bin: "/opt/golang/go1.14/bin"
    tasks:
      - name: atlas_e2e
      - name: iam_e2e
      - name: cloud_manager_e2e
  - name: goreleaser_snaphot
    display_name: "Packaging and Publishing (goreleaser, apt, yum)"
    run_on:
      - macos-1014-codesign
    expansions:
      go_root: "/opt/golang/go1.14"
      go_bin: "/opt/golang/go1.14/bin"
    tasks:
      - name: package_goreleaser
      - name: .push
        distros:
          - rhel70-small
  - name: go_msi_snapshot
    display_name: "Packaging (go-msi)"
    run_on:
      - windows-64-vs2017-compile
    expansions:
      go_root: "c:\\golang\\go1.14"
      go_bin: "c:\\golang\\go1.14/bin"
    tasks:
      - name: package_msi
  - name: release_github
    display_name: "Release (goreleaser)"
    run_on:
      - macos-1014-codesign
    expansions:
      go_root: "/opt/golang/go1.14"
      go_bin: "/opt/golang/go1.14/bin"
      is_release: true
    tasks:
      - name: release
