stepback: true
command_type: system
pre_error_fails_task: true

# Files that match an ignore-list pattern will not trigger a build, if they're the only modified
# files in the patch.
ignore:
  - "*.md"
  - "*.txt"

variables:
  - &go_bin
      "/opt/golang/go1.14/bin"
  - &go_options
    GO111MODULE: "on"
    GOROOT: "/opt/golang/go1.14"
functions:
  "clone":
    - command: git.get_project
      type: setup
      params:
        directory: mongocli
  "build":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - *go_bin
        working_dir: mongocli
        env:
          WORKDIR: ${workdir}
          <<: *go_options
        command: make build
  "gen-notices":
    - command: shell.exec
      type: setup
      params:
        working_dir: mongocli
        script: |
          set -ex
          export GOROOT="/opt/golang/go1.14"
          mkdir go-licenses
          export GOPATH=${workdir}/go-licenses
          export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"

          go get -u github.com/google/go-licenses
          go-licenses save "github.com/mongodb/mongocli" --save_path=third_party_notices
  "fetch goreleaser":
    - command: shell.exec
      type: setup
      params:
        working_dir: mongocli
        script: |
          set -ex
          curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh
  "package":
    - command: subprocess.exec
      type: setup
      params:
        add_to_path:
          - *go_bin
          - ./bin
        working_dir: mongocli
        env:
          <<: *go_options
        command: make package
  "set up remote credentials":
    command: shell.exec
    params:
      silent: true
      script: |
        set -o errexit
        # Since the macros 'private_key_remote' and 'private_key_file' are not always defined
        # we default to /dev/null to avoid syntax errors of an empty expansion.
        if [ ! -z "${private_key_remote}" ] && [ ! -z "${private_key_file}" ] ; then
          mkdir -p ~/.ssh
          echo -n "${private_key_remote}" > ${private_key_file|/dev/null}
          chmod 0600 ${private_key_file|/dev/null}
        fi
        # Ensure a clean aws configuration state
        rm -rf ~/.aws
        mkdir -p ~/.aws
        # If ${aws_profile_remote} is not specified then the config & credentials are
        # stored in the 'default' profile.
        aws_profile="${aws_profile_remote|default}"
        # The profile in the config file is specified as [profile <profile>], except
        # for [default], see http://boto3.readthedocs.io/en/latest/guide/configuration.html
        if [ $aws_profile = "default" ] ; then
          aws_profile_config="[default]"
        else
          aws_profile_config="[profile $aws_profile]"
        fi
        cat <<EOF >> ~/.aws/config
        $aws_profile_config
        region = us-east-1
        EOF
        # The profile in the credentials file is specified as [<profile>].
        cat <<EOF >> ~/.aws/credentials
        [$aws_profile]
        aws_access_key_id = ${aws_key_remote}
        aws_secret_access_key = ${aws_secret_remote}
        EOF
  "set up notary client credentials":
    - command: shell.exec
      params:
        working_dir: mongocli
        silent: true
        script: |
          set -o errexit

          cat <<EOF > notary_env.sh
          export NOTARY_TOKEN=${signing_auth_token_44}
          export BARQUE_USERNAME=${barque_user}
          export BARQUE_PASSWORD=${barque_password}
          EOF

          if [[ ! -f signing_auth_token_44 ]]; then
            echo "${signing_auth_token_44}" > signing_auth_token
          fi
  "push":
    - command: shell.exec
      params:
        working_dir: mongocli
        script: |
          . ./notary_env.sh

          set -o errexit
          set -o verbose

          CURATOR_RELEASE=${curator_release|"latest"}
          curl -L -O http://boxes.10gen.com/build/curator/curator-dist-rhel70-$CURATOR_RELEASE.tar.gz
          tar -zxvf curator-dist-rhel70-$CURATOR_RELEASE.tar.gz

          # We get the raw version string (v1.2.3-45-gabcdef) from git
          VERSION=$(git describe --abbrev=7 | cut -d "v" -f 2)

          ./curator repo submit \
            --service ${barque_url} \
            --config .repo_config.yml \
            --distro ${distro} \
            --edition ${edition} \
            --version $VERSION \
            --arch x86_64 \
            --packages https://s3.amazonaws.com/mongodb-mongocli-build/${project}/${revision}/dist/mongocli_next_${revision}_${version_id}_${created_at}_linux_x86_64.rpm
tasks:
  - name: compile
    commands:
      - func: "clone"
      - func: "build"
  - name: package
    depends_on:
      - name: compile
    commands:
      - func: "clone"
      - func: "gen-notices"
      - func: "fetch goreleaser"
      - func: "package"
      - command: shell.exec
        params:
          working_dir: mongocli/dist
          script: |
            set -o errexit
            set -o verbose

            # we could generate a similar name with goreleaser but we want to keep the vars evg compatibale to use later
            mv mongocli_next_linux_i386.deb mongocli_next_${revision}_${version_id}_${created_at}_linux_i386.deb
            mv mongocli_next_linux_i386.rpm mongocli_next_${revision}_${version_id}_${created_at}_linux_i386.rpm
            mv mongocli_next_linux_i386.tar.gz mongocli_next_${revision}_${version_id}_${created_at}_linux_i386.tar.gz
            mv mongocli_next_linux_x86_64.deb mongocli_next_${revision}_${version_id}_${created_at}_linux_x86_64.deb
            mv mongocli_next_linux_x86_64.rpm mongocli_next_${revision}_${version_id}_${created_at}_linux_x86_64.rpm
            mv mongocli_next_linux_x86_64.tar.gz mongocli_next_${revision}_${version_id}_${created_at}_linux_x86_64.tar.gz
            mv mongocli_next_macos_x86_64.tar.gz mongocli_next_${revision}_${version_id}_${created_at}_macOS_x86_64.tar.gz
            mv mongocli_next_windows_i386.zip mongocli_next_${revision}_${version_id}_${created_at}_windows_i386.zip
            mv mongocli_next_windows_x86_64.zip mongocli_next_${revision}_${version_id}_${created_at}_windows_x86_64.zip
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_files_include_filter:
            - mongocli/dist/*.tgz
            - mongocli/dist/*.zip
            - mongocli/dist/*.deb
            - mongocli/dist/*.rpm
          remote_file: ${project}/${revision}/dist/
          bucket: mongodb-mongocli-build
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
  # RPM Distros
  - name: push_rhel70_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up remote credentials"
        vars:
          aws_key_remote: ${repo_aws_key}
          aws_secret_remote: ${repo_aws_secret}
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel70
  - name: push_rhel70_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: package
    commands:
      - func: "clone"
      - func: "set up remote credentials"
        vars:
          aws_key_remote: ${repo_aws_key}
          aws_secret_remote: ${repo_aws_secret}
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
  - name: push_rhel80_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up remote credentials"
        vars:
          aws_key_remote: ${repo_aws_key}
          aws_secret_remote: ${repo_aws_secret}
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel80
  - name: push_rhel80_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up remote credentials"
        vars:
          aws_key_remote: ${repo_aws_key}
          aws_secret_remote: ${repo_aws_secret}
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: rhel80
  - name: push_amazon2_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: amazon2
  - name: push_amazon2_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up remote credentials"
        vars:
          aws_key_remote: ${repo_aws_key}
          aws_secret_remote: ${repo_aws_secret}
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: amazon2
buildvariants:
  - name: publish
    display_name: "Packaging & Publishing"
    run_on:
      - rhel70-small
    tasks:
      - name: compile
      - name: package
      - name: .push
