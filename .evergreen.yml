stepback: true
command_type: system
pre_error_fails_task: true

# Files that match an ignore-list pattern will not trigger a build, if they're the only modified
# files in the patch.
ignore:
  - "*.md"
  - "*.txt"

variables:
  - &go_bin
      "/opt/golang/go1.14/bin"
  - &go_options
    GO111MODULE: "on"
    GOROOT: "/opt/golang/go1.14"
functions:
  "clone":
    - command: git.get_project
      type: setup
      params:
        directory: mongocli
  "build":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - *go_bin
        working_dir: mongocli
        env:
          WORKDIR: ${workdir}
          <<: *go_options
        command: make build
  "gen-notices":
    - command: shell.exec
      type: setup
      params:
        working_dir: mongocli
        script: |
          set -ex
          export GOROOT="/opt/golang/go1.14"
          mkdir go-licenses
          export GOPATH=${workdir}/go-licenses
          export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"

          go get -u github.com/google/go-licenses
          go-licenses save "github.com/mongodb/mongocli" --save_path=third_party_notices
  "fetch goreleaser":
    - command: shell.exec
      type: setup
      params:
        working_dir: mongocli
        script: |
          set -ex
          curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh
  "package":
    - command: subprocess.exec
      type: setup
      params:
        add_to_path:
          - *go_bin
          - ./bin
        working_dir: mongocli
        env:
          <<: *go_options
        command: make package
  "set up notary client credentials":
    - command: shell.exec
      params:
        working_dir: mongocli
        silent: true
        script: |
          set -o errexit

          cat <<EOF > notary_env.sh
          export NOTARY_KEY_NAME='server-4.4'
          export NOTARY_TOKEN=${signing_auth_token_44}
          export BARQUE_USERNAME=${barque_user}
          export BARQUE_PASSWORD=${barque_password}
          EOF

          echo "${signing_auth_token_44}" > ./signing_auth_token
  "push":
    - command: shell.exec
      params:
        working_dir: mongocli
        script: |
          . ./notary_env.sh

          set -o xtrace
          set -o errexit
          set -o verbose

          CURATOR_RELEASE=${curator_release|"latest"}
          curl -L -O http://boxes.10gen.com/build/curator/curator-dist-rhel70-$CURATOR_RELEASE.tar.gz
          tar -zxvf curator-dist-rhel70-$CURATOR_RELEASE.tar.gz

          # We get the raw version string (v1.2.3-45-gabcdef) from git
          VERSION=$(git describe --abbrev=7 | cut -d "v" -f 2)

          ./curator \
            --level debug \
            repo submit \
            --service ${barque_url} \
            --config etc/repo_config.yml \
            --distro ${distro} \
            --edition ${edition} \
            --version $VERSION \
            --arch x86_64 \
            --packages https://s3.amazonaws.com/mongodb-mongocli-build/${project}/dist/${build_id}/${ext}.tgz

tasks:
  - name: compile
    commands:
      - func: "clone"
      - func: "build"
  - name: package
    depends_on:
      - name: compile
    commands:
      - func: "clone"
      - func: "gen-notices"
      - func: "fetch goreleaser"
      - func: "package"
      - command: archive.targz_pack
        params:
          target: mongocli/dist/deb.tgz
          source_dir: mongocli/dist
          include:
            - "mongocli_next_linux_x86_64.deb"
      - command: archive.targz_pack
        params:
          target: mongocli/dist/rpm.tgz
          source_dir: mongocli/dist
          include:
            - "mongocli_next_linux_x86_64.rpm"
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_files_include_filter:
            - mongocli/dist/*.tgz
            - mongocli/dist/*.zip
            - mongocli/dist/*.deb
            - mongocli/dist/*.rpm
          remote_file: ${project}/dist/${build_id}/
          bucket: mongodb-mongocli-build
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
  # RPM Distros
  - name: push_rhel70_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel70
          ext: rpm
  - name: push_rhel70_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
          ext: rpm
  - name: push_rhel80_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel80
          ext: rpm
  - name: push_rhel80_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: rhel80
          ext: rpm
  - name: push_amazon2_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: amazon2
          ext: rpm
  - name: push_amazon2_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: amazon2
          ext: rpm
  # DEB Distros
  - name: push_ubuntu1604_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1604_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1804_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1804
          ext: deb
  - name: push_ubuntu1804_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1804
          ext: deb
  - name: push_debian71_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian71
          ext: deb
  - name: push_debian71_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: debian71
          ext: deb
  - name: push_debian81_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian81
          ext: deb
  - name: push_debian81_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: debian81
          ext: deb
  - name: push_debian92_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian92
          ext: deb
  - name: push_debian92_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: debian92
          ext: deb
  - name: push_debian10_enterprise
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: compile
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian10
          ext: deb
  - name: push_debian10_org
    # This should prevent this task from running in patch builds, where we
    # don't want to publish packages.
    patchable: false
    stepback: false
    tags: ["push"]
    depends_on:
      - name: package
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "push"
        vars:
          edition: org
          distro: debian10
          ext: deb
buildvariants:
  - name: publish
    display_name: "Packaging & Publishing"
    run_on:
      - rhel70-small
    tasks:
      - name: compile
      - name: package
      - name: .push
