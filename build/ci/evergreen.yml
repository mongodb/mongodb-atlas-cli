exec_timeout_secs: 3600 # automatically fail any task if it takes longer than 60 minutes to finish.
stepback: true
command_type: system
pre_error_fails_task: true

# Files that match an ignore-list pattern will not trigger a build, if they're the only modified
# files in the patch.
ignore:
  - "*.md"
  - "*.txt"
variables:
  - &go_options
    GO111MODULE: "on"
    GOROOT: ${go_root}
functions:
  "clone":
    - command: git.get_project
      type: setup
      params:
        directory: src/github.com/mongodb/mongocli
  "build":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        command: make build
  "test":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          TEST_CMD: gotestsum --junitfile unit-tests.xml --
          <<: *go_options
        command: make test
  "generate html coverage":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        command: go tool cover -html=coverage.out -o coverage.html
  "upload html coverage":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/github.com/mongodb/mongocli/coverage.html
        remote_file: ${project}/coverage/internal/${task_id}.html
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: text/html
        display_name: internal-html-coverage
  "atlas e2e":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --
          E2E_TAGS: e2e,atlas
          <<: *go_options
        command: make e2e-test
  "atlas logs e2e":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --
          E2E_TAGS: e2e,atlas,logs
          <<: *go_options
        command: make e2e-test
  "atlas metrics e2e":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --
          E2E_TAGS: e2e,atlas,metrics
          <<: *go_options
        command: make e2e-test
  "atlas clusters e2e":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --
          E2E_TAGS: e2e,atlas,clusters
          <<: *go_options
        command: make e2e-test
  "iam atlas e2e":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --
          E2E_TAGS: e2e,iam
          <<: *go_options
        command: make e2e-test
  "iam cloud manager e2e":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_ORG_ID: ${cloud_manager_org_id}
          MCLI_PROJECT_ID: ${cloud_manager_project_id}
          MCLI_PRIVATE_API_KEY: ${cloud_manager_private_api_key}
          MCLI_PUBLIC_API_KEY: ${cloud_manager_public_api_key}
          MCLI_SERVICE: cloud-manager
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --
          E2E_TAGS: e2e,iam
          <<: *go_options
        command: make e2e-test
  "cloud manager e2e":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_ORG_ID: ${cloud_manager_org_id}
          MCLI_PROJECT_ID: ${cloud_manager_project_id}
          MCLI_PRIVATE_API_KEY: ${cloud_manager_private_api_key}
          MCLI_PUBLIC_API_KEY: ${cloud_manager_public_api_key}
          MCLI_SERVICE: cloud-manager
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --
          E2E_TAGS: e2e,cloudmanager
          <<: *go_options
        command: make e2e-test
  "deploy spawn host":
    - command: shell.exec
      type: setup
      params:
        shell: bash
        script: |
          set -e
          keyfile="src/github.com/mongodb/mongocli/build/package/ssh_id"
          echo '${__project_aws_ssh_key_value}' > "$keyfile"
          chmod 600 "$keyfile"
    - command: host.create
      type: system
      params:
        provider: ec2
        distro: ubuntu1604-small
        num_hosts: 1
        security_group_ids: [sg-097bff6dd0d1d31d0] # Allows hosts to talk to each other for MongoDB
    - command: host.list
      params:
        wait: true
        timeout_seconds: 300
        num_hosts: 1
        path: src/github.com/mongodb/mongocli/hosts.json
  ssh-ready:
    - command: subprocess.exec
      type: setup
      params:
        binary: src/github.com/mongodb/mongocli/build/package/ssh-ready.sh
        args: ['-u', 'ubuntu', '-i', 'src/github.com/mongodb/mongocli/build/package/ssh_id', '-h', 'src/github.com/mongodb/mongocli/hosts.json']
  "install automation agent":
    - command: subprocess.exec
      type: setup
      params:
        binary: src/github.com/mongodb/mongocli/build/package/install-agent-spawn-host.sh
        args: ['-u', 'ubuntu', '-i', 'src/github.com/mongodb/mongocli/build/package/ssh_id', '-h', 'src/github.com/mongodb/mongocli/hosts.json', '-g', '${automation_agent_mms_group_id}', '-a', '${automation_agent_mms_api_key}', '-b','${mcli_ops_manager_url}']
  "lint":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          set -Eeou pipefail

          export GOROOT="${go_root}"
          export PATH="./bin:$GOROOT/bin:$PATH"
          golangci-lint run --out-format junit-xml > lint-tests.xml
  "install gotestsum":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli/bin
        script: |
          set -Eeou pipefail

          curl -sfL https://github.com/gotestyourself/gotestsum/releases/download/v${gotestsum_ver}/gotestsum_${gotestsum_ver}_linux_amd64.tar.gz | tar zx
  "install golangci-lint":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        command: make setup
  "install gon":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli/bin
        script: |
          set -Eeou pipefail

          curl -sL https://github.com/mitchellh/gon/releases/download/v${gon_ver}/gon_macos.zip | tar zx
  "install goreleaser":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          set -Eeou pipefail

          curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh
  "install curator":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli/bin
        script: |
          set -Eeou pipefail

          curl -sL http://boxes.10gen.com/build/curator/curator-dist-rhel70-${curator_release|"latest"}.tar.gz | tar zx
  "set up gon":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        include_expansions_in_env:
          - ac_username
          - ac_password
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        silent: true
        binary: build/package/set-up-gon.sh
  "generate notices":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        include_expansions_in_env:
          - workdir
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        binary: build/package/generate-notices.sh
  "package":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        silent: true
        script: |
          set -o errexit

          cat <<EOF_BUILD_SH > ~/mongocli_package.sh
          #! /usr/bin/env bash

          cd $(pwd)

          export GOROOT="${go_root}"
          export PATH="./bin:${go_bin}:$PATH"
          export GITHUB_TOKEN=${github_token}

          ${goreleaser_cmd|goreleaser --rm-dist --snapshot}
          EOF_BUILD_SH
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          set -Eeou pipefail
          # notarization and signing can only happen in a session with access to the GUI, so we use ssh to it
          ssh -v -p 2222 localhost "bash ~/mongocli_package.sh"
  "install go-msi":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        command: choco install -y "go-msi" --force
  "uninstall go-msi":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        command: choco uninstall -y "go-msi"
  "generate msi":
    - command: subprocess.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        add_to_path:
          - ${go_bin}
          - "/cygdrive/c/Program Files/go-msi"
          - "/cygdrive/c/wixtools/bin"
        include_expansions_in_env:
          - workdir
        env:
          <<: *go_options
        command: bash.exe -c build/package/generate-msi.sh
  "rename pkg":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        include_expansions_in_env:
          - unstable
          - latest_deb
          - latest_rpm
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        binary: build/package/rename-pkg.sh
  "generate download archive json":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli/dist
        script: |
          set -Eeou pipefail

          export GOROOT="${go_root}"
          export PATH="./bin:${go_bin}:$PATH"

          VERSION=$(git describe | cut -d "v" -f 2)

          go run ../internal/release/main.go "$VERSION"
  "upload dist":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongocli/dist/*.tar.gz
          - src/github.com/mongodb/mongocli/dist/*.zip
          - src/github.com/mongodb/mongocli/dist/*.deb
          - src/github.com/mongodb/mongocli/dist/*.rpm
          - src/github.com/mongodb/mongocli/dist/*.tgz
          - src/github.com/mongodb/mongocli/dist/*.json
          - src/github.com/mongodb/mongocli/dist/*.rb
          - src/github.com/mongodb/mongocli/dist/*.msi
        remote_file: ${project}/dist/${revision}_${created_at}/
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: inernal-bucket
  "set up notary client credentials":
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongocli
        silent: true
        script: |
          set -o errexit

          # curator env variables
          cat <<EOF > notary_env.sh
          export NOTARY_KEY_NAME='server-4.4'
          export NOTARY_TOKEN=${signing_auth_token_44}
          export BARQUE_USERNAME=${barque_user}
          export BARQUE_PASSWORD=${barque_password}
          EOF

          echo "${signing_auth_token_44}" > ./signing_auth_token
  "push":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - barque_url
          - distro
          - edition
          - server_version
          - project
          - revision
          - created_at
          - ext
        add_to_path:
          - ./bin
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        binary: build/package/curator-push.sh

post:
  - command: attach.xunit_results
    params:
      files: ["src/github.com/mongodb/mongocli/*.xml"]

tasks:
  - name: compile
    tags: ["code_health"]
    commands:
      - func: "clone"
      - func: "build"
  - name: unit_test
    tags: ["code_health"]
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "test"
      - func: "generate html coverage"
      - func: "upload html coverage"
  - name: lint
    tags: ["code_health"]
    commands:
      - func: "clone"
      - func: "install golangci-lint"
      - func: "lint"
  - name: atlas_e2e
    tags: ["e2e"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "atlas e2e"
  - name: iam_atlas_e2e
    tags: ["e2e"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "iam atlas e2e"
  - name: iam_cloud_manager_e2e
    tags: ["e2e"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "iam cloud manager e2e"
  - name: atlas_logs_e2e
    tags: ["e2e"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "atlas logs e2e"
  - name: atlas_metrics_e2e
    tags: ["e2e"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "atlas metrics e2e"
  - name: atlas_clusters_e2e
    tags: ["e2e"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "atlas clusters e2e"
  - name: cloud_manager_e2e
    tags: ["e2e"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "deploy spawn host"
      - func: ssh-ready
      - func: "install automation agent"
      - func: "cloud manager e2e"
  - name: package_msi
    tags: ["packaging"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install go-msi"
      - func: "generate msi"
      - func: "uninstall go-msi"
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_files_include_filter:
            - src/github.com/mongodb/mongocli/dist/*.msi
          remote_file: ${project}/dist/${revision}_${created_at}/
          bucket: mongodb-mongocli-build
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
  - name: package_goreleaser
    tags: ["packaging"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "generate notices"
      - func: "install goreleaser"
      - func: "install gon"
      - func: "set up gon"
      - func: "package"
      - func: "rename pkg"
        vars:
          unstable: -unstable
          latest_deb: ~latest
          latest_rpm: .latest
      - command: archive.targz_pack
        params:
          target: src/github.com/mongodb/mongocli/dist/deb.tgz
          source_dir: src/github.com/mongodb/mongocli/dist/apt
          include:
            - "*.deb"
      - command: archive.targz_pack
        params:
          target: src/github.com/mongodb/mongocli/dist/rpm.tgz
          source_dir: src/github.com/mongodb/mongocli/dist/yum
          include:
            - "*.rpm"
      - func: "generate download archive json"
      - func: "upload dist"
  - name: release
    stepback: false
    patch_only: true
    depends_on:
      - name: compile
        variant: "code_health"
    commands:
      - func: "clone"
      - func: "generate notices"
      - func: "install goreleaser"
      - func: "install gon"
      - func: "set up gon"
      - func: "package"
        vars:
          goreleaser_cmd: goreleaser --rm-dist
      - func: "rename pkg"
      - command: archive.targz_pack
        params:
          target: src/github.com/mongodb/mongocli/dist/deb.tgz
          source_dir: src/github.com/mongodb/mongocli/dist/apt
          include:
            - "*.deb"
      - command: archive.targz_pack
        params:
          target: src/github.com/mongodb/mongocli/dist/rpm.tgz
          source_dir: src/github.com/mongodb/mongocli/dist/yum
          include:
            - "*.rpm"
      - func: "generate download archive json"
      - func: "upload dist"
      - command: s3.put
        params:
          aws_key: ${download_center_aws_key}
          aws_secret: ${download_center_aws_secret}
          local_files_include_filter:
            - src/github.com/mongodb/mongocli/dist/*.tar.gz
            - src/github.com/mongodb/mongocli/dist/*.zip
            - src/github.com/mongodb/mongocli/dist/*.deb
            - src/github.com/mongodb/mongocli/dist/*.rpm
            - src/github.com/mongodb/mongocli/dist/*.tgz
            - src/github.com/mongodb/mongocli/dist/*.json
          remote_file: mongocli/
          bucket: downloads.mongodb.org
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
          display_name: downloads-center-
  - name: release_msi
    stepback: false
    patch_only: true
    depends_on:
      - name: compile
        variant: "code_health"
    commands:
      - func: "clone"
      - func: "install go-msi"
      - func: "generate msi"
      - func: "uninstall go-msi"
      - func: "upload dist"
      - command: s3.put
        params:
          aws_key: ${download_center_aws_key}
          aws_secret: ${download_center_aws_secret}
          local_files_include_filter:
            - src/github.com/mongodb/mongocli/dist/*.msi
          remote_file: mongocli/
          bucket: downloads.mongodb.org
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
          display_name: downloads-center-
  ################################################################
  # Unstable Publish
  # RPM Distros
  - name: push_rhel70_enterprise
    <<: &default_push_def
      # This should prevent this task from running in patch builds, where we
      # don't want to publish packages.
      patchable: false
      stepback: false
      tags: ["push"]
      depends_on:
        - name: compile
          variant: "code_health"
        - name: package_goreleaser
          variant: "goreleaser_snaphot"
    commands:
        - func: "clone"
        - func: "set up notary client credentials"
        - func: "install curator"
        - func: "push"
          vars:
            edition: enterprise
            distro: rhel70
            ext: rpm
  - name: push_rhel70_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
          ext: rpm
  - name: push_rhel80_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel80
          ext: rpm
  - name: push_rhel80_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel80
          ext: rpm
  - name: push_amazon2_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: amazon2
          ext: rpm
  - name: push_amazon2_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: amazon2
          ext: rpm
  # DEB Distros
  - name: push_ubuntu1604_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1604_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1804_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1804
          ext: deb
  - name: push_ubuntu1804_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1804
          ext: deb
  - name: push_debian71_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian71
          ext: deb
  - name: push_debian71_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian71
          ext: deb
  - name: push_debian81_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian81
          ext: deb
  - name: push_debian81_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian81
          ext: deb
  - name: push_debian92_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian92
          ext: deb
  - name: push_debian92_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian92
          ext: deb
  - name: push_debian10_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian10
          ext: deb
  - name: push_debian10_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian10
          ext: deb
  ################################################################
  # Stable Publish
  # RPM Distros
  - name: push_rhel70_enterprise_44
    <<: &default_push_stable_def
      patch_only: true
      stepback: false
      tags: ["push_stable"]
      depends_on:
        - name: compile
          variant: "code_health"
        - name: release
          variant: "release_publish"
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
          ext: rpm
  - name: push_rhel70_org_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
          ext: rpm
  - name: push_rhel80_enterprise_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel80
          ext: rpm
  - name: push_rhel80_org_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel80
          ext: rpm
  - name: push_amazon2_enterprise_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: amazon2
          ext: rpm
  - name: push_amazon2_org_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: amazon2
          ext: rpm
  # DEB Distros
  - name: push_ubuntu1604_enterprise_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1604_org_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1804_enterprise_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1804
          ext: deb
  - name: push_ubuntu1804_org_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1804
          ext: deb
  - name: push_debian71_enterprise_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian71
          ext: deb
  - name: push_debian71_org_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian71
          ext: deb
  - name: push_debian81_enterprise_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian81
          ext: deb
  - name: push_debian81_org_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian81
          ext: deb
  - name: push_debian92_enterprise_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian92
          ext: deb
  - name: push_debian92_org_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian92
          ext: deb
  - name: push_debian10_enterprise_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian10
          ext: deb
  - name: push_debian10_org_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "set up notary client credentials"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian10
          ext: deb
buildvariants:
  - name: code_health
    display_name: "Code Health"
    run_on:
      - rhel70-small
    expansions:
      go_root: "/opt/golang/go1.14"
      go_bin: "/opt/golang/go1.14/bin"
    tasks:
      - name: .code_health
  - name: e2e
    display_name: "E2E"
    run_on:
      - rhel70-small
    expansions:
      go_root: "/opt/golang/go1.14"
      go_bin: "/opt/golang/go1.14/bin"
    tasks:
      - name: .e2e
  - name: goreleaser_snaphot
    display_name: "Packaging and Publishing (goreleaser, apt, yum)"
    run_on:
      - macos-1014-codesign
    expansions:
      go_root: "/opt/golang/go1.14"
      go_bin: "/opt/golang/go1.14/bin"
      server_version: "0.9.9"
    tasks:
      - name: package_goreleaser
      - name: .push
        run_on:
          - rhel70-small
  - name: go_msi_snapshot
    display_name: "Packaging (go-msi)"
    run_on:
      - windows-64-vs2017-compile
    expansions:
      go_root: "c:\\golang\\go1.14"
      go_bin: "c:\\golang\\go1.14/bin"
    tasks:
      - name: package_msi
  - name: release_publish
    display_name: "Release (goreleaser)"
    run_on:
      - macos-1014-codesign
    expansions:
      go_root: "/opt/golang/go1.14"
      go_bin: "/opt/golang/go1.14/bin"
      server_version: "4.4.0-rc2"
    tasks:
      - name: release
      - name: .push_stable
        run_on:
          - rhel70-small
  - name: release_msi
    display_name: "Release (go-msi)"
    run_on:
      - windows-64-vs2017-compile
    expansions:
      go_root: "c:\\golang\\go1.14"
      go_bin: "c:\\golang\\go1.14/bin"
    tasks:
      - name: release_msi
