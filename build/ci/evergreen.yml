exec_timeout_secs: 1800 # automatically fail any task if it takes longer than 30 minutes to finish.
stepback: true
command_type: system
pre_error_fails_task: true

# Files that match an ignore-list pattern will not trigger a build, if they're the only modified
# files in the patch.
ignore:
  - "*.md"
  - "*.txt"
variables:
  - &go_options
    GO111MODULE: "on"
    GOROOT: ${go_root}
functions:
  "clone":
    - command: git.get_project
      type: setup
      params:
        directory: src/github.com/mongodb/mongocli
  "build":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        command: make build
  "unit-test":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          TEST_CMD: gotestsum --junitfile unit-tests.xml --
          <<: *go_options
        command: make unit-test
  "integration-test":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          TEST_CMD: gotestsum --junitfile unit-tests.xml --
          <<: *go_options
        command: make integration-test
  "generate html coverage":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        command: go tool cover -html=coverage.out -o coverage.html
  "upload html coverage":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/github.com/mongodb/mongocli/coverage.html
        remote_file: ${project}/coverage/internal/${task_id}.html
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: text/html
        display_name: internal-html-coverage
  "e2e test":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        include_expansions_in_env:
          - MCLI_ORG_ID
          - MCLI_PROJECT_ID
          - MCLI_PRIVATE_API_KEY
          - MCLI_PUBLIC_API_KEY
          - MCLI_SERVICE
          - TEST_CMD
          - E2E_TAGS
        working_dir: src/github.com/mongodb/mongocli
        env:
          XDG_CONFIG_HOME: ${workdir}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --format standard-verbose --
          <<: *go_options
        command: make e2e-test
  "deploy spawn host":
    - command: shell.exec
      type: setup
      params:
        shell: bash
        silent: true
        script: |
          set -e
          keyfile="src/github.com/mongodb/mongocli/build/ci/ssh_id"
          echo '${__project_aws_ssh_key_value}' > "$keyfile"
          chmod 600 "$keyfile"
    - command: host.create
      type: system
      params:
        provider: ec2
        distro: ubuntu1804-small
        num_hosts: 1
        security_group_ids: [sg-097bff6dd0d1d31d0] # Allows hosts to talk to each other for MongoDB
    - command: host.list
      params:
        wait: true
        timeout_seconds: 300
        num_hosts: 1
        path: src/github.com/mongodb/mongocli/build/ci/hosts.json
  ssh-ready:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli/build/ci
        binary: ./ssh-ready.sh
        args: ['-u', 'ubuntu', '-i', 'ssh_id', '-h', 'hosts.json']
  "install automation agent":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli/build/ci
        binary: ./install-agent-spawn-host.sh
        env:
          LC_AGENT_KEY: ${automation_agent_mms_api_key}
          LC_GROUP_ID: ${automation_agent_mms_group_id}
          BASE_URL: ${mcli_ops_manager_url}
        args: ['-u', 'ubuntu', '-i', 'ssh_id', '-h', 'hosts.json']
  "lint":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          set -Eeou pipefail

          export GOROOT="${go_root}"
          export PATH="./bin:$GOROOT/bin:$PATH"
          golangci-lint run --out-format junit-xml > lint-tests.xml
  "install gotestsum":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli/bin
        script: |
          set -Eeou pipefail

          curl -sfL https://github.com/gotestyourself/gotestsum/releases/download/v${gotestsum_ver}/gotestsum_${gotestsum_ver}_linux_amd64.tar.gz | tar zx
  "install golangci-lint":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        command: make setup
  "install gon":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli/bin
        script: |
          set -Eeou pipefail

          curl -sL https://github.com/mitchellh/gon/releases/download/v${gon_ver}/gon_macos.zip | tar zx
  "install goreleaser":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          set -Eeou pipefail

          curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | sh
  "install snyk":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli/bin
        script: |
          set -Eeou pipefail

          curl -sfL https://github.com/snyk/snyk/releases/download/v${snyk_ver}/snyk-linux -o snyk
          chmod +x snyk
  "snyk scan":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          export SNYK_TOKEN=${snyk_token}

          set -Eeou pipefail

          export GOROOT="${go_root}"
          export PATH="./bin:$GOROOT/bin:$PATH"
          ./bin/snyk test --org=cloud
  "install curator":
    - command: shell.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli/bin
        script: |
          set -Eeou pipefail

          curl -sL http://boxes.10gen.com/build/curator/curator-dist-rhel70-${curator_release|"latest"}.tar.gz | tar zx
  "set up gon":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        include_expansions_in_env:
          - ac_username
          - ac_password
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        silent: true
        binary: build/package/set-up-gon.sh
  "generate notices":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        include_expansions_in_env:
          - workdir
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        binary: build/package/generate-notices.sh
  "package":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        silent: true
        script: |
          set -o errexit

          cat <<EOF_BUILD_SH > ~/mongocli_package.sh
          #! /usr/bin/env bash

          cd $(pwd)

          export GOROOT="${go_root}"
          export PATH="./bin:${go_bin}:$PATH"
          export GITHUB_TOKEN=${github_token}

          ${goreleaser_cmd|goreleaser --rm-dist --snapshot}
          EOF_BUILD_SH
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        script: |
          set -Eeou pipefail
          # notarization and signing can only happen in a session with access to the GUI, so we use ssh to it
          ssh -v -p 2222 localhost "bash ~/mongocli_package.sh"
  "install go-msi":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        command: choco install -y "go-msi" --force
  "uninstall go-msi":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongocli
        command: choco uninstall -y "go-msi"
  "generate msi":
    - command: subprocess.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli
        add_to_path:
          - ${go_bin}
          - "/cygdrive/c/Program Files/go-msi"
          - "/cygdrive/c/wixtools/bin"
        include_expansions_in_env:
          - workdir
        env:
          <<: *go_options
        command: bash.exe -c build/package/generate-msi.sh
  "rename pkg":
    - command: subprocess.exec
      type: test
      params:
        add_to_path:
          - ${go_bin}
        include_expansions_in_env:
          - unstable
          - latest_deb
          - latest_rpm
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
        binary: build/package/rename-pkg.sh
  "generate download archive json":
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongocli/dist
        script: |
          set -Eeou pipefail

          export GOROOT="${go_root}"
          export PATH="./bin:${go_bin}:$PATH"

          VERSION=$(git describe | cut -d "v" -f 2)

          go run ../internal/release/main.go "$VERSION"
  "upload dist":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongocli/dist/*.tar.gz
          - src/github.com/mongodb/mongocli/dist/*.zip
          - src/github.com/mongodb/mongocli/dist/*.deb
          - src/github.com/mongodb/mongocli/dist/*.rpm
          - src/github.com/mongodb/mongocli/dist/*.tgz
          - src/github.com/mongodb/mongocli/dist/*.json
          - src/github.com/mongodb/mongocli/dist/*.rb
          - src/github.com/mongodb/mongocli/dist/*.msi
        remote_file: ${project}/dist/${revision}_${created_at}/
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: inernal-bucket

  "push":
    - command: subprocess.exec
      type: test
      params:
        include_expansions_in_env:
          - barque_url
          - distro
          - edition
          - server_version
          - project
          - revision
          - created_at
          - ext
          - signing_auth_token_42
          - signing_auth_token_44
          - signing_auth_token_46
        add_to_path:
          - ./bin
        working_dir: src/github.com/mongodb/mongocli
        env:
          <<: *go_options
          NOTARY_KEY_NAME: ${notary_key_name|server-4.4}
          BARQUE_USERNAME: ${barque_user}
          BARQUE_API_KEY: ${barque_api_key}
        binary: build/package/curator-push.sh

post:
  - command: attach.xunit_results
    params:
      files: ["src/github.com/mongodb/mongocli/*.xml"]

tasks:
  - name: compile
    tags: ["code_health"]
    commands:
      - func: "clone"
      - func: "build"
  - name: unit_test
    tags: ["code_health"]
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "unit-test"
      - func: "generate html coverage"
      - func: "upload html coverage"
  - name: integration_test
    tags: ["code_health"]
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "integration-test"
  - name: lint
    tags: ["code_health"]
    commands:
      - func: "clone"
      - func: "install golangci-lint"
      - func: "lint"
  - name: snyk_scan
    tags: ["code_health"]
    commands:
      - func: "clone"
      - func: "install snyk"
      - func: "snyk scan"
  - name: config_e2e
    tags: ["e2e","generic"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - command: shell.exec
        type: test
        params:
          script: |
            set -Eeou pipefail

            cat <<EOF > mongocli.toml
            [e2e]
              org_id = "5e429e7706822c6eac4d5971"
              public_api_key = "AAUMGJXA"
              service = "cloud"
            EOF
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,config
  # If your e2e tests depend on a cluster running please consider setting it on its own task
  - name: atlas_generic_e2e
    tags: ["e2e","generic","atlas"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,generic
  # This is all about cluster which tends to be slow to get a healthy one
  - name: atlas_clusters_e2e
    tags: ["e2e","clusters","atlas"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,clusters
  # LDAP Configuration depends on a cluster running
  - name: atlas_ldap_e2e
    tags: ["e2e","clusters","atlas"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,ldap
  # Logs depend on a cluster running to get logs from
  - name: atlas_logs_e2e
    tags: ["e2e","clusters","atlas"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,logs
  # Metrics depend on a cluster running to get metrics from
  - name: atlas_metrics_e2e
    tags: ["e2e","clusters","atlas"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,metrics
  # Processes depend on a cluster running
  - name: atlas_processes_e2e
    tags: ["e2e","clusters","atlas"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,processes
  # Online archives depend on a cluster to create the archive against
  - name: atlas_online_archive_e2e
    tags: ["e2e","clusters","atlas"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,onlinearchive
  # Search depend on a cluster to create the indexes against
  - name: atlas_search_e2e
    tags: ["e2e","clusters","atlas"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,search
  # Private endpoints can be flaky when multiple tests run concurrently so keeping this out of the PR suite
  - name: atlas_private_endpoint_e2e
    tags: ["e2e","networking","atlas"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,networking
  # IAM commands tests with an Atlas profile
  - name: atlas_iam_e2e
    tags: ["e2e","generic","atlas"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_SERVICE: cloud
          E2E_TAGS: iam
  # Cloud Manager and Ops Manager (indirectly) tests
  - name: cloud_manager_iam_e2e
    tags: ["e2e","generic","cloudmanager"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${cloud_manager_org_id}
          MCLI_PROJECT_ID: ${cloud_manager_project_id}
          MCLI_PRIVATE_API_KEY: ${cloud_manager_private_api_key}
          MCLI_PUBLIC_API_KEY: ${cloud_manager_public_api_key}
          MCLI_SERVICE: cloud-manager
          E2E_TAGS: iam
  - name: cloud_manager_generic_e2e
    tags: ["e2e","generic","cloudmanager"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${cloud_manager_org_id}
          MCLI_PROJECT_ID: ${cloud_manager_project_id}
          MCLI_PRIVATE_API_KEY: ${cloud_manager_private_api_key}
          MCLI_PUBLIC_API_KEY: ${cloud_manager_public_api_key}
          MCLI_SERVICE: cloud-manager
          E2E_TAGS: cloudmanager,generic
  # Deploy a replica set, we need to be careful on running parallel modifications to the automation config
  - name: cloud_manager_deploy_replica_set_e2e
    tags: ["e2e","clusters","cloudmanager"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "deploy spawn host"
      - func: ssh-ready
      - func: "install automation agent"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${cloud_manager_org_id}
          MCLI_PROJECT_ID: ${cloud_manager_project_id}
          MCLI_PRIVATE_API_KEY: ${cloud_manager_private_api_key}
          MCLI_PUBLIC_API_KEY: ${cloud_manager_public_api_key}
          MCLI_SERVICE: cloud-manager
          E2E_TAGS: cloudmanager,remote,replica
  # Deploy a sharded cluster, we need to be careful on running parallel modifications to the automation config
  - name: cloud_manager_deploy_sharded_cluster_e2e
    tags: ["e2e","clusters","cloudmanager"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
      - name: cloud_manager_deploy_replica_set_e2e
        variant: "e2e_cloud_manager_remote"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install gotestsum"
      - func: "deploy spawn host"
      - func: ssh-ready
      - func: "install automation agent"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${cloud_manager_org_id}
          MCLI_PROJECT_ID: ${cloud_manager_project_id}
          MCLI_PRIVATE_API_KEY: ${cloud_manager_private_api_key}
          MCLI_PUBLIC_API_KEY: ${cloud_manager_public_api_key}
          MCLI_SERVICE: cloud-manager
          E2E_TAGS: cloudmanager,remote,sharded
  - name: package_msi
    tags: ["packaging"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "install go-msi"
      - func: "generate msi"
      - func: "uninstall go-msi"
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_files_include_filter:
            - src/github.com/mongodb/mongocli/dist/*.msi
          remote_file: ${project}/dist/${revision}_${created_at}/
          bucket: mongodb-mongocli-build
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
  - name: package_goreleaser
    tags: ["packaging"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "clone"
      - func: "generate notices"
      - func: "install goreleaser"
      - func: "install gon"
      - func: "set up gon"
      - func: "package"
      - func: "rename pkg"
        vars:
          unstable: -unstable
          latest_deb: ~latest
          latest_rpm: .latest
      - command: archive.targz_pack
        params:
          target: src/github.com/mongodb/mongocli/dist/deb.tgz
          source_dir: src/github.com/mongodb/mongocli/dist/apt
          include:
            - "*.deb"
      - command: archive.targz_pack
        params:
          target: src/github.com/mongodb/mongocli/dist/rpm.tgz
          source_dir: src/github.com/mongodb/mongocli/dist/yum
          include:
            - "*.rpm"
      - func: "generate download archive json"
      - func: "upload dist"
  - name: release
    stepback: false
    git_tag_only: true
    depends_on:
      - name: compile
        variant: "code_health"
      - name: release_msi
        variant: "release_msi"
    commands:
      - func: "clone"
      - func: "generate notices"
      - func: "install goreleaser"
      - func: "install gon"
      - func: "set up gon"
      - func: "package"
        vars:
          goreleaser_cmd: goreleaser --rm-dist
      - func: "rename pkg"
      - command: archive.targz_pack
        params:
          target: src/github.com/mongodb/mongocli/dist/deb.tgz
          source_dir: src/github.com/mongodb/mongocli/dist/apt
          include:
            - "*.deb"
      - command: archive.targz_pack
        params:
          target: src/github.com/mongodb/mongocli/dist/rpm.tgz
          source_dir: src/github.com/mongodb/mongocli/dist/yum
          include:
            - "*.rpm"
      - func: "generate download archive json"
      - func: "upload dist"
      - command: s3.put
        params:
          aws_key: ${download_center_aws_key}
          aws_secret: ${download_center_aws_secret}
          local_files_include_filter:
            - src/github.com/mongodb/mongocli/dist/*.tar.gz
            - src/github.com/mongodb/mongocli/dist/*.zip
            - src/github.com/mongodb/mongocli/dist/*.deb
            - src/github.com/mongodb/mongocli/dist/*.rpm
            - src/github.com/mongodb/mongocli/dist/*.tgz
            - src/github.com/mongodb/mongocli/dist/*.json
          remote_file: mongocli/
          bucket: downloads.mongodb.org
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
          display_name: downloads-center-
  - name: release_msi
    stepback: false
    git_tag_only: true
    depends_on:
      - name: compile
        variant: "code_health"
    commands:
      - func: "clone"
      - func: "install go-msi"
      - func: "generate msi"
      - func: "uninstall go-msi"
      - func: "upload dist"
      - command: s3.put
        params:
          aws_key: ${download_center_aws_key}
          aws_secret: ${download_center_aws_secret}
          local_files_include_filter:
            - src/github.com/mongodb/mongocli/dist/*.msi
          remote_file: mongocli/
          bucket: downloads.mongodb.org
          permissions: public-read
          content_type: ${content_type|application/x-gzip}
          display_name: downloads-center-
  ################################################################
  # Unstable Publish
  # RPM Distros
  - name: push_rhel62_enterprise
    <<: &default_push_def
      # This should prevent this task from running in patch builds, where we
      # don't want to publish packages.
      patchable: false
      stepback: false
      tags: ["push"]
      depends_on:
        - name: compile
          variant: "code_health"
        - name: package_goreleaser
          variant: "goreleaser_snapshot"
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel70
          ext: rpm
  - name: push_rhel62_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel62
          ext: rpm
  - name: push_rhel70_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel62
          ext: rpm
  - name: push_rhel70_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
          ext: rpm
  - name: push_rhel80_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel80
          ext: rpm
  - name: push_rhel80_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel80
          ext: rpm
  - name: push_amazon2_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: amazon2
          ext: rpm
  - name: push_amazon2_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: amazon2
          ext: rpm
  # DEB Distros
  - name: push_ubuntu1604_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1604_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1804_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1804
          ext: deb
  - name: push_ubuntu1804_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1804
          ext: deb
  - name: push_ubuntu2004_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu2004
          ext: deb
  - name: push_ubuntu2004_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu2004
          ext: deb
  - name: push_debian71_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian71
          ext: deb
  - name: push_debian71_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian71
          ext: deb
  - name: push_debian81_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian81
          ext: deb
  - name: push_debian81_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian81
          ext: deb
  - name: push_debian92_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian92
          ext: deb
  - name: push_debian92_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian92
          ext: deb
  - name: push_debian10_enterprise
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian10
          ext: deb
  - name: push_debian10_org
    <<: *default_push_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian10
          ext: deb
  ################################################################
  # Stable Publish
  # RPM Distros
  - name: push_rhel62_enterprise_stable
    <<: &default_push_stable_def
      git_tag_only: true
      stepback: false
      tags: ["push_stable"]
      depends_on:
        - name: compile
          variant: "code_health"
        - name: release
          variant: "release_github"
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
          ext: rpm
  - name: push_rhel62_org_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
          ext: rpm
  - name: push_rhel70_enterprise_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
          ext: rpm
  - name: push_rhel70_org_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel70
          ext: rpm
  - name: push_rhel80_enterprise_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: rhel80
          ext: rpm
  - name: push_rhel80_org_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: rhel80
          ext: rpm
  - name: push_amazon2_enterprise_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: amazon2
          ext: rpm
  - name: push_amazon2_org_44
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: amazon2
          ext: rpm
  # DEB Distros
  - name: push_ubuntu1604_enterprise_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1604_org_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1604
          ext: deb
  - name: push_ubuntu1804_enterprise_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu1804
          ext: deb
  - name: push_ubuntu1804_org_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu1804
          ext: deb
  - name: push_ubuntu2004_enterprise_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: ubuntu2004
          ext: deb
  - name: push_ubuntu2004_org_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: ubuntu2004
          ext: deb
  - name: push_debian71_enterprise_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian71
          ext: deb
  - name: push_debian71_org_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian71
          ext: deb
  - name: push_debian81_enterprise_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian81
          ext: deb
  - name: push_debian81_org_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian81
          ext: deb
  - name: push_debian92_enterprise_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian92
          ext: deb
  - name: push_debian92_org_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian92
          ext: deb
  - name: push_debian10_enterprise_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: enterprise
          distro: debian10
          ext: deb
  - name: push_debian10_org_stable
    <<: *default_push_stable_def
    commands:
      - func: "clone"
      - func: "install curator"
      - func: "push"
        vars:
          edition: org
          distro: debian10
          ext: deb

buildvariants:
  - name: code_health
    display_name: "Code Health"
    run_on:
      - rhel70-small
    expansions:
      go_root: "/opt/golang/go1.15"
      go_bin: "/opt/golang/go1.15/bin"
    tasks:
      - name: .code_health
  - name: e2e_generic
    display_name: "E2E Tests Generic"
    run_on:
      - rhel70-small
    expansions:
      go_root: "/opt/golang/go1.15"
      go_bin: "/opt/golang/go1.15/bin"
    tasks:
      - name: ".e2e .generic"
  - name: e2e_atlas_clusters
    display_name: "E2E Atlas Cluster Tests"
    run_on:
      - rhel70-small
    expansions:
      go_root: "/opt/golang/go1.15"
      go_bin: "/opt/golang/go1.15/bin"
    tasks:
      - name: ".e2e .clusters .atlas"
  - name: e2e_atlas_networking
    display_name: "E2E Atlas Networking Tests"
    run_on:
      - rhel70-small
    expansions:
      go_root: "/opt/golang/go1.15"
      go_bin: "/opt/golang/go1.15/bin"
    tasks:
      - name: ".e2e .networking .atlas"
  - name: e2e_cloud_manager_remote
    display_name: "E2E Cloud Manager Remote Host Tests"
    run_on:
      - rhel70-small
    expansions:
      go_root: "/opt/golang/go1.15"
      go_bin: "/opt/golang/go1.15/bin"
    tasks:
      - name: ".e2e .clusters .cloudmanager"
  - name: goreleaser_snapshot
    display_name: "Packaging and Publishing (goreleaser, apt, yum)"
    run_on:
      - macos-1014-codesign
    expansions:
      go_root: "/opt/golang/go1.15"
      go_bin: "/opt/golang/go1.15/bin"
      server_version: "4.4.0-rc3"
    tasks:
      - name: package_goreleaser
      - name: .push
        run_on:
          - rhel70-small
  - name: go_msi_snapshot
    display_name: "Packaging (go-msi)"
    run_on:
      - windows-vsCurrent-small
    expansions:
      go_root: "c:\\golang\\go1.15"
      go_bin: "c:\\golang\\go1.15/bin"
    tasks:
      - name: package_msi
  - name: release_msi
    display_name: "Release (go-msi)"
    run_on:
      - windows-vsCurrent-small
    expansions:
      go_root: "c:\\golang\\go1.15"
      go_bin: "c:\\golang\\go1.15/bin"
    tasks:
      - name: release_msi
  - name: release_github
    display_name: "Release (goreleaser)"
    run_on:
      - macos-1014-codesign
    expansions:
      go_root: "/opt/golang/go1.15"
      go_bin: "/opt/golang/go1.15/bin"
    tasks:
      - name: release
  - name: release_publish_42
    display_name: "Publish yum/apt 4.2"
    run_on:
      - rhel70-small
    expansions:
      server_version: "4.2.3"
      notary_key_name: "server-4.2"
    tasks:
      - name: .push_stable
  - name: release_publish_44
    display_name: "Publish yum/apt 4.4"
    run_on:
      - rhel70-small
    expansions:
      server_version: "4.4.3"
      notary_key_name: "server-4.4"
    tasks:
      - name: .push_stable
