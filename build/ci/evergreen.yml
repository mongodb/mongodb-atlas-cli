# Copyright 2021 MongoDB Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

exec_timeout_secs: 4200 # automatically fail any task if it takes longer than 1h10m to finish.
stepback: true
command_type: system
pre_error_fails_task: true

variables:
  - &go_linux_version
      go_root: "/opt/golang/go1.21"
      go_bin: "/opt/golang/go1.21/bin"
      go_base_path: ""
  - &go_env
      XDG_CONFIG_HOME: ${go_base_path}${workdir}
      GO111MODULE: "on"
      GOROOT: ${go_root}
      GOPATH: ${go_base_path}${workdir}
      ADD_PATH: "${go_bin}:${go_base_path}${workdir}/bin:${go_base_path}${workdir}/src/github.com/mongodb/mongodb-atlas-cli/bin"
      GOPROXY: ${go_proxy}
  - &go_options
    add_to_path:
      - ${go_bin}
      - ${go_base_path}${workdir}/bin
      - ${go_base_path}${workdir}/src/github.com/mongodb/mongodb-atlas-cli/bin
    include_expansions_in_env:
      - go_base_path
      - go_proxy
      - workdir
    working_dir: src/github.com/mongodb/mongodb-atlas-cli
    env:
      <<: *go_env
functions:
  "clone":
    - command: git.get_project
      type: setup
      params:
        directory: src/github.com/mongodb/mongodb-atlas-cli
  "build":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        command: make build
  "e2e test":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - MCLI_ORG_ID
          - MCLI_PROJECT_ID
          - MCLI_PRIVATE_API_KEY
          - MCLI_PUBLIC_API_KEY
          - MCLI_SERVICE
          - TEST_CMD
          - E2E_TAGS
          - E2E_TEST_BUCKET
          - E2E_CLOUD_ROLE_ID
          - MCLI_OPS_MANAGER_URL
          - OM_VERSION
          - LOCAL_KEY
          - KMIP_CA
          - KMIP_CERT
          - GCP_CREDENTIALS
          - AWS_ACCESS_KEY
          - AWS_SECRET_ACCESS_KEY
          - AZURE_TENANT_ID
          - AZURE_CLIENT_ID
          - AZURE_CLIENT_SECRET
          - E2E_TIMEOUT
          - E2E_SERVERLESS_INSTANCE_NAME
          - E2E_PARALLEL
          - revision
        env:
          <<: *go_env
          MCLI_SKIP_UPDATE_CHECK: "yes"
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --format standard-verbose --
        command: make e2e-test
  "deploy spawn host":
    - command: shell.exec
      type: setup
      params:
        shell: bash
        silent: true
        script: |
          set -e
          keyfile="src/github.com/mongodb/mongodb-atlas-cli/build/ci/ssh_id"
          echo '${__project_aws_ssh_key_value}' > "$keyfile"
          chmod 600 "$keyfile"
    - command: host.create
      type: system
      params:
        provider: ec2
        distro: ubuntu2004-large
        num_hosts: 1
        security_group_ids: [sg-097bff6dd0d1d31d0] # Allows hosts to talk to each other for MongoDB
    - command: host.list
      params:
        wait: true
        timeout_seconds: 300
        num_hosts: 1
        path: src/github.com/mongodb/mongodb-atlas-cli/build/ci/hosts.json
  ssh-ready:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci
        binary: ./ssh-ready.sh
        args: ['-u', 'ubuntu', '-i', 'ssh_id', '-h', 'hosts.json']
  "install automation agent":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci
        binary: ./install-agent-spawn-host.sh
        env:
          LC_AGENT_KEY: ${automation_agent_mms_api_key}
          LC_GROUP_ID: ${automation_agent_mms_group_id}
          BASE_URL: ${mcli_ops_manager_url}
        args: ['-u', 'ubuntu', '-i', 'ssh_id', '-h', 'hosts.json']
  "install ops manager":
    - command: subprocess.exec
      type: setup
      params:
        include_expansions_in_env:
          - ARCHIVE
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci
        binary: ./install-ops-manager-spawn-host.sh
        args: ['-u', 'ubuntu', '-i', 'ssh_id', '-h', 'hosts.json']
  "set-up ops manager":
    - command: subprocess.exec
      type: setup
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - ops_manager_service
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci
        binary: ./set-up-ops-manager.sh
        args: ['-h', 'hosts.json']
  "set-up cloud manager":
    - command: subprocess.exec
      type: setup
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - cloud_manager_service
          - revision
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci
        binary: ./set-up-cloud-manager.sh
        args: ['-h', 'hosts.json']
        env:
          <<: *go_env
          MCLI_ORG_ID: ${cloud_manager_org_id}
          MCLI_PROJECT_ID: ${cloud_manager_project_id}
          MCLI_PRIVATE_API_KEY: ${cloud_manager_private_api_key}
          MCLI_PUBLIC_API_KEY: ${cloud_manager_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud-manager
  "install gotestsum":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        shell: bash
        script: |
          set -Eeou pipefail
          export PATH="$ADD_PATH:$PATH"
          curl -sfL https://github.com/gotestyourself/gotestsum/releases/download/v${gotestsum_ver}/gotestsum_${gotestsum_ver}_linux_amd64.tar.gz | tar zx

  "install podman":
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        binary: ../build/ci/install_podman.sh
  "install pykmip":
    - command: subprocess.exec
      type: setup
      params:
        <<: *go_options
        working_dir: /src/github.com/mongodb/mongodb-atlas-cli/build/ci/kmip
        binary: ./install.sh
        args: ["-h", "hosts.json"]
        env:
          <<: *go_env
          KMIP_CA: ${logs_decrypt_kmip_ca}
          KMIP_CERT: ${logs_decrypt_kmip_cert}
  "setup operator":
    command: subprocess.exec
    type: setup
    params:
      working_dir: src/github.com/mongodb/mongodb-atlas-cli
      env:
        MCLI_ORG_ID: ${atlas_org_id}
        MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
        MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
        MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
      include_expansions_in_env:
        - workdir
      binary: ./build/ci/setup_operator.sh
  "generate evergreen":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - task_type
        binary: build/ci/evergreen-generate-tasks.sh
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongodb-atlas-cli/tasks.json
        remote_file: ${project}/dist/${revision}_${created_at}/mongocli/${task_type}/
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/json}
        display_name: internal-bucket
    - command: generate.tasks
      params:
        files:
          - tasks.json

pre:
  - func: "clone"
post:
  - command: subprocess.exec
    type: setup
    params:
      <<: *go_options
      working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci
      binary: ./clean-up-cloud-manager.sh
      args: ['-h', 'hosts.json']
  - command: attach.xunit_results
    params:
      files: ["src/github.com/mongodb/mongodb-atlas-cli/*.xml"]
tasks:
  - name: compile
    tags: ["code_health"]
    commands:
      - func: "build"
  - name: config_e2e
    tags: ["e2e","required"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - command: shell.exec
        type: test
        params:
          <<: *go_options
          shell: bash
          script: |
            set -Eeou pipefail
            mkdir "$XDG_CONFIG_HOME/mongocli"
            cat <<EOF > "$XDG_CONFIG_HOME/mongocli/config.toml"
            [e2e]
              org_id = "5e429e7706822c6eac4d5971"
              public_api_key = "AAUMGJXA"
              service = "cloud-manager"
            EOF
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud-manager
          E2E_TAGS: config
  - name: brew_e2e
    tags: ["e2e","required"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          E2E_TAGS: brew
  # Cloud Manager and Ops Manager (indirectly) tests
  - name: cloud_manager_iam_e2e
    tags: ["e2e","generic","cloudmanager"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${cloud_manager_org_id}
          MCLI_PROJECT_ID: ${cloud_manager_project_id}
          MCLI_PRIVATE_API_KEY: ${cloud_manager_private_api_key}
          MCLI_PUBLIC_API_KEY: ${cloud_manager_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud-manager
          E2E_TAGS: iam
  - name: cloud_manager_generic_e2e
    tags: ["e2e","generic","cloudmanager"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${cloud_manager_org_id}
          MCLI_PROJECT_ID: ${cloud_manager_project_id}
          MCLI_PRIVATE_API_KEY: ${cloud_manager_private_api_key}
          MCLI_PUBLIC_API_KEY: ${cloud_manager_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud-manager
          E2E_TAGS: cloudmanager,generic
  # Deploy a replica set, we need to be careful on running parallel modifications to the automation config
  - name: cloud_manager_deploy_replica_set_e2e
    tags: ["e2e","clusters","cloudmanager"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "build"
      - func: "deploy spawn host"
      - func: ssh-ready
      - func: "set-up cloud manager"
      - func: "install automation agent"
      - func: "e2e test"
        vars:
          E2E_TAGS: cloudmanager,remote,replica
  # Deploy a sharded cluster, we need to be careful on running parallel modifications to the automation config
  - name: cloud_manager_deploy_sharded_cluster_e2e
    tags: ["e2e","clusters","cloudmanager"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "build"
      - func: "deploy spawn host"
      - func: ssh-ready
      - func: "set-up cloud manager"
      - func: "install automation agent"
      - func: "e2e test"
        vars:
          E2E_TAGS: cloudmanager,remote,sharded
  # Deploy ops manager 6.0 and test against it
  - name: ops_manager_6_0_generic_e2e
    tags: [ "e2e","ops-manager-60" ]
    must_have_test_results: true
    depends_on:
        - name: compile
          variant: "code_health"
          patch_optional: true
    commands:
        - func: "install gotestsum"
        - func: "build"
        - func: "deploy spawn host"
        - func: ssh-ready
        - func: "install ops manager"
          vars:
            ARCHIVE: ${ops_manager_6_0_archive}
        - func: "set-up ops manager"
        - func: "e2e test"
          vars:
            E2E_TAGS: om60,generic
            OM_VERSION: 6.0
  - name: ops_manager_6_0_iam_e2e
    tags: [ "e2e","ops-manager-60" ]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "build"
      - func: "deploy spawn host"
      - func: ssh-ready
      - func: "install ops manager"
        vars:
          ARCHIVE: ${ops_manager_6_0_archive}
      - func: "set-up ops manager"
      - func: "e2e test"
        vars:
          E2E_TAGS: iam,om60
          OM_VERSION: 6.0
  - name: ops_manager_6_0_deploy_replica_set_e2e
    tags: [ "e2e","ops-manager-60" ]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "build"
      - func: "deploy spawn host"
      - func: ssh-ready
      - func: "install ops manager"
        vars:
          ARCHIVE: ${ops_manager_6_0_archive}
      - func: "set-up ops manager"
      - func: "install automation agent"
      - func: "e2e test"
        vars:
          E2E_TAGS: om60,remote,replica
  - name: ops_manager_6_0_deploy_sharded_cluster_e2e
    tags: [ "e2e","ops-manager-60" ]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "build"
      - func: "deploy spawn host"
      - func: ssh-ready
      - func: "install ops manager"
        vars:
          ARCHIVE: ${ops_manager_6_0_archive}
      - func: "set-up ops manager"
      - func: "install automation agent"
      - func: "e2e test"
        vars:
          E2E_TAGS: om60,remote,sharded
buildvariants:
  - name: code_health
    display_name: "Code Health"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: .code_health
  - name: e2e_generic
    display_name: "E2E Tests Generic"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .generic"
  - name: e2e_required
    display_name: "E2E Tests Required"
    run_on:
      - rhel8.9-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .required"
  - name: e2e_cloud_manager_remote
    display_name: "E2E Cloud Manager Remote Host Tests"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .clusters .cloudmanager"
  - name: e2e_ops_manager_60
    display_name: "E2E Ops Manager 6.0 Tests"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".ops-manager-60"
include:
  - filename: build/ci/release.yml
