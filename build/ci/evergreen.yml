# Copyright 2021 MongoDB Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

exec_timeout_secs: 4200 # automatically fail any task if it takes longer than 1h10m to finish.
stepback: true
command_type: system
pre_error_fails_task: true
include:
  - filename: build/ci/release.yml

variables:
  - &go_linux_version
      go_root: "/opt/golang/go1.23"
      go_bin: "/opt/golang/go1.23/bin"
      go_base_path: ""
  - &go_env
      XDG_CONFIG_HOME: ${go_base_path}${workdir}
      GO111MODULE: "on"
      GOROOT: ${go_root}
      GOPATH: ${go_base_path}${workdir}
      ADD_PATH: "${go_bin}:${go_base_path}${workdir}/bin:${go_base_path}${workdir}/src/github.com/mongodb/mongodb-atlas-cli/bin"
      GOPROXY: ${go_proxy}
  - &go_options
    add_to_path:
      - ${go_bin}
      - ${go_base_path}${workdir}/bin
      - ${go_base_path}${workdir}/src/github.com/mongodb/mongodb-atlas-cli/bin
    include_expansions_in_env:
      - go_base_path
      - go_proxy
      - workdir
    working_dir: src/github.com/mongodb/mongodb-atlas-cli
    env:
      <<: *go_env
pre:
  - func: "clone"
  - func: "set-expansions"
post:
  - command: attach.xunit_results
    params:
      files: ["src/github.com/mongodb/mongodb-atlas-cli/*.xml"]
functions:
  "clone":
    - command: git.get_project
      type: setup
      params:
        directory: src/github.com/mongodb/mongodb-atlas-cli
  "build":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        command: make build
  "vendor deps":
    - command: subprocess.exec
      params:
        <<: *go_options
        binary: go
        args:
          - mod
          - vendor
    - command: subprocess.exec
      params:
        <<: *go_options
        binary: tar
        args:
          - czf
          - vendor.tar.gz
          - vendor
    - command: subprocess.exec
      params:
        <<: *go_options
        binary: rm
        args:
          - -rf
          - vendor
  "install mongodb database tools":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        shell: bash
        env:
          <<: *go_env
          MONGODB_DATABASE_TOOLS_VERSION: 100.10.0
        script: |
          set -Eeou pipefail
          if [[ "$(uname -s)" == "Darwin"* ]]; then
            curl -sLo mongodb-database-tools.zip "https://fastdl.mongodb.org/tools/db/mongodb-database-tools-macos-arm64-$MONGODB_DATABASE_TOOLS_VERSION.zip"
            unzip mongodb-database-tools.zip
            mv mongodb-database-tools-*/bin/* .
            rm -rf mongodb-database-tools-* mongodb-database-tools.zip
          else
            mkdir -p mongodb-database-tools
            curl -sfL "https://fastdl.mongodb.org/tools/db/mongodb-database-tools-rhel70-x86_64-$MONGODB_DATABASE_TOOLS_VERSION.tgz" | tar zx -C mongodb-database-tools --strip-components 1
            mv mongodb-database-tools/bin/* .
            rm -rf mongodb-database-tools
          fi
  "e2e test":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - MCLI_ORG_ID
          - MCLI_PROJECT_ID
          - MCLI_PRIVATE_API_KEY
          - MCLI_PUBLIC_API_KEY
          - MCLI_SERVICE
          - TEST_CMD
          - E2E_TAGS
          - E2E_TEST_BUCKET
          - E2E_CLOUD_ROLE_ID
          - MCLI_OPS_MANAGER_URL
          - OM_VERSION
          - LOCAL_KEY
          - KMIP_CA
          - KMIP_CERT
          - GCP_CREDENTIALS
          - AWS_ACCESS_KEY
          - AWS_SECRET_ACCESS_KEY
          - AZURE_TENANT_ID
          - AZURE_CLIENT_ID
          - AZURE_CLIENT_SECRET
          - E2E_TIMEOUT
          - E2E_SERVERLESS_INSTANCE_NAME
          - E2E_PARALLEL
          - IDENTITY_PROVIDER_ID
          - LOCALDEV_IMAGE
          - revision
        env:
          <<: *go_env
          MCLI_SKIP_UPDATE_CHECK: "yes"
          DO_NOT_TRACK: "1"
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --format standard-verbose --
        command: make e2e-test
    - command: archive.targz_pack
      params:
        target: src/github.com/mongodb/mongodb-atlas-cli/coverage.tgz
        source_dir: src/github.com/mongodb/mongodb-atlas-cli/cov
        include:
          - '*'
        exclude_files:
          - .gitkeep
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/github.com/mongodb/mongodb-atlas-cli/coverage.tgz
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/cov/${build_variant}_${task_name}.coverage.tgz
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/json}
        display_name: internal-bucket
  "merge cov":
    - command: subprocess.exec
      params:
        <<: *go_options
        binary: build/ci/merge-cov.sh
    - command: archive.targz_pack
      params:
        target: src/github.com/mongodb/mongodb-atlas-cli/coverage.tgz
        source_dir: src/github.com/mongodb/mongodb-atlas-cli/
        include:
          - 'coverage.out'
          - 'cov/merged/*'
        exclude_files:
          - .gitkeep
    - command: shell.exec
      params:
        <<: *go_options
        shell: bash
        script: |
          set -Eeou pipefail
          PERCENTAGE=$(go tool cover -func=coverage.out | grep total: | awk '{print $3}' | sed 's/%//')
          COUNT=$(ls -1 cov/*.tgz | wc -l)
          cat <<EOF > expansions.yaml
          percentage: $PERCENTAGE
          count: $COUNT
          EOF
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/github.com/mongodb/mongodb-atlas-cli/expansions.yaml
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/expansions.yaml
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/yaml}
        display_name: internal-bucket expansions.yaml
    - command: expansions.update
      params:
        ignore_missing_file: true
        file: src/github.com/mongodb/mongodb-atlas-cli/expansions.yaml
    - command: subprocess.exec
      params:
        <<: *go_options
        binary: rm
        args:
          - -f
          - expansions.yaml
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/github.com/mongodb/mongodb-atlas-cli/coverage.tgz
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/cov/e2e.coverage.tgz
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/json}
        display_name: internal-bucket e2e.coverage.tgz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/github.com/mongodb/mongodb-atlas-cli/coverage.out
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/cov/e2e.coverage.out
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/json}
        display_name: internal-bucket e2e.coverage.out
  "install gotestsum":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        shell: bash
        script: |
          set -Eeou pipefail
          export PATH="$ADD_PATH:$PATH"
          if [[ "$(uname -s)" == "Darwin"* ]]; then
            URL=https://github.com/gotestyourself/gotestsum/releases/download/v${gotestsum_ver}/gotestsum_${gotestsum_ver}_darwin_arm64.tar.gz
          else
            URL=https://github.com/gotestyourself/gotestsum/releases/download/v${gotestsum_ver}/gotestsum_${gotestsum_ver}_linux_amd64.tar.gz
          fi
          curl -sfL $URL | tar zx
  "generate evergreen":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - task_type
        binary: build/ci/evergreen-generate-tasks.sh
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongodb-atlas-cli/tasks.json
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/${task_type}/
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/json}
        display_name: internal-bucket
    - command: generate.tasks
      params:
        files:
          - tasks.json
  "increase inotify limits":
    - command: shell.exec
      params:
        shell: bash
        script: |
          set -e
          if [[ "$(uname -s)" == "Darwin"* ]]; then
            echo "No need to increase inotify limits on macOS"
          else
            cat /proc/sys/fs/inotify/max_user_watches
            cat /proc/sys/fs/inotify/max_user_instances
            echo 1024 | sudo tee /proc/sys/fs/inotify/max_user_instances
            cat /proc/sys/fs/inotify/max_user_instances
          fi
  "install packer":
    - command: shell.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        env:
          <<: *go_env
          PACKER_VERSION: 1.11.2
        shell: bash
        script: |
          set -Eeou pipefail
          curl -sLo packer.zip https://releases.hashicorp.com/packer/$PACKER_VERSION/packer_$(echo $PACKER_VERSION)_linux_amd64.zip
          unzip packer.zip
          rm packer.zip LICENSE.txt
          packer -v
  "run packer":
    - command: shell.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/packer
        env:
          <<: *go_env
          AZURE_APP_ID: ${azure_app_id}
          AZURE_DISPLAY_NAME: ${azure_display_name}
          AZURE_PASSWORD: ${azure_password}
          AZURE_TENANT: ${azure_tenant}
          AZURE_SUBSCRIPTION_ID: ${azure_subscription_id}
        shell: bash
        script: |
          packer init ${file}
          packer build -force ${file}
  "install terraform":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        shell: bash
        env:
          <<: *go_env
          TERRAFORM_VERSION: 1.9.4
        script: |
          set -Eeou pipefail
          curl -sLo terraform.zip "https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_$(echo $TERRAFORM_VERSION)_linux_amd64.zip"
          unzip terraform.zip
          rm terraform.zip LICENSE.txt
  "terraform init":
    - command: subprocess.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform
        binary: terraform
        args:
          - init
  "copy to remote":
    - command: subprocess.exec
      params:
        binary: scp
        args:
          - -o
          - StrictHostKeyChecking=no
          - -i "${identity_file}"
          - -r
          - "${local_dir}"
          - "${user}@${host}:${remote_dir}"
  "copy from remote":
    - command: subprocess.exec
      params:
        binary: scp
        args:
          - -o
          - StrictHostKeyChecking=no
          - -i "${identity_file}"
          - -r
          - "${user}@${host}:${remote_dir}"
          - "${local_dir}"
  "ssh":
    - command: subprocess.exec
      params:
        binary: ssh
        args:
          - -o
          - StrictHostKeyChecking=no
          - -i "${identity_file}"
          - "${user}@${host}"
          - ${cmd}
  "terraform apply":
    - command: subprocess.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform
        binary: terraform
        args:
          - apply
          - -auto-approve
          - -var
          - "image_id=/subscriptions/${azure_subscription_id}/resourceGroups/atlascli-image-resources/providers/Microsoft.Compute/images/${image}"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform/terraform.tfstate
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/${task_type}/
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/octet-stream}
        display_name: internal-bucket terraform.tfstate
    - command: shell.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform
        shell: bash
        script: |
          set -Eeou pipefail
          echo "public_ip_address: $(terraform output -json | jq -r '.public_ip_address.value')" > expansions.yaml
    - command: expansions.update
      params:
        ignore_missing_file: true
        file: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform/expansions.yaml
    - command: subprocess.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform
        binary: rm
        args:
          - -f
          - expansions.yaml
  "terraform destroy":
    - command: subprocess.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform
        binary: terraform
        args:
          - apply
          - -destroy
          - -auto-approve
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform/terraform.tfstate
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/${task_type}/
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/octet-stream}
        display_name: internal-bucket
  "install azure cli":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        shell: bash
        script: |
          set -e
          sudo dnf clean all
          sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
          sudo dnf install -y https://packages.microsoft.com/config/rhel/9.0/packages-microsoft-prod.rpm
          sudo dnf install -y azure-cli
          az --version
  "login azure cli":
    - command: subprocess.exec
      type: setup
      params:
        <<: *go_options
        binary: az
        args:
          - login
          - --service-principal
          - -u
          - ${azure_app_id}
          - -p
          - ${azure_password}
          - --tenant
          - ${azure_tenant}
  "ssh-ready":
    - command: shell.exec
      params:
        exec_as_string: true
        script: |
          attempts=0
          connection_attempts=${connection_attempts|25}
          ## Check for remote connectivity
          while ! ssh \
            -i "${identity_file}" \
            -o ConnectTimeout=10 \
            -o ForwardAgent=yes \
            -o IdentitiesOnly=yes \
            -o StrictHostKeyChecking=no \
            "${user}@${host}" \
            exit
          do
            [ "$attempts" -ge "$connection_attempts" ] && exit 1
            ((attempts++))
            printf "SSH connection attempt %d/%d failed. Retrying...\n" "$attempts" "$connection_attempts"
            ## sleep for Permission denied (publickey) errors
            sleep 10
          done
        shell: bash
  "set-expansions":
    - command: shell.exec
      params:
        <<: *go_options
        shell: bash
        script: |
          set -Eeou pipefail
          cat <<EOF > expansions.yaml
          home: $HOME
          tag: $(git tag --list 'atlascli/v*' --sort=-taggerdate | head -1)
          version: $(git tag --list 'atlascli/v*' --sort=-taggerdate | head -1 | cut -d 'v' -f 2)
          EOF
    - command: expansions.update
      params:
        ignore_missing_file: true
        file: src/github.com/mongodb/mongodb-atlas-cli/expansions.yaml
    - command: subprocess.exec
      params:
        <<: *go_options
        binary: rm
        args:
          - -f
          - expansions.yaml
  "otel":
    - command: subprocess.exec
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - go_proxy
          - workdir
          - project_id
          - project_identifier
          - otel_trace_id
          - otel_parent_id
          - otel_collector_endpoint
        env:
          <<: *go_env
          SPAN: ${span}
          ATTRS: ${attr}
        binary: make
        args:
          - otel
tasks:
  - name: compile
    tags: ["code_health"]
    commands:
      - func: "build"
  - name: config_e2e
    tags: ["e2e","required"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - command: shell.exec
        type: test
        params:
          <<: *go_options
          shell: bash
          script: |
            set -Eeou pipefail
            mkdir "$XDG_CONFIG_HOME/atlascli"
            cat <<EOF > "$XDG_CONFIG_HOME/atlascli/config.toml"
            [e2e]
              org_id = "5e429e7706822c6eac4d5971"
              public_api_key = "AAUMGJXA"
              service = "cloud"
            EOF
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,config
  - name: brew_e2e
    tags: ["e2e","required"]
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          E2E_TAGS: brew
  # If your e2e tests depend on a cluster running please consider setting it on its own task
  - name: atlas_generic_e2e
    tags: ["e2e","generic","atlas"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,generic
          IDENTITY_PROVIDER_ID: ${identity_provider_id}
  - name: atlas_gov_generic_e2e
    tags: ["e2e","generic","atlas"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: atlas,generic
          IDENTITY_PROVIDER_ID: ${identity_provider_id}
  # This is all about cluster which tends to be slow to get a healthy one
  - name: atlas_clusters_flags_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,clusters,flags
  - name: atlas_clusters_file_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,clusters,file
  - name: atlas_clusters_sharded_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,clusters,sharded
  - name: atlas_plugin_install
    tags: ["e2e","atlas","plugin","install"]
    must_have_test_results: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,plugin,install
  - name: atlas_plugin_run
    tags: ["e2e","atlas","plugin"]
    must_have_test_results: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,plugin,run
  - name: atlas_plugin_uninstall
    tags: ["e2e","atlas","plugin"]
    must_have_test_results: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,plugin,uninstall
  - name: atlas_plugin_update
    tags: ["e2e","atlas","plugin"]
    must_have_test_results: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,plugin,update
  - name: atlas_clusters_m0_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,clusters,m0
  - name: atlas_kubernetes_generate_e2e
    tags: ["e2e","atlas","kubernetes", "assigned_to_jira_team_cloudp_kubernetes_atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,cluster,kubernetes,generate
  - name: atlas_kubernetes_apply_e2e
    tags: [ "e2e","atlas","kubernetes", "assigned_to_jira_team_cloudp_kubernetes_atlas" ]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,cluster,kubernetes,apply
  - name: atlas_clusters_upgrade_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,clusters,upgrade
  - name: atlas_interactive_e2e
    tags: ["e2e","atlas", "interactive"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,interactive
  - name: atlas_serverless_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,serverless,instance
  - name: atlas_gov_clusters_flags_e2e
    tags: ["e2e","clusters","atlasgov"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: atlas,clusters,flags
  - name: atlas_gov_clusters_file_e2e
    tags: ["e2e","clusters","atlasgov"]
    must_have_test_results: true
    depends_on:
      - name: atlas_gov_clusters_flags_e2e
        variant: "e2e_atlas_gov_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: atlas,clusters,file
  - name: atlas_gov_clusters_sharded_e2e
    tags: ["e2e","clusters","atlasgov"]
    must_have_test_results: true
    depends_on:
      - name: atlas_gov_clusters_flags_e2e
        variant: "e2e_atlas_gov_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: atlas,clusters,sharded
  # LDAP Configuration depends on a cluster running
  - name: atlas_ldap_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,ldap
  # Logs depend on a cluster running to get logs from
  - name: atlas_logs_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,logs
  - name: atlas_gov_logs_e2e
    tags: ["e2e","clusters","atlasgov"]
    must_have_test_results: true
    depends_on:
      - name: atlas_gov_clusters_flags_e2e
        variant: "e2e_atlas_gov_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: atlas,logs
  # Metrics depend on a cluster running to get metrics from
  - name: atlas_metrics_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,metrics
  - name: atlas_gov_metrics_e2e
    tags: ["e2e","clusters","atlasgov"]
    must_have_test_results: true
    depends_on:
      - name: atlas_gov_clusters_flags_e2e
        variant: "e2e_atlas_gov_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: atlas,metrics
  # Processes depend on a cluster running
  - name: atlas_processes_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,processes
  - name: atlas_gov_processes_e2e
    tags: ["e2e","clusters","atlasgov"]
    must_have_test_results: true
    depends_on:
      - name: atlas_gov_clusters_flags_e2e
        variant: "e2e_atlas_gov_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: atlas,processes
  # Online archives depend on a cluster to create the archive against
  - name: atlas_online_archive_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,onlinearchive
  # Performance Advisor depend on a cluster
  - name: atlas_performance_advisor_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,performanceAdvisor
  - name: atlas_gov_performance_advisor_e2e
    tags: ["e2e","clusters","atlasgov"]
    must_have_test_results: true
    depends_on:
      - name: atlas_gov_clusters_flags_e2e
        variant: "e2e_atlas_gov_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: atlas,performanceAdvisor
  # Search depend on a cluster to create the indexes against
  - name: atlas_search_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,search
  - name: atlas_gov_search_e2e
    tags: ["e2e","clusters","atlasgov"]
    must_have_test_results: true
    depends_on:
      - name: atlas_gov_clusters_flags_e2e
        variant: "e2e_atlas_gov_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: atlas,search
  - name: atlas_search_nodes_e2e
    tags: ["e2e","clusters","atlas"]
    must_have_test_results: true
    depends_on:
      - name: atlas_clusters_flags_e2e
        variant: "e2e_atlas_clusters"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,search_nodes
  # Private endpoints can be flaky when multiple tests run concurrently so keeping this out of the PR suite
  - name: atlas_private_endpoint_e2e
    tags: ["e2e","networking","atlas"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,networking
  # datafederation requires cloud provider role authentication and an s3 bucket created
  - name: atlas_datafederation_db_e2e
    tags: ["e2e","datafederation","atlas"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,datafederation,db
          E2E_TEST_BUCKET: ${e2e_test_bucket}
          E2E_CLOUD_ROLE_ID: ${e2e_cloud_role_id}
  # datafederation requires cloud provider role authentication and an s3 bucket created
  - name: atlas_datafederation_privatenetwork_e2e
    tags: ["e2e","datafederation","atlas"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,datafederation,privatenetwork
          E2E_TEST_BUCKET: ${e2e_test_bucket}
          E2E_CLOUD_ROLE_ID: ${e2e_cloud_role_id}
  # datafederation requires cloud provider role authentication and an s3 bucket created
  - name: atlas_datafederation_querylimits_e2e
    tags: ["e2e","datafederation","atlas"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,datafederation,querylimits
          E2E_TEST_BUCKET: ${e2e_test_bucket}
          E2E_CLOUD_ROLE_ID: ${e2e_cloud_role_id}
  # IAM commands tests with an Atlas profile
  - name: atlas_iam_e2e
    tags: ["e2e","generic","atlas"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: iam,atlas
  - name: atlas_gov_iam_e2e
    tags: ["e2e","generic","atlas"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: iam
    # Live migration endpoints can be flaky when multiple tests run concurrently so keeping this out of the PR suite
  - name: atlas_live_migrations_link_token_e2e
    tags: ["e2e","atlas","livemigrations"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,livemigrations
  # Streams commands tests
  - name: atlas_streams
    tags: ["e2e","generic","atlas", "assigned_to_jira_team_cloudp_atlas_streams"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,streams
  - name: atlas_streams_with_cluster
    tags: [ "e2e","streams","atlas","assigned_to_jira_team_cloudp_atlas_streams"]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,streams_with_cluster
  - name: atlas_decrypt_e2e
    tags: [ "e2e","decrypt" ]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "build"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          GCP_CREDENTIALS: ${logs_decrypt_gcp_credentials}
          AWS_ACCESS_KEY: ${logs_decrypt_aws_access_key}
          AWS_SECRET_ACCESS_KEY: ${logs_decrypt_aws_secret_access_key}
          AZURE_TENANT_ID: ${logs_decrypt_azure_tenant_id}
          AZURE_CLIENT_ID: ${logs_decrypt_azure_client_id}
          AZURE_CLIENT_SECRET: ${logs_decrypt_azure_client_secret}
          E2E_TAGS: atlas,decrypt
  - name: atlas_backups_snapshots_e2e
    tags: [ "e2e","backup","atlas" ]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,backup,snapshot
          E2E_CLOUD_ROLE_ID: ${e2e_cloud_role_id}
          E2E_TEST_BUCKET: ${e2e_test_bucket}
  - name: atlas_backups_schedule_e2e
    tags: [ "e2e","backup","atlas" ]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,backup,schedule
          E2E_CLOUD_ROLE_ID: ${e2e_cloud_role_id}
          E2E_TEST_BUCKET: ${e2e_test_bucket}
  - name: atlas_backups_exports_buckets_e2e
    tags: [ "e2e","backup","atlas" ]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,backup,exports,buckets
          E2E_CLOUD_ROLE_ID: ${e2e_cloud_role_id}
          E2E_TEST_BUCKET: ${e2e_test_bucket}
  - name: atlas_backups_exports_jobs_e2e
    tags: [ "e2e","backup","atlas" ]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,backup,exports,jobs
          E2E_CLOUD_ROLE_ID: ${e2e_cloud_role_id}
          E2E_TEST_BUCKET: ${e2e_test_bucket}
  - name: atlas_backups_serverless_e2e
    tags: [ "e2e","backup","atlas" ]
    must_have_test_results: true
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,backup,serverless
          E2E_CLOUD_ROLE_ID: ${e2e_cloud_role_id}
          E2E_TEST_BUCKET: ${e2e_test_bucket}
          E2E_SERVERLESS_INSTANCE_NAME: ${e2e_serverless_instance_name}
  - name: atlas_backups_restores_e2e
    tags: [ "e2e","backup","atlas" ]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,backup,restores
          E2E_CLOUD_ROLE_ID: ${e2e_cloud_role_id}
          E2E_TEST_BUCKET: ${e2e_test_bucket}
          E2E_TIMEOUT: 3h
  - name: atlas_backups_compliancepolicy_e2e
    tags: [ "e2e","backup","atlas" ]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,backup,compliancepolicy
          E2E_CLOUD_ROLE_ID: ${e2e_cloud_role_id}
          E2E_TEST_BUCKET: ${e2e_test_bucket}
          E2E_TIMEOUT: 3h
  - name: atlas_cleanup_e2e
    tags: [ "e2e","cleanup", "foliage_check_task_only" ]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    stepback: false
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,cleanup
          E2E_PARALLEL: 16
          E2E_TIMEOUT: 3h
  - name: atlas_gov_cleanup_e2e
    tags: [ "e2e","cleanup", "foliage_check_task_only" ]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    stepback: false
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_gov_org_id}
          MCLI_PROJECT_ID: ${atlas_gov_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_gov_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_gov_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_cloud_gov_ops_manager_url}
          MCLI_SERVICE: cloudgov
          E2E_TAGS: atlas,cleanup
          E2E_TIMEOUT: 3h
          E2E_PARALLEL: 16
  - name: atlas_deployments_atlas_clusters_e2e
    tags: ["e2e","deployments","atlas"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    depends_on:
      - name: compile
        variant: "code_health"
        patch_optional: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,deployments,atlasclusters
          E2E_TIMEOUT: 3h
  - name: atlas_deployments_local_noauth_e2e
    tags: ["e2e","deployments","local","noauth"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "install gotestsum"
      - func: "install mongodb database tools"
      - func: "increase inotify limits"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,deployments,local,noauth
          E2E_TIMEOUT: 3h
          LOCALDEV_IMAGE: artifactory.corp.mongodb.com/dockerhub/mongodb/mongodb-atlas-local
  - name: atlas_deployments_local_nocli_e2e
    tags: ["e2e","deployments","local","nocli"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "install gotestsum"
      - func: "install mongodb database tools"
      - func: "increase inotify limits"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,deployments,local,nocli
          E2E_TIMEOUT: 3h
          LOCALDEV_IMAGE: artifactory.corp.mongodb.com/dockerhub/mongodb/mongodb-atlas-local
  - name: atlas_deployments_local_auth_e2e
    tags: ["e2e","deployments","local","auth","new"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "install gotestsum"
      - func: "install mongodb database tools"
      - func: "increase inotify limits"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,deployments,local,auth,new
          E2E_TIMEOUT: 3h
          LOCALDEV_IMAGE: artifactory.corp.mongodb.com/dockerhub/mongodb/mongodb-atlas-local
  - name: atlas_deployments_local_auth_deprecated_e2e
    tags: ["e2e","deployments","local","auth","deprecated"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "install gotestsum"
      - func: "install mongodb database tools"
      - func: "increase inotify limits"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,deployments,local,auth,deprecated
          E2E_TIMEOUT: 3h
          LOCALDEV_IMAGE: artifactory.corp.mongodb.com/dockerhub/mongodb/mongodb-atlas-local
  - name: build_win11_image
    tags: ["packer", "windows", "win11"]
    commands:
      - func: "install packer"
      - func: "run packer"
        vars:
          file: "windows-11-azure.pkr.hcl"
  - name: build_win10_image
    tags: ["packer", "windows", "win10"]
    commands:
      - func: "install packer"
      - func: "run packer"
        vars:
          file: "windows-10-azure.pkr.hcl"
  - name: atlas_deployments_windows_11
    tags: ["e2e","deployments","windows"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "terraform apply"
        vars:
          image: atlascli-win11-image
      - func: "ssh-ready"
        vars:
          host: ${public_ip_address}
          user: atlascli
          identity_file: ${home}/.ssh/id_rsa
      - func: "copy to remote"
        vars:
          local_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/win_test.ps1
          remote_dir: C:\\Users\\atlascli\\win_test.ps1
          user: atlascli
          host: ${public_ip_address}
          identity_file: ${home}/.ssh/id_rsa
      - func: "copy to remote"
        vars:
          local_dir: src/github.com/mongodb/mongodb-atlas-cli/vendor.tar.gz
          remote_dir: C:\\Users\\atlascli\\vendor.tar.gz
          user: atlascli
          host: ${public_ip_address}
          identity_file: ${home}/.ssh/id_rsa
      - func: "ssh"
        vars:
          host: ${public_ip_address}
          user: atlascli
          identity_file: ${home}/.ssh/id_rsa
          cmd: "powershell -NonInteractive -ExecutionPolicy Bypass -File C:\\Users\\atlascli\\win_test.ps1 -goproxy ${go_proxy} -revision ${github_commit}"
  - name: atlas_deployments_windows_10
    tags: ["e2e","deployments","windows"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "terraform apply"
        vars:
          image: atlascli-win10-image
      - func: "ssh-ready"
        vars:
          host: ${public_ip_address}
          user: atlascli
          identity_file: ${home}/.ssh/id_rsa
      - func: "copy to remote"
        vars:
          local_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/win_test.ps1
          remote_dir: C:\\Users\\atlascli\\win_test.ps1
          user: atlascli
          host: ${public_ip_address}
          identity_file: ${home}/.ssh/id_rsa
      - func: "copy to remote"
        vars:
          local_dir: src/github.com/mongodb/mongodb-atlas-cli/vendor.tar.gz
          remote_dir: C:\\Users\\atlascli\\vendor.tar.gz
          user: atlascli
          host: ${public_ip_address}
          identity_file: ${home}/.ssh/id_rsa
      - func: "ssh"
        vars:
          host: ${public_ip_address}
          user: atlascli
          identity_file: ${home}/.ssh/id_rsa
          cmd: "powershell -ExecutionPolicy Bypass -File C:\\Users\\atlascli\\win_test.ps1 -goproxy ${go_proxy} -revision ${github_commit}"
  - name: coverage
    tags: ["coverage"]
    depends_on:
      - name: ".e2e"
        variant: "* !.cron"
        status: '*'
    commands:
      - command: shell.exec
        params:
          <<: *go_options
          env:
            <<: *go_env
            AWS_ACCESS_KEY_ID: ${aws_key}
            AWS_SECRET_ACCESS_KEY: ${aws_secret}
          script: |
            aws s3 sync s3://mongodb-mongocli-build/${project}/dist/${revision}_${created_at}/atlascli/cov/ ./cov/
      - func: "merge cov"
      - func: "otel"
        vars:
          span: "coverage"
          attr: "total=${percentage},count=${count}"
  - name: snyk_monitor
    tags:
    - snyk
    commands:
      - command: shell.exec
        params:
          include_expansions_in_env:
            - workdir
          shell: bash
          script: |
            docker run \
              --rm \
              -e SNYK_TOKEN=${SNYK_TOKEN} \
              -e SNYK_CFG_ORG=${SNYK_ORG} \
              -v ${workdir}/src/github.com/mongodb/mongodb-atlas-cli:/app \
              snyk/snyk:golang snyk monitor
task_groups:
  - name: atlas_deployments_windows_group
    setup_task:
      - func: clone
      - func: "set-expansions"
      - func: "vendor deps"
      - func: "install terraform"
      - func: "install azure cli"
      - func: "login azure cli"
      - func: "terraform init"
    teardown_task:
      - func: "copy from remote"
        vars:
          local_dir: src/github.com/mongodb/mongodb-atlas-cli/e2e-tests.xml
          remote_dir: C:\\Users\\atlascli\\mongodb-atlas-cli\\e2e-tests.xml
          user: atlascli
          host: ${public_ip_address}
          identity_file: ${home}/.ssh/id_rsa
      - command: attach.xunit_results
        params:
          files: ["src/github.com/mongodb/mongodb-atlas-cli/*.xml"]
      - command: subprocess.exec
        params:
          <<: *go_options
          binary: rm
          args:
            - -rf
            - vendor.tar.gz
      - func: "terraform destroy"
    tasks:
      - .e2e .deployments .windows
buildvariants:
  - name: code_health
    display_name: "Code Health"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: .code_health
  - name: e2e_generic
    display_name: "E2E Tests Generic"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .generic"
  - name: e2e_required
    display_name: "E2E Tests Required"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .required"
  - name: e2e_interactive
    display_name: "E2E Interactive Commands"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .interactive"
  - name: e2e_atlas_clusters
    display_name: "E2E Atlas Cluster Tests"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .clusters .atlas"
  - name: e2e_atlas_kubernetes
    display_name: "E2E Atlas Kubernetes Tests"
    run_on:
      - ubuntu2204-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .atlas .kubernetes"
  - name: e2e_decryption
    display_name: "E2E Decryption Tests"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .decrypt"
  - name: e2e_atlas_gov_clusters
    display_name: "E2E Atlas Gov Cluster Tests"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .clusters .atlasgov"
  - name: e2e_atlas_networking
    display_name: "E2E Atlas Networking Tests"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .networking .atlas"
  - name: e2e_atlas_live_migrations
    display_name: "E2E Atlas Live Migrations Tests"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .livemigrations .atlas"
  - name: e2e_atlas_datafederation
    display_name: "E2E Atlas Data Federation Tests"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .datafederation .atlas"
  - name: e2e_atlas_backups
    display_name: "E2E Atlas Backup Tests"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .backup .atlas"
  - name: e2e_cleanup
    display_name: "E2E Cleanup Resources"
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    tags:
      - cleanup
      - cron
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .cleanup"
  - name: e2e_atlas_deployments
    display_name: "E2E Atlas Deployments Tests"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .deployments .atlas"
  - name: e2e_local_deployments_ubuntu22
    display_name: "E2E Local Deployments Tests (ubuntu 22.04/docker)"
    run_on:
      - ubuntu2204-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .deployments .local"
        depends_on:
        - name: compile
          variant: "code_health"
          patch_optional: true
  - name: e2e_local_deployments_ubuntu24
    display_name: "E2E Local Deployments Tests (ubuntu 24.04/docker)"
    run_on:
      - ubuntu2404-small
    tags:
      - localdev
      - cron
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .deployments .local"
  - name: e2e_local_deployments_debian11
    display_name: "E2E Local Deployments Tests (debian 11/docker)"
    run_on:
      - debian11-small
    tags:
      - localdev
      - cron
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .deployments .local"
  - name: e2e_local_deployments_debian12
    display_name: "E2E Local Deployments Tests (debian 12/docker)"
    run_on:
      - debian12-small
    tags:
      - localdev
      - cron
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .deployments .local"
  - name: e2e_local_deployments_al2023 
    display_name: "E2E Local Deployments Tests (amazon linux 2023/docker)"
    run_on:
      - amazon2023-latest-small
    tags:
      - localdev
      - cron
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .deployments .local"
  - name: e2e_local_deployments_windows
    display_name: "E2E Local Deployments Tests (windows/docker)"
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    tags:
      - localdev
      - cron
    run_on:
      - rhel90-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: "atlas_deployments_windows_group"
  - name: e2e_atlas_streams_with_clusters
    display_name: "E2E Atlas Streams with Clusters Tests"
    run_on:
      - ubuntu2204-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .atlas .streams"
  - name: e2e_plugin
    display_name: "E2E Plugin Tests"
    run_on:
      - rhel90-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .atlas .plugin"
  - name: e2e_local_deployments_rhel9
    display_name: "E2E Local Deployments Tests (rhel9/podman)"
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    tags:
      - localdev
      - cron
    run_on:
      - rhel90-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .deployments .local"
  - name: e2e_local_deployments_rhel8
    display_name: "E2E Local Deployments Tests (rhel8/podman)"
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    tags:
      - localdev
      - cron
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .deployments .local"
  - name: e2e_local_deployments_macos_14
    display_name: "E2E Local Deployments Tests (macos 14/docker)"
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    tags:
      - localdev
      - cron
    run_on:
      - macos-14-arm64-docker
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .deployments .local"
  - name: e2e_local_deployments_macos_13
    display_name: "E2E Local Deployments Tests (macos 13/docker)"
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    tags:
      - localdev
      - cron
    run_on:
      - macos-13-arm64-docker
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .deployments .local"
  - name: build_images
    display_name: "Build Windows Images"
    allowed_requesters: ["patch", "ad_hoc", "github_pr"]
    tags:
      - packer
      - cron
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".packer .windows"
  - name: coverage
    display_name: "Coverage"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".coverage"
  - name: ubuntu
    display_name: Snyk
    tags:
    - snyk
    - cron
    run_on:
    - ubuntu2204-large
    tasks:
      - name: ".snyk"
patch_aliases:
  - alias: "localdev"
    variant_tags: [".localdev .cron"]
    task: ".*"
  - alias: "packer"
    variant_tags: [".packer .cron"]
    task: ".*"
  - alias: "cleanup"
    variant_tags: [".cleanup .cron"]
    task: ".*"
  - alias: "snyk"
    variant_tags: [".snyk .cron"]
    task: ".*"
github_pr_aliases:
  - variant: "code_health"
    task_tags: ["code_health"]
  - variant: "e2e_generic"
    task_tags: ["e2e", "generic"]
  - variant: "e2e_required"
    task_tags: ["e2e", "required"]
git_tag_aliases:
  - git_tag: "atlascli/v*"
    variant: "^release_atlascli"
    task: ".*"
github_checks_aliases:
 - variant: ".*"
   task: ".*"
