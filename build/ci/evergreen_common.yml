# Copyright 2024 MongoDB Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


variables:
  - &go_env
      XDG_CONFIG_HOME: ${go_base_path}${workdir}
      GO111MODULE: "on"
      GOROOT: ${go_root}
      GOPATH: ${go_base_path}${workdir}
      ADD_PATH: "${go_bin}:${go_base_path}${workdir}/bin:${go_base_path}${workdir}/src/github.com/mongodb/mongodb-atlas-cli/bin"
      GOPROXY: ${go_proxy}
  - &go_options
    add_to_path:
      - ${go_bin}
      - ${go_base_path}${workdir}/bin
      - ${go_base_path}${workdir}/src/github.com/mongodb/mongodb-atlas-cli/bin
    include_expansions_in_env:
      - go_base_path
      - go_proxy
      - workdir
    working_dir: src/github.com/mongodb/mongodb-atlas-cli
    env:
      <<: *go_env
functions:
  "clone":
    - command: git.get_project
      type: setup
      params:
        directory: src/github.com/mongodb/mongodb-atlas-cli
  "build":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        command: make build
  "install mongodb database tools":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        shell: bash
        env:
          <<: *go_env
          MONGODB_DATABASE_TOOLS_VERSION: 100.10.0
        script: |
          set -Eeou pipefail
          if [[ "$(uname -s)" == "Darwin"* ]]; then
            curl -sLo mongodb-database-tools.zip "https://fastdl.mongodb.org/tools/db/mongodb-database-tools-macos-arm64-$MONGODB_DATABASE_TOOLS_VERSION.zip"
            unzip mongodb-database-tools.zip
            mv mongodb-database-tools-*/bin/* .
            rm -rf mongodb-database-tools-* mongodb-database-tools.zip
          else
            mkdir -p mongodb-database-tools
            curl -sfL "https://fastdl.mongodb.org/tools/db/mongodb-database-tools-rhel70-x86_64-$MONGODB_DATABASE_TOOLS_VERSION.tgz" | tar zx -C mongodb-database-tools --strip-components 1
            mv mongodb-database-tools/bin/* .
            rm -rf mongodb-database-tools
          fi
  "install terraform":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        shell: bash
        env:
          <<: *go_env
          TERRAFORM_VERSION: 1.9.4
        script: |
          set -Eeou pipefail
          curl -sLo terraform.zip "https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_$(echo $TERRAFORM_VERSION)_linux_amd64.zip"
          unzip terraform.zip
          rm terraform.zip LICENSE.txt
  "terraform init":
    - command: subprocess.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform
        binary: terraform
        args:
          - init
  "copy to remote":
    - command: subprocess.exec
      params:
        binary: scp
        args:
          - -o
          - StrictHostKeyChecking=no
          - -i "${identity_file}"
          - -r
          - "${local_dir}"
          - "${user}@${host}:${remote_dir}"
  "copy from remote":
    - command: subprocess.exec
      params:
        binary: scp
        args:
          - -o
          - StrictHostKeyChecking=no
          - -i "${identity_file}"
          - -r
          - "${user}@${host}:${remote_dir}"
          - "${local_dir}"
  "ssh":
    - command: subprocess.exec
      params:
        binary: ssh
        args:
          - -o
          - StrictHostKeyChecking=no
          - -i "${identity_file}"
          - "${user}@${host}"
          - ${cmd}
  "terraform apply":
    - command: subprocess.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform
        binary: terraform
        args:
          - apply
          - -auto-approve
          - -var
          - "image_id=/subscriptions/${azure_subscription_id}/resourceGroups/atlascli-image-resources/providers/Microsoft.Compute/images/${image}"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform/terraform.tfstate
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/${task_type}/
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/octet-stream}
        display_name: internal-bucket
    - command: shell.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform
        shell: bash
        script: |
          set -Eeou pipefail
          echo "public_ip_address: $(terraform output -json | jq -r '.public_ip_address.value')" > expansions.yaml
    - command: expansions.update
      params:
        ignore_missing_file: true
        file: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform/expansions.yaml
    - command: subprocess.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform
        binary: rm
        args:
          - -f
          - expansions.yaml
  "terraform destroy":
    - command: subprocess.exec
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform
        binary: terraform
        args:
          - apply
          - -destroy
          - -auto-approve
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongodb-atlas-cli/build/ci/terraform/terraform.tfstate
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/${task_type}/
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/octet-stream}
        display_name: internal-bucket
  "e2e test":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - MCLI_ORG_ID
          - MCLI_PROJECT_ID
          - MCLI_PRIVATE_API_KEY
          - MCLI_PUBLIC_API_KEY
          - MCLI_SERVICE
          - TEST_CMD
          - E2E_TAGS
          - E2E_TEST_BUCKET
          - E2E_CLOUD_ROLE_ID
          - MCLI_OPS_MANAGER_URL
          - OM_VERSION
          - LOCAL_KEY
          - KMIP_CA
          - KMIP_CERT
          - GCP_CREDENTIALS
          - AWS_ACCESS_KEY
          - AWS_SECRET_ACCESS_KEY
          - AZURE_TENANT_ID
          - AZURE_CLIENT_ID
          - AZURE_CLIENT_SECRET
          - E2E_TIMEOUT
          - E2E_SERVERLESS_INSTANCE_NAME
          - E2E_PARALLEL
          - IDENTITY_PROVIDER_ID
          - revision
        env:
          <<: *go_env
          MCLI_SKIP_UPDATE_CHECK: "yes"
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --format standard-verbose --
        command: make e2e-test
  "install gotestsum":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        shell: bash
        script: |
          set -Eeou pipefail
          export PATH="$ADD_PATH:$PATH"
          if [[ "$(uname -s)" == "Darwin"* ]]; then
            URL=https://github.com/gotestyourself/gotestsum/releases/download/v${gotestsum_ver}/gotestsum_${gotestsum_ver}_darwin_arm64.tar.gz
          else
            URL=https://github.com/gotestyourself/gotestsum/releases/download/v${gotestsum_ver}/gotestsum_${gotestsum_ver}_linux_amd64.tar.gz
          fi
          curl -sfL $URL | tar zx
  "generate evergreen":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - task_type
        binary: build/ci/evergreen-generate-tasks.sh
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongodb-atlas-cli/tasks.json
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/${task_type}/
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/json}
        display_name: internal-bucket
    - command: generate.tasks
      params:
        files:
          - tasks.json
  "increase inotify limits":
    - command: shell.exec
      params:
        shell: bash
        script: |
          set -e
          if [[ "$(uname -s)" == "Darwin"* ]]; then
            echo "No need to increase inotify limits on macOS"
          else
            cat /proc/sys/fs/inotify/max_user_watches
            cat /proc/sys/fs/inotify/max_user_instances
            echo 1024 | sudo tee /proc/sys/fs/inotify/max_user_instances
            cat /proc/sys/fs/inotify/max_user_instances
          fi
  "install azure cli":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        shell: bash
        script: |
          set -e
          sudo dnf clean all
          sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
          sudo dnf install -y https://packages.microsoft.com/config/rhel/9.0/packages-microsoft-prod.rpm
          sudo dnf install -y azure-cli
          az --version
  "login azure cli":
    - command: subprocess.exec
      type: setup
      params:
        <<: *go_options
        binary: az
        args:
          - login
          - --service-principal
          - -u
          - ${azure_app_id}
          - -p
          - ${azure_password}
          - --tenant
          - ${azure_tenant}
  "ssh-ready":
    - command: shell.exec
      params:
        exec_as_string: true
        script: |
          attempts=0
          connection_attempts=${connection_attempts|25}

          ## Check for remote connectivity
          while ! ssh \
            -i "${identity_file}" \
            -o ConnectTimeout=10 \
            -o ForwardAgent=yes \
            -o IdentitiesOnly=yes \
            -o StrictHostKeyChecking=no \
            "${user}@${host}" \
            exit
          do
            [ "$attempts" -ge "$connection_attempts" ] && exit 1
            ((attempts++))
            printf "SSH connection attempt %d/%d failed. Retrying...\n" "$attempts" "$connection_attempts"
            ## sleep for Permission denied (publickey) errors
            sleep 10
          done
        shell: bash
tasks:
  - name: atlas_deployments_windows_11
    tags: ["e2e","deployments","windows"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "terraform apply"
        vars:
          image: atlascli-win11-image
      - func: "ssh-ready"
        vars:
          host: ${public_ip_address}
          user: atlascli
          identity_file: ~/.ssh/id_rsa
      - func: "copy to remote"
        vars:
          local_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/win_test.ps1
          remote_dir: C:\\Users\\atlascli\\win_test.ps1
          user: atlascli
          host: ${public_ip_address}
          identity_file: ~/.ssh/id_rsa
      - func: "ssh"
        vars:
          host: ${public_ip_address}
          user: atlascli
          identity_file: ~/.ssh/id_rsa
          cmd: "powershell -ExecutionPolicy Bypass -File C:\\Users\\atlascli\\win_test.ps1"
      - func: "copy from remote"
        vars:
          local_dir: src/github.com/mongodb/mongodb-atlas-cli/e2e-tests.xml
          remote_dir: C:\\Users\\atlascli\\mongodb-atlas-cli\\e2e-tests.xml
          user: atlascli
          host: ${public_ip_address}
          identity_file: ~/.ssh/id_rsa
  - name: atlas_deployments_windows_10
    tags: ["e2e","deployments","windows"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "terraform apply"
        vars:
          image: atlascli-win10-image
      - func: "ssh-ready"
        vars:
          host: ${public_ip_address}
          user: atlascli
          identity_file: ~/.ssh/id_rsa
      - func: "copy to remote"
        vars:
          local_dir: src/github.com/mongodb/mongodb-atlas-cli/build/ci/win_test.ps1
          remote_dir: C:\\Users\\atlascli\\win_test.ps1
          user: atlascli
          host: ${public_ip_address}
          identity_file: ~/.ssh/id_rsa
      - func: "ssh"
        vars:
          host: ${public_ip_address}
          user: atlascli
          identity_file: ~/.ssh/id_rsa
          cmd: "powershell -ExecutionPolicy Bypass -File C:\\Users\\atlascli\\win_test.ps1"
      - func: "copy from remote"
        vars:
          local_dir: src/github.com/mongodb/mongodb-atlas-cli/e2e-tests.xml
          remote_dir: C:\\Users\\atlascli\\mongodb-atlas-cli\\e2e-tests.xml
          user: atlascli
          host: ${public_ip_address}
          identity_file: ~/.ssh/id_rsa
  - name: atlas_deployments_local_noauth_e2e
    tags: ["e2e","deployments","local","noauth"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "install gotestsum"
      - func: "install mongodb database tools"
      - func: "increase inotify limits"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,deployments,local,noauth
          E2E_TIMEOUT: 3h
  - name: atlas_deployments_local_auth_e2e
    tags: ["e2e","deployments","local","auth"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "install gotestsum"
      - func: "install mongodb database tools"
      - func: "increase inotify limits"
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,deployments,local,auth
          E2E_TIMEOUT: 3h

task_groups:
  - name: atlas_deployments_windows_group
    setup_task:
      - func: clone
      - func: "install terraform"
      - func: "install azure cli"
      - func: "login azure cli"
      - func: "terraform init"
    teardown_task:
      - func: "terraform destroy"
    tasks:
      - .e2e .deployments .windows
