# Copyright 2024 MongoDB Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


variables:
  - &go_env
      XDG_CONFIG_HOME: ${go_base_path}${workdir}
      GO111MODULE: "on"
      GOROOT: ${go_root}
      GOPATH: ${go_base_path}${workdir}
      ADD_PATH: "${go_bin}:${go_base_path}${workdir}/bin:${go_base_path}${workdir}/src/github.com/mongodb/mongodb-atlas-cli/bin"
      GOPROXY: ${go_proxy}
  - &go_options
    add_to_path:
      - ${go_bin}
      - ${go_base_path}${workdir}/bin
      - ${go_base_path}${workdir}/src/github.com/mongodb/mongodb-atlas-cli/bin
    include_expansions_in_env:
      - go_base_path
      - go_proxy
      - workdir
    working_dir: src/github.com/mongodb/mongodb-atlas-cli
    env:
      <<: *go_env
functions:
  "clone":
    - command: git.get_project
      type: setup
      params:
        directory: src/github.com/mongodb/mongodb-atlas-cli
  "build":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        command: make build
  "install mongodb database tools":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        shell: bash
        script: |
          set -Eeou pipefail
          mkdir -p mongodb-database-tools
          curl -sfL https://fastdl.mongodb.org/tools/db/mongodb-database-tools-rhel70-x86_64-100.10.0.tgz | tar zx -C mongodb-database-tools --strip-components 1
          mv mongodb-database-tools/bin/* .
          rm -rf mongodb-database-tools
  "e2e test":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - MCLI_ORG_ID
          - MCLI_PROJECT_ID
          - MCLI_PRIVATE_API_KEY
          - MCLI_PUBLIC_API_KEY
          - MCLI_SERVICE
          - TEST_CMD
          - E2E_TAGS
          - E2E_TEST_BUCKET
          - E2E_CLOUD_ROLE_ID
          - MCLI_OPS_MANAGER_URL
          - OM_VERSION
          - LOCAL_KEY
          - KMIP_CA
          - KMIP_CERT
          - GCP_CREDENTIALS
          - AWS_ACCESS_KEY
          - AWS_SECRET_ACCESS_KEY
          - AZURE_TENANT_ID
          - AZURE_CLIENT_ID
          - AZURE_CLIENT_SECRET
          - E2E_TIMEOUT
          - E2E_SERVERLESS_INSTANCE_NAME
          - E2E_PARALLEL
          - IDENTITY_PROVIDER_ID
          - revision
        env:
          <<: *go_env
          MCLI_SKIP_UPDATE_CHECK: "yes"
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --format standard-verbose --
        command: make e2e-test
  "install gotestsum":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/mongodb-atlas-cli/bin
        shell: bash
        script: |
          set -Eeou pipefail
          export PATH="$ADD_PATH:$PATH"
          curl -sfL https://github.com/gotestyourself/gotestsum/releases/download/v${gotestsum_ver}/gotestsum_${gotestsum_ver}_linux_amd64.tar.gz | tar zx
  "generate evergreen":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - task_type
        binary: build/ci/evergreen-generate-tasks.sh
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongodb-atlas-cli/tasks.json
        remote_file: ${project}/dist/${revision}_${created_at}/atlascli/${task_type}/
        bucket: mongodb-mongocli-build
        permissions: public-read
        content_type: ${content_type|application/json}
        display_name: internal-bucket
    - command: generate.tasks
      params:
        files:
          - tasks.json
tasks:
  - name: atlas_deployments_local_noauth_e2e
    tags: ["e2e","deployments","local","noauth"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "install gotestsum"
      - func: "install mongodb database tools"
      - command: shell.exec
        type: setup
        params:
          shell: bash
          script: |
            set -e
            cat /proc/sys/fs/inotify/max_user_watches
            cat /proc/sys/fs/inotify/max_user_instances
            echo 1024 | sudo tee /proc/sys/fs/inotify/max_user_instances
            cat /proc/sys/fs/inotify/max_user_instances
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,deployments,local,noauth
          E2E_TIMEOUT: 3h
  - name: atlas_deployments_local_auth_e2e
    tags: ["e2e","deployments","local","auth"]
    must_have_test_results: true
    exec_timeout_secs: 11400 # 3 hours 10 minutes
    commands:
      - func: "install gotestsum"
      - func: "install mongodb database tools"
      - command: shell.exec
        type: setup
        params:
          shell: bash
          script: |
            set -e
            cat /proc/sys/fs/inotify/max_user_watches
            cat /proc/sys/fs/inotify/max_user_instances
            echo 1024 | sudo tee /proc/sys/fs/inotify/max_user_instances
            cat /proc/sys/fs/inotify/max_user_instances
      - func: "e2e test"
        timeout_secs: 11400 # 3 hours 10 minutes
        vars:
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PROJECT_ID: ${atlas_project_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          E2E_TAGS: atlas,deployments,local,auth
          E2E_TIMEOUT: 3h
