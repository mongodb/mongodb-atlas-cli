// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/api (interfaces: CommandExecutor,HTTPClient,AccessTokenProvider,ConfigProvider,CommandConverter,Logger,ResponseFormatter)

// Package api is a generated GoMock package.
package api

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandExecutor is a mock of CommandExecutor interface.
type MockCommandExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCommandExecutorMockRecorder
}

// MockCommandExecutorMockRecorder is the mock recorder for MockCommandExecutor.
type MockCommandExecutorMockRecorder struct {
	mock *MockCommandExecutor
}

// NewMockCommandExecutor creates a new mock instance.
func NewMockCommandExecutor(ctrl *gomock.Controller) *MockCommandExecutor {
	mock := &MockCommandExecutor{ctrl: ctrl}
	mock.recorder = &MockCommandExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandExecutor) EXPECT() *MockCommandExecutorMockRecorder {
	return m.recorder
}

// ExecuteCommand mocks base method.
func (m *MockCommandExecutor) ExecuteCommand(arg0 context.Context, arg1 CommandRequest) (*CommandResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCommand", arg0, arg1)
	ret0, _ := ret[0].(*CommandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCommand indicates an expected call of ExecuteCommand.
func (mr *MockCommandExecutorMockRecorder) ExecuteCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockCommandExecutor)(nil).ExecuteCommand), arg0, arg1)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), arg0)
}

// MockAccessTokenProvider is a mock of AccessTokenProvider interface.
type MockAccessTokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokenProviderMockRecorder
}

// MockAccessTokenProviderMockRecorder is the mock recorder for MockAccessTokenProvider.
type MockAccessTokenProviderMockRecorder struct {
	mock *MockAccessTokenProvider
}

// NewMockAccessTokenProvider creates a new mock instance.
func NewMockAccessTokenProvider(ctrl *gomock.Controller) *MockAccessTokenProvider {
	mock := &MockAccessTokenProvider{ctrl: ctrl}
	mock.recorder = &MockAccessTokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessTokenProvider) EXPECT() *MockAccessTokenProviderMockRecorder {
	return m.recorder
}

// GetAccessToken mocks base method.
func (m *MockAccessTokenProvider) GetAccessToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockAccessTokenProviderMockRecorder) GetAccessToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockAccessTokenProvider)(nil).GetAccessToken))
}

// MockConfigProvider is a mock of ConfigProvider interface.
type MockConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderMockRecorder
}

// MockConfigProviderMockRecorder is the mock recorder for MockConfigProvider.
type MockConfigProviderMockRecorder struct {
	mock *MockConfigProvider
}

// NewMockConfigProvider creates a new mock instance.
func NewMockConfigProvider(ctrl *gomock.Controller) *MockConfigProvider {
	mock := &MockConfigProvider{ctrl: ctrl}
	mock.recorder = &MockConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProvider) EXPECT() *MockConfigProviderMockRecorder {
	return m.recorder
}

// GetBaseURL mocks base method.
func (m *MockConfigProvider) GetBaseURL() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockConfigProviderMockRecorder) GetBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockConfigProvider)(nil).GetBaseURL))
}

// MockCommandConverter is a mock of CommandConverter interface.
type MockCommandConverter struct {
	ctrl     *gomock.Controller
	recorder *MockCommandConverterMockRecorder
}

// MockCommandConverterMockRecorder is the mock recorder for MockCommandConverter.
type MockCommandConverterMockRecorder struct {
	mock *MockCommandConverter
}

// NewMockCommandConverter creates a new mock instance.
func NewMockCommandConverter(ctrl *gomock.Controller) *MockCommandConverter {
	mock := &MockCommandConverter{ctrl: ctrl}
	mock.recorder = &MockCommandConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandConverter) EXPECT() *MockCommandConverterMockRecorder {
	return m.recorder
}

// ConvertToHTTPRequest mocks base method.
func (m *MockCommandConverter) ConvertToHTTPRequest(arg0 CommandRequest) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToHTTPRequest", arg0)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToHTTPRequest indicates an expected call of ConvertToHTTPRequest.
func (mr *MockCommandConverterMockRecorder) ConvertToHTTPRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToHTTPRequest", reflect.TypeOf((*MockCommandConverter)(nil).ConvertToHTTPRequest), arg0)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(arg0 string, arg1 ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Debugf", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// IsDebugLevel mocks base method.
func (m *MockLogger) IsDebugLevel() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDebugLevel")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDebugLevel indicates an expected call of IsDebugLevel.
func (mr *MockLoggerMockRecorder) IsDebugLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDebugLevel", reflect.TypeOf((*MockLogger)(nil).IsDebugLevel))
}

// MockResponseFormatter is a mock of ResponseFormatter interface.
type MockResponseFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseFormatterMockRecorder
}

// MockResponseFormatterMockRecorder is the mock recorder for MockResponseFormatter.
type MockResponseFormatterMockRecorder struct {
	mock *MockResponseFormatter
}

// NewMockResponseFormatter creates a new mock instance.
func NewMockResponseFormatter(ctrl *gomock.Controller) *MockResponseFormatter {
	mock := &MockResponseFormatter{ctrl: ctrl}
	mock.recorder = &MockResponseFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseFormatter) EXPECT() *MockResponseFormatterMockRecorder {
	return m.recorder
}

// ContentType mocks base method.
func (m *MockResponseFormatter) ContentType(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentType", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContentType indicates an expected call of ContentType.
func (mr *MockResponseFormatterMockRecorder) ContentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockResponseFormatter)(nil).ContentType), arg0)
}

// Format mocks base method.
func (m *MockResponseFormatter) Format(arg0 string, arg1 io.ReadCloser) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Format indicates an expected call of Format.
func (mr *MockResponseFormatterMockRecorder) Format(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockResponseFormatter)(nil).Format), arg0, arg1)
}
