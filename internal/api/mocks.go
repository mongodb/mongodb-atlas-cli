// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/api (interfaces: CommandExecutor,Doer,ConfigProvider,CommandConverter,Logger,ResponseFormatter)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go -package=api github.com/mongodb/mongodb-atlas-cli/atlascli/internal/api CommandExecutor,Doer,ConfigProvider,CommandConverter,Logger,ResponseFormatter
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommandExecutor is a mock of CommandExecutor interface.
type MockCommandExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockCommandExecutorMockRecorder
	isgomock struct{}
}

// MockCommandExecutorMockRecorder is the mock recorder for MockCommandExecutor.
type MockCommandExecutorMockRecorder struct {
	mock *MockCommandExecutor
}

// NewMockCommandExecutor creates a new mock instance.
func NewMockCommandExecutor(ctrl *gomock.Controller) *MockCommandExecutor {
	mock := &MockCommandExecutor{ctrl: ctrl}
	mock.recorder = &MockCommandExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandExecutor) EXPECT() *MockCommandExecutorMockRecorder {
	return m.recorder
}

// ExecuteCommand mocks base method.
func (m *MockCommandExecutor) ExecuteCommand(ctx context.Context, commandRequest CommandRequest) (*CommandResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteCommand", ctx, commandRequest)
	ret0, _ := ret[0].(*CommandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteCommand indicates an expected call of ExecuteCommand.
func (mr *MockCommandExecutorMockRecorder) ExecuteCommand(ctx, commandRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteCommand", reflect.TypeOf((*MockCommandExecutor)(nil).ExecuteCommand), ctx, commandRequest)
}

// MockDoer is a mock of Doer interface.
type MockDoer struct {
	ctrl     *gomock.Controller
	recorder *MockDoerMockRecorder
	isgomock struct{}
}

// MockDoerMockRecorder is the mock recorder for MockDoer.
type MockDoerMockRecorder struct {
	mock *MockDoer
}

// NewMockDoer creates a new mock instance.
func NewMockDoer(ctrl *gomock.Controller) *MockDoer {
	mock := &MockDoer{ctrl: ctrl}
	mock.recorder = &MockDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDoer) EXPECT() *MockDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDoer)(nil).Do), req)
}

// MockConfigProvider is a mock of ConfigProvider interface.
type MockConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderMockRecorder
	isgomock struct{}
}

// MockConfigProviderMockRecorder is the mock recorder for MockConfigProvider.
type MockConfigProviderMockRecorder struct {
	mock *MockConfigProvider
}

// NewMockConfigProvider creates a new mock instance.
func NewMockConfigProvider(ctrl *gomock.Controller) *MockConfigProvider {
	mock := &MockConfigProvider{ctrl: ctrl}
	mock.recorder = &MockConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProvider) EXPECT() *MockConfigProviderMockRecorder {
	return m.recorder
}

// GetBaseURL mocks base method.
func (m *MockConfigProvider) GetBaseURL() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockConfigProviderMockRecorder) GetBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockConfigProvider)(nil).GetBaseURL))
}

// MockCommandConverter is a mock of CommandConverter interface.
type MockCommandConverter struct {
	ctrl     *gomock.Controller
	recorder *MockCommandConverterMockRecorder
	isgomock struct{}
}

// MockCommandConverterMockRecorder is the mock recorder for MockCommandConverter.
type MockCommandConverterMockRecorder struct {
	mock *MockCommandConverter
}

// NewMockCommandConverter creates a new mock instance.
func NewMockCommandConverter(ctrl *gomock.Controller) *MockCommandConverter {
	mock := &MockCommandConverter{ctrl: ctrl}
	mock.recorder = &MockCommandConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandConverter) EXPECT() *MockCommandConverterMockRecorder {
	return m.recorder
}

// ConvertToHTTPRequest mocks base method.
func (m *MockCommandConverter) ConvertToHTTPRequest(request CommandRequest) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToHTTPRequest", request)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToHTTPRequest indicates an expected call of ConvertToHTTPRequest.
func (mr *MockCommandConverterMockRecorder) ConvertToHTTPRequest(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToHTTPRequest", reflect.TypeOf((*MockCommandConverter)(nil).ConvertToHTTPRequest), request)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(format string, a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Debugf", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// IsDebugLevel mocks base method.
func (m *MockLogger) IsDebugLevel() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDebugLevel")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDebugLevel indicates an expected call of IsDebugLevel.
func (mr *MockLoggerMockRecorder) IsDebugLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDebugLevel", reflect.TypeOf((*MockLogger)(nil).IsDebugLevel))
}

// MockResponseFormatter is a mock of ResponseFormatter interface.
type MockResponseFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseFormatterMockRecorder
	isgomock struct{}
}

// MockResponseFormatterMockRecorder is the mock recorder for MockResponseFormatter.
type MockResponseFormatterMockRecorder struct {
	mock *MockResponseFormatter
}

// NewMockResponseFormatter creates a new mock instance.
func NewMockResponseFormatter(ctrl *gomock.Controller) *MockResponseFormatter {
	mock := &MockResponseFormatter{ctrl: ctrl}
	mock.recorder = &MockResponseFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseFormatter) EXPECT() *MockResponseFormatterMockRecorder {
	return m.recorder
}

// ContentType mocks base method.
func (m *MockResponseFormatter) ContentType(format string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentType", format)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContentType indicates an expected call of ContentType.
func (mr *MockResponseFormatterMockRecorder) ContentType(format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockResponseFormatter)(nil).ContentType), format)
}

// Format mocks base method.
func (m *MockResponseFormatter) Format(format string, readerCloser io.ReadCloser) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", format, readerCloser)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Format indicates an expected call of Format.
func (mr *MockResponseFormatterMockRecorder) Format(format, readerCloser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockResponseFormatter)(nil).Format), format, readerCloser)
}
