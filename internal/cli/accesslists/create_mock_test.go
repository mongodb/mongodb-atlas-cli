// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/accesslists (interfaces: ProjectIPAccessListCreator)
//
// Generated by this command:
//
//	mockgen -typed -destination=create_mock_test.go -package=accesslists . ProjectIPAccessListCreator
//

// Package accesslists is a generated GoMock package.
package accesslists

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectIPAccessListCreator is a mock of ProjectIPAccessListCreator interface.
type MockProjectIPAccessListCreator struct {
	ctrl     *gomock.Controller
	recorder *MockProjectIPAccessListCreatorMockRecorder
	isgomock struct{}
}

// MockProjectIPAccessListCreatorMockRecorder is the mock recorder for MockProjectIPAccessListCreator.
type MockProjectIPAccessListCreatorMockRecorder struct {
	mock *MockProjectIPAccessListCreator
}

// NewMockProjectIPAccessListCreator creates a new mock instance.
func NewMockProjectIPAccessListCreator(ctrl *gomock.Controller) *MockProjectIPAccessListCreator {
	mock := &MockProjectIPAccessListCreator{ctrl: ctrl}
	mock.recorder = &MockProjectIPAccessListCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectIPAccessListCreator) EXPECT() *MockProjectIPAccessListCreatorMockRecorder {
	return m.recorder
}

// CreateProjectIPAccessList mocks base method.
func (m *MockProjectIPAccessListCreator) CreateProjectIPAccessList(arg0 []*admin.NetworkPermissionEntry) (*admin.PaginatedNetworkAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectIPAccessList", arg0)
	ret0, _ := ret[0].(*admin.PaginatedNetworkAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectIPAccessList indicates an expected call of CreateProjectIPAccessList.
func (mr *MockProjectIPAccessListCreatorMockRecorder) CreateProjectIPAccessList(arg0 any) *MockProjectIPAccessListCreatorCreateProjectIPAccessListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectIPAccessList", reflect.TypeOf((*MockProjectIPAccessListCreator)(nil).CreateProjectIPAccessList), arg0)
	return &MockProjectIPAccessListCreatorCreateProjectIPAccessListCall{Call: call}
}

// MockProjectIPAccessListCreatorCreateProjectIPAccessListCall wrap *gomock.Call
type MockProjectIPAccessListCreatorCreateProjectIPAccessListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPAccessListCreatorCreateProjectIPAccessListCall) Return(arg0 *admin.PaginatedNetworkAccess, arg1 error) *MockProjectIPAccessListCreatorCreateProjectIPAccessListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPAccessListCreatorCreateProjectIPAccessListCall) Do(f func([]*admin.NetworkPermissionEntry) (*admin.PaginatedNetworkAccess, error)) *MockProjectIPAccessListCreatorCreateProjectIPAccessListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPAccessListCreatorCreateProjectIPAccessListCall) DoAndReturn(f func([]*admin.NetworkPermissionEntry) (*admin.PaginatedNetworkAccess, error)) *MockProjectIPAccessListCreatorCreateProjectIPAccessListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
