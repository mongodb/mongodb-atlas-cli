// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/accesslists (interfaces: ProjectIPAccessListDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=accesslists . ProjectIPAccessListDescriber
//

// Package accesslists is a generated GoMock package.
package accesslists

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectIPAccessListDescriber is a mock of ProjectIPAccessListDescriber interface.
type MockProjectIPAccessListDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockProjectIPAccessListDescriberMockRecorder
	isgomock struct{}
}

// MockProjectIPAccessListDescriberMockRecorder is the mock recorder for MockProjectIPAccessListDescriber.
type MockProjectIPAccessListDescriberMockRecorder struct {
	mock *MockProjectIPAccessListDescriber
}

// NewMockProjectIPAccessListDescriber creates a new mock instance.
func NewMockProjectIPAccessListDescriber(ctrl *gomock.Controller) *MockProjectIPAccessListDescriber {
	mock := &MockProjectIPAccessListDescriber{ctrl: ctrl}
	mock.recorder = &MockProjectIPAccessListDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectIPAccessListDescriber) EXPECT() *MockProjectIPAccessListDescriberMockRecorder {
	return m.recorder
}

// IPAccessList mocks base method.
func (m *MockProjectIPAccessListDescriber) IPAccessList(arg0, arg1 string) (*admin.NetworkPermissionEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPAccessList", arg0, arg1)
	ret0, _ := ret[0].(*admin.NetworkPermissionEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IPAccessList indicates an expected call of IPAccessList.
func (mr *MockProjectIPAccessListDescriberMockRecorder) IPAccessList(arg0, arg1 any) *MockProjectIPAccessListDescriberIPAccessListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPAccessList", reflect.TypeOf((*MockProjectIPAccessListDescriber)(nil).IPAccessList), arg0, arg1)
	return &MockProjectIPAccessListDescriberIPAccessListCall{Call: call}
}

// MockProjectIPAccessListDescriberIPAccessListCall wrap *gomock.Call
type MockProjectIPAccessListDescriberIPAccessListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPAccessListDescriberIPAccessListCall) Return(arg0 *admin.NetworkPermissionEntry, arg1 error) *MockProjectIPAccessListDescriberIPAccessListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPAccessListDescriberIPAccessListCall) Do(f func(string, string) (*admin.NetworkPermissionEntry, error)) *MockProjectIPAccessListDescriberIPAccessListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPAccessListDescriberIPAccessListCall) DoAndReturn(f func(string, string) (*admin.NetworkPermissionEntry, error)) *MockProjectIPAccessListDescriberIPAccessListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
