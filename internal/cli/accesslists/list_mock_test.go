// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/accesslists (interfaces: ProjectIPAccessListLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=accesslists . ProjectIPAccessListLister
//

// Package accesslists is a generated GoMock package.
package accesslists

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectIPAccessListLister is a mock of ProjectIPAccessListLister interface.
type MockProjectIPAccessListLister struct {
	ctrl     *gomock.Controller
	recorder *MockProjectIPAccessListListerMockRecorder
	isgomock struct{}
}

// MockProjectIPAccessListListerMockRecorder is the mock recorder for MockProjectIPAccessListLister.
type MockProjectIPAccessListListerMockRecorder struct {
	mock *MockProjectIPAccessListLister
}

// NewMockProjectIPAccessListLister creates a new mock instance.
func NewMockProjectIPAccessListLister(ctrl *gomock.Controller) *MockProjectIPAccessListLister {
	mock := &MockProjectIPAccessListLister{ctrl: ctrl}
	mock.recorder = &MockProjectIPAccessListListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectIPAccessListLister) EXPECT() *MockProjectIPAccessListListerMockRecorder {
	return m.recorder
}

// ProjectIPAccessLists mocks base method.
func (m *MockProjectIPAccessListLister) ProjectIPAccessLists(arg0 string, arg1 *store.ListOptions) (*admin.PaginatedNetworkAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectIPAccessLists", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedNetworkAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectIPAccessLists indicates an expected call of ProjectIPAccessLists.
func (mr *MockProjectIPAccessListListerMockRecorder) ProjectIPAccessLists(arg0, arg1 any) *MockProjectIPAccessListListerProjectIPAccessListsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectIPAccessLists", reflect.TypeOf((*MockProjectIPAccessListLister)(nil).ProjectIPAccessLists), arg0, arg1)
	return &MockProjectIPAccessListListerProjectIPAccessListsCall{Call: call}
}

// MockProjectIPAccessListListerProjectIPAccessListsCall wrap *gomock.Call
type MockProjectIPAccessListListerProjectIPAccessListsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPAccessListListerProjectIPAccessListsCall) Return(arg0 *admin.PaginatedNetworkAccess, arg1 error) *MockProjectIPAccessListListerProjectIPAccessListsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPAccessListListerProjectIPAccessListsCall) Do(f func(string, *store.ListOptions) (*admin.PaginatedNetworkAccess, error)) *MockProjectIPAccessListListerProjectIPAccessListsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPAccessListListerProjectIPAccessListsCall) DoAndReturn(f func(string, *store.ListOptions) (*admin.PaginatedNetworkAccess, error)) *MockProjectIPAccessListListerProjectIPAccessListsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
