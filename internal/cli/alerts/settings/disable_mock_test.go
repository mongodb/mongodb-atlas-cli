// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/alerts/settings (interfaces: AlertConfigurationDisabler)
//
// Generated by this command:
//
//	mockgen -typed -destination=disable_mock_test.go -package=settings . AlertConfigurationDisabler
//

// Package settings is a generated GoMock package.
package settings

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockAlertConfigurationDisabler is a mock of AlertConfigurationDisabler interface.
type MockAlertConfigurationDisabler struct {
	ctrl     *gomock.Controller
	recorder *MockAlertConfigurationDisablerMockRecorder
	isgomock struct{}
}

// MockAlertConfigurationDisablerMockRecorder is the mock recorder for MockAlertConfigurationDisabler.
type MockAlertConfigurationDisablerMockRecorder struct {
	mock *MockAlertConfigurationDisabler
}

// NewMockAlertConfigurationDisabler creates a new mock instance.
func NewMockAlertConfigurationDisabler(ctrl *gomock.Controller) *MockAlertConfigurationDisabler {
	mock := &MockAlertConfigurationDisabler{ctrl: ctrl}
	mock.recorder = &MockAlertConfigurationDisablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertConfigurationDisabler) EXPECT() *MockAlertConfigurationDisablerMockRecorder {
	return m.recorder
}

// DisableAlertConfiguration mocks base method.
func (m *MockAlertConfigurationDisabler) DisableAlertConfiguration(arg0, arg1 string) (*admin.GroupAlertsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAlertConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*admin.GroupAlertsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAlertConfiguration indicates an expected call of DisableAlertConfiguration.
func (mr *MockAlertConfigurationDisablerMockRecorder) DisableAlertConfiguration(arg0, arg1 any) *MockAlertConfigurationDisablerDisableAlertConfigurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAlertConfiguration", reflect.TypeOf((*MockAlertConfigurationDisabler)(nil).DisableAlertConfiguration), arg0, arg1)
	return &MockAlertConfigurationDisablerDisableAlertConfigurationCall{Call: call}
}

// MockAlertConfigurationDisablerDisableAlertConfigurationCall wrap *gomock.Call
type MockAlertConfigurationDisablerDisableAlertConfigurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAlertConfigurationDisablerDisableAlertConfigurationCall) Return(arg0 *admin.GroupAlertsConfig, arg1 error) *MockAlertConfigurationDisablerDisableAlertConfigurationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAlertConfigurationDisablerDisableAlertConfigurationCall) Do(f func(string, string) (*admin.GroupAlertsConfig, error)) *MockAlertConfigurationDisablerDisableAlertConfigurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAlertConfigurationDisablerDisableAlertConfigurationCall) DoAndReturn(f func(string, string) (*admin.GroupAlertsConfig, error)) *MockAlertConfigurationDisablerDisableAlertConfigurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
