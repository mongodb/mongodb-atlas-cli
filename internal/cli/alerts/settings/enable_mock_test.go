// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/alerts/settings (interfaces: AlertConfigurationEnabler)
//
// Generated by this command:
//
//	mockgen -typed -destination=enable_mock_test.go -package=settings . AlertConfigurationEnabler
//

// Package settings is a generated GoMock package.
package settings

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockAlertConfigurationEnabler is a mock of AlertConfigurationEnabler interface.
type MockAlertConfigurationEnabler struct {
	ctrl     *gomock.Controller
	recorder *MockAlertConfigurationEnablerMockRecorder
	isgomock struct{}
}

// MockAlertConfigurationEnablerMockRecorder is the mock recorder for MockAlertConfigurationEnabler.
type MockAlertConfigurationEnablerMockRecorder struct {
	mock *MockAlertConfigurationEnabler
}

// NewMockAlertConfigurationEnabler creates a new mock instance.
func NewMockAlertConfigurationEnabler(ctrl *gomock.Controller) *MockAlertConfigurationEnabler {
	mock := &MockAlertConfigurationEnabler{ctrl: ctrl}
	mock.recorder = &MockAlertConfigurationEnablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertConfigurationEnabler) EXPECT() *MockAlertConfigurationEnablerMockRecorder {
	return m.recorder
}

// EnableAlertConfiguration mocks base method.
func (m *MockAlertConfigurationEnabler) EnableAlertConfiguration(arg0, arg1 string) (*admin.GroupAlertsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAlertConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*admin.GroupAlertsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAlertConfiguration indicates an expected call of EnableAlertConfiguration.
func (mr *MockAlertConfigurationEnablerMockRecorder) EnableAlertConfiguration(arg0, arg1 any) *MockAlertConfigurationEnablerEnableAlertConfigurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAlertConfiguration", reflect.TypeOf((*MockAlertConfigurationEnabler)(nil).EnableAlertConfiguration), arg0, arg1)
	return &MockAlertConfigurationEnablerEnableAlertConfigurationCall{Call: call}
}

// MockAlertConfigurationEnablerEnableAlertConfigurationCall wrap *gomock.Call
type MockAlertConfigurationEnablerEnableAlertConfigurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAlertConfigurationEnablerEnableAlertConfigurationCall) Return(arg0 *admin.GroupAlertsConfig, arg1 error) *MockAlertConfigurationEnablerEnableAlertConfigurationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAlertConfigurationEnablerEnableAlertConfigurationCall) Do(f func(string, string) (*admin.GroupAlertsConfig, error)) *MockAlertConfigurationEnablerEnableAlertConfigurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAlertConfigurationEnablerEnableAlertConfigurationCall) DoAndReturn(f func(string, string) (*admin.GroupAlertsConfig, error)) *MockAlertConfigurationEnablerEnableAlertConfigurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
