// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/alerts/settings (interfaces: AlertConfigurationUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=settings . AlertConfigurationUpdater
//

// Package settings is a generated GoMock package.
package settings

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockAlertConfigurationUpdater is a mock of AlertConfigurationUpdater interface.
type MockAlertConfigurationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockAlertConfigurationUpdaterMockRecorder
	isgomock struct{}
}

// MockAlertConfigurationUpdaterMockRecorder is the mock recorder for MockAlertConfigurationUpdater.
type MockAlertConfigurationUpdaterMockRecorder struct {
	mock *MockAlertConfigurationUpdater
}

// NewMockAlertConfigurationUpdater creates a new mock instance.
func NewMockAlertConfigurationUpdater(ctrl *gomock.Controller) *MockAlertConfigurationUpdater {
	mock := &MockAlertConfigurationUpdater{ctrl: ctrl}
	mock.recorder = &MockAlertConfigurationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertConfigurationUpdater) EXPECT() *MockAlertConfigurationUpdaterMockRecorder {
	return m.recorder
}

// UpdateAlertConfiguration mocks base method.
func (m *MockAlertConfigurationUpdater) UpdateAlertConfiguration(arg0 *admin.GroupAlertsConfig) (*admin.GroupAlertsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlertConfiguration", arg0)
	ret0, _ := ret[0].(*admin.GroupAlertsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlertConfiguration indicates an expected call of UpdateAlertConfiguration.
func (mr *MockAlertConfigurationUpdaterMockRecorder) UpdateAlertConfiguration(arg0 any) *MockAlertConfigurationUpdaterUpdateAlertConfigurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlertConfiguration", reflect.TypeOf((*MockAlertConfigurationUpdater)(nil).UpdateAlertConfiguration), arg0)
	return &MockAlertConfigurationUpdaterUpdateAlertConfigurationCall{Call: call}
}

// MockAlertConfigurationUpdaterUpdateAlertConfigurationCall wrap *gomock.Call
type MockAlertConfigurationUpdaterUpdateAlertConfigurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAlertConfigurationUpdaterUpdateAlertConfigurationCall) Return(arg0 *admin.GroupAlertsConfig, arg1 error) *MockAlertConfigurationUpdaterUpdateAlertConfigurationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAlertConfigurationUpdaterUpdateAlertConfigurationCall) Do(f func(*admin.GroupAlertsConfig) (*admin.GroupAlertsConfig, error)) *MockAlertConfigurationUpdaterUpdateAlertConfigurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAlertConfigurationUpdaterUpdateAlertConfigurationCall) DoAndReturn(f func(*admin.GroupAlertsConfig) (*admin.GroupAlertsConfig, error)) *MockAlertConfigurationUpdaterUpdateAlertConfigurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
