// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/auth (interfaces: LoginConfig,TrackAsker)
//
// Generated by this command:
//
//	mockgen -typed -destination=login_mock_test.go -package=auth . LoginConfig,TrackAsker
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	survey "github.com/AlecAivazis/survey/v2"
	config "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/config"
	gomock "go.uber.org/mock/gomock"
)

// MockLoginConfig is a mock of LoginConfig interface.
type MockLoginConfig struct {
	ctrl     *gomock.Controller
	recorder *MockLoginConfigMockRecorder
	isgomock struct{}
}

// MockLoginConfigMockRecorder is the mock recorder for MockLoginConfig.
type MockLoginConfigMockRecorder struct {
	mock *MockLoginConfig
}

// NewMockLoginConfig creates a new mock instance.
func NewMockLoginConfig(ctrl *gomock.Controller) *MockLoginConfig {
	mock := &MockLoginConfig{ctrl: ctrl}
	mock.recorder = &MockLoginConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginConfig) EXPECT() *MockLoginConfigMockRecorder {
	return m.recorder
}

// AccessTokenSubject mocks base method.
func (m *MockLoginConfig) AccessTokenSubject() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenSubject")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessTokenSubject indicates an expected call of AccessTokenSubject.
func (mr *MockLoginConfigMockRecorder) AccessTokenSubject() *MockLoginConfigAccessTokenSubjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenSubject", reflect.TypeOf((*MockLoginConfig)(nil).AccessTokenSubject))
	return &MockLoginConfigAccessTokenSubjectCall{Call: call}
}

// MockLoginConfigAccessTokenSubjectCall wrap *gomock.Call
type MockLoginConfigAccessTokenSubjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigAccessTokenSubjectCall) Return(arg0 string, arg1 error) *MockLoginConfigAccessTokenSubjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigAccessTokenSubjectCall) Do(f func() (string, error)) *MockLoginConfigAccessTokenSubjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigAccessTokenSubjectCall) DoAndReturn(f func() (string, error)) *MockLoginConfigAccessTokenSubjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrgID mocks base method.
func (m *MockLoginConfig) OrgID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrgID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OrgID indicates an expected call of OrgID.
func (mr *MockLoginConfigMockRecorder) OrgID() *MockLoginConfigOrgIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrgID", reflect.TypeOf((*MockLoginConfig)(nil).OrgID))
	return &MockLoginConfigOrgIDCall{Call: call}
}

// MockLoginConfigOrgIDCall wrap *gomock.Call
type MockLoginConfigOrgIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigOrgIDCall) Return(arg0 string) *MockLoginConfigOrgIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigOrgIDCall) Do(f func() string) *MockLoginConfigOrgIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigOrgIDCall) DoAndReturn(f func() string) *MockLoginConfigOrgIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProjectID mocks base method.
func (m *MockLoginConfig) ProjectID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProjectID indicates an expected call of ProjectID.
func (mr *MockLoginConfigMockRecorder) ProjectID() *MockLoginConfigProjectIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectID", reflect.TypeOf((*MockLoginConfig)(nil).ProjectID))
	return &MockLoginConfigProjectIDCall{Call: call}
}

// MockLoginConfigProjectIDCall wrap *gomock.Call
type MockLoginConfigProjectIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigProjectIDCall) Return(arg0 string) *MockLoginConfigProjectIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigProjectIDCall) Do(f func() string) *MockLoginConfigProjectIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigProjectIDCall) DoAndReturn(f func() string) *MockLoginConfigProjectIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockLoginConfig) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockLoginConfigMockRecorder) Save() *MockLoginConfigSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLoginConfig)(nil).Save))
	return &MockLoginConfigSaveCall{Call: call}
}

// MockLoginConfigSaveCall wrap *gomock.Call
type MockLoginConfigSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSaveCall) Return(arg0 error) *MockLoginConfigSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSaveCall) Do(f func() error) *MockLoginConfigSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSaveCall) DoAndReturn(f func() error) *MockLoginConfigSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAccessToken mocks base method.
func (m *MockLoginConfig) SetAccessToken(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccessToken", arg0)
}

// SetAccessToken indicates an expected call of SetAccessToken.
func (mr *MockLoginConfigMockRecorder) SetAccessToken(arg0 any) *MockLoginConfigSetAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessToken", reflect.TypeOf((*MockLoginConfig)(nil).SetAccessToken), arg0)
	return &MockLoginConfigSetAccessTokenCall{Call: call}
}

// MockLoginConfigSetAccessTokenCall wrap *gomock.Call
type MockLoginConfigSetAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetAccessTokenCall) Return() *MockLoginConfigSetAccessTokenCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetAccessTokenCall) Do(f func(string)) *MockLoginConfigSetAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetAccessTokenCall) DoAndReturn(f func(string)) *MockLoginConfigSetAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAuthType mocks base method.
func (m *MockLoginConfig) SetAuthType(arg0 config.AuthMechanism) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuthType", arg0)
}

// SetAuthType indicates an expected call of SetAuthType.
func (mr *MockLoginConfigMockRecorder) SetAuthType(arg0 any) *MockLoginConfigSetAuthTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthType", reflect.TypeOf((*MockLoginConfig)(nil).SetAuthType), arg0)
	return &MockLoginConfigSetAuthTypeCall{Call: call}
}

// MockLoginConfigSetAuthTypeCall wrap *gomock.Call
type MockLoginConfigSetAuthTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetAuthTypeCall) Return() *MockLoginConfigSetAuthTypeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetAuthTypeCall) Do(f func(config.AuthMechanism)) *MockLoginConfigSetAuthTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetAuthTypeCall) DoAndReturn(f func(config.AuthMechanism)) *MockLoginConfigSetAuthTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetClientID mocks base method.
func (m *MockLoginConfig) SetClientID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClientID", arg0)
}

// SetClientID indicates an expected call of SetClientID.
func (mr *MockLoginConfigMockRecorder) SetClientID(arg0 any) *MockLoginConfigSetClientIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientID", reflect.TypeOf((*MockLoginConfig)(nil).SetClientID), arg0)
	return &MockLoginConfigSetClientIDCall{Call: call}
}

// MockLoginConfigSetClientIDCall wrap *gomock.Call
type MockLoginConfigSetClientIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetClientIDCall) Return() *MockLoginConfigSetClientIDCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetClientIDCall) Do(f func(string)) *MockLoginConfigSetClientIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetClientIDCall) DoAndReturn(f func(string)) *MockLoginConfigSetClientIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetClientSecret mocks base method.
func (m *MockLoginConfig) SetClientSecret(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClientSecret", arg0)
}

// SetClientSecret indicates an expected call of SetClientSecret.
func (mr *MockLoginConfigMockRecorder) SetClientSecret(arg0 any) *MockLoginConfigSetClientSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientSecret", reflect.TypeOf((*MockLoginConfig)(nil).SetClientSecret), arg0)
	return &MockLoginConfigSetClientSecretCall{Call: call}
}

// MockLoginConfigSetClientSecretCall wrap *gomock.Call
type MockLoginConfigSetClientSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetClientSecretCall) Return() *MockLoginConfigSetClientSecretCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetClientSecretCall) Do(f func(string)) *MockLoginConfigSetClientSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetClientSecretCall) DoAndReturn(f func(string)) *MockLoginConfigSetClientSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetGlobal mocks base method.
func (m *MockLoginConfig) SetGlobal(arg0 string, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGlobal", arg0, arg1)
}

// SetGlobal indicates an expected call of SetGlobal.
func (mr *MockLoginConfigMockRecorder) SetGlobal(arg0, arg1 any) *MockLoginConfigSetGlobalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobal", reflect.TypeOf((*MockLoginConfig)(nil).SetGlobal), arg0, arg1)
	return &MockLoginConfigSetGlobalCall{Call: call}
}

// MockLoginConfigSetGlobalCall wrap *gomock.Call
type MockLoginConfigSetGlobalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetGlobalCall) Return() *MockLoginConfigSetGlobalCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetGlobalCall) Do(f func(string, any)) *MockLoginConfigSetGlobalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetGlobalCall) DoAndReturn(f func(string, any)) *MockLoginConfigSetGlobalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOpsManagerURL mocks base method.
func (m *MockLoginConfig) SetOpsManagerURL(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOpsManagerURL", arg0)
}

// SetOpsManagerURL indicates an expected call of SetOpsManagerURL.
func (mr *MockLoginConfigMockRecorder) SetOpsManagerURL(arg0 any) *MockLoginConfigSetOpsManagerURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpsManagerURL", reflect.TypeOf((*MockLoginConfig)(nil).SetOpsManagerURL), arg0)
	return &MockLoginConfigSetOpsManagerURLCall{Call: call}
}

// MockLoginConfigSetOpsManagerURLCall wrap *gomock.Call
type MockLoginConfigSetOpsManagerURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetOpsManagerURLCall) Return() *MockLoginConfigSetOpsManagerURLCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetOpsManagerURLCall) Do(f func(string)) *MockLoginConfigSetOpsManagerURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetOpsManagerURLCall) DoAndReturn(f func(string)) *MockLoginConfigSetOpsManagerURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOrgID mocks base method.
func (m *MockLoginConfig) SetOrgID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOrgID", arg0)
}

// SetOrgID indicates an expected call of SetOrgID.
func (mr *MockLoginConfigMockRecorder) SetOrgID(arg0 any) *MockLoginConfigSetOrgIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrgID", reflect.TypeOf((*MockLoginConfig)(nil).SetOrgID), arg0)
	return &MockLoginConfigSetOrgIDCall{Call: call}
}

// MockLoginConfigSetOrgIDCall wrap *gomock.Call
type MockLoginConfigSetOrgIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetOrgIDCall) Return() *MockLoginConfigSetOrgIDCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetOrgIDCall) Do(f func(string)) *MockLoginConfigSetOrgIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetOrgIDCall) DoAndReturn(f func(string)) *MockLoginConfigSetOrgIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPrivateAPIKey mocks base method.
func (m *MockLoginConfig) SetPrivateAPIKey(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrivateAPIKey", arg0)
}

// SetPrivateAPIKey indicates an expected call of SetPrivateAPIKey.
func (mr *MockLoginConfigMockRecorder) SetPrivateAPIKey(arg0 any) *MockLoginConfigSetPrivateAPIKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrivateAPIKey", reflect.TypeOf((*MockLoginConfig)(nil).SetPrivateAPIKey), arg0)
	return &MockLoginConfigSetPrivateAPIKeyCall{Call: call}
}

// MockLoginConfigSetPrivateAPIKeyCall wrap *gomock.Call
type MockLoginConfigSetPrivateAPIKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetPrivateAPIKeyCall) Return() *MockLoginConfigSetPrivateAPIKeyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetPrivateAPIKeyCall) Do(f func(string)) *MockLoginConfigSetPrivateAPIKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetPrivateAPIKeyCall) DoAndReturn(f func(string)) *MockLoginConfigSetPrivateAPIKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetProjectID mocks base method.
func (m *MockLoginConfig) SetProjectID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProjectID", arg0)
}

// SetProjectID indicates an expected call of SetProjectID.
func (mr *MockLoginConfigMockRecorder) SetProjectID(arg0 any) *MockLoginConfigSetProjectIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProjectID", reflect.TypeOf((*MockLoginConfig)(nil).SetProjectID), arg0)
	return &MockLoginConfigSetProjectIDCall{Call: call}
}

// MockLoginConfigSetProjectIDCall wrap *gomock.Call
type MockLoginConfigSetProjectIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetProjectIDCall) Return() *MockLoginConfigSetProjectIDCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetProjectIDCall) Do(f func(string)) *MockLoginConfigSetProjectIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetProjectIDCall) DoAndReturn(f func(string)) *MockLoginConfigSetProjectIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPublicAPIKey mocks base method.
func (m *MockLoginConfig) SetPublicAPIKey(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPublicAPIKey", arg0)
}

// SetPublicAPIKey indicates an expected call of SetPublicAPIKey.
func (mr *MockLoginConfigMockRecorder) SetPublicAPIKey(arg0 any) *MockLoginConfigSetPublicAPIKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPublicAPIKey", reflect.TypeOf((*MockLoginConfig)(nil).SetPublicAPIKey), arg0)
	return &MockLoginConfigSetPublicAPIKeyCall{Call: call}
}

// MockLoginConfigSetPublicAPIKeyCall wrap *gomock.Call
type MockLoginConfigSetPublicAPIKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetPublicAPIKeyCall) Return() *MockLoginConfigSetPublicAPIKeyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetPublicAPIKeyCall) Do(f func(string)) *MockLoginConfigSetPublicAPIKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetPublicAPIKeyCall) DoAndReturn(f func(string)) *MockLoginConfigSetPublicAPIKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRefreshToken mocks base method.
func (m *MockLoginConfig) SetRefreshToken(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRefreshToken", arg0)
}

// SetRefreshToken indicates an expected call of SetRefreshToken.
func (mr *MockLoginConfigMockRecorder) SetRefreshToken(arg0 any) *MockLoginConfigSetRefreshTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshToken", reflect.TypeOf((*MockLoginConfig)(nil).SetRefreshToken), arg0)
	return &MockLoginConfigSetRefreshTokenCall{Call: call}
}

// MockLoginConfigSetRefreshTokenCall wrap *gomock.Call
type MockLoginConfigSetRefreshTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetRefreshTokenCall) Return() *MockLoginConfigSetRefreshTokenCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetRefreshTokenCall) Do(f func(string)) *MockLoginConfigSetRefreshTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetRefreshTokenCall) DoAndReturn(f func(string)) *MockLoginConfigSetRefreshTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetService mocks base method.
func (m *MockLoginConfig) SetService(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetService", arg0)
}

// SetService indicates an expected call of SetService.
func (mr *MockLoginConfigMockRecorder) SetService(arg0 any) *MockLoginConfigSetServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetService", reflect.TypeOf((*MockLoginConfig)(nil).SetService), arg0)
	return &MockLoginConfigSetServiceCall{Call: call}
}

// MockLoginConfigSetServiceCall wrap *gomock.Call
type MockLoginConfigSetServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetServiceCall) Return() *MockLoginConfigSetServiceCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetServiceCall) Do(f func(string)) *MockLoginConfigSetServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetServiceCall) DoAndReturn(f func(string)) *MockLoginConfigSetServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTrackAsker is a mock of TrackAsker interface.
type MockTrackAsker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackAskerMockRecorder
	isgomock struct{}
}

// MockTrackAskerMockRecorder is the mock recorder for MockTrackAsker.
type MockTrackAskerMockRecorder struct {
	mock *MockTrackAsker
}

// NewMockTrackAsker creates a new mock instance.
func NewMockTrackAsker(ctrl *gomock.Controller) *MockTrackAsker {
	mock := &MockTrackAsker{ctrl: ctrl}
	mock.recorder = &MockTrackAskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackAsker) EXPECT() *MockTrackAskerMockRecorder {
	return m.recorder
}

// TrackAsk mocks base method.
func (m *MockTrackAsker) TrackAsk(arg0 []*survey.Question, arg1 any, arg2 ...survey.AskOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackAsk", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackAsk indicates an expected call of TrackAsk.
func (mr *MockTrackAskerMockRecorder) TrackAsk(arg0, arg1 any, arg2 ...any) *MockTrackAskerTrackAskCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackAsk", reflect.TypeOf((*MockTrackAsker)(nil).TrackAsk), varargs...)
	return &MockTrackAskerTrackAskCall{Call: call}
}

// MockTrackAskerTrackAskCall wrap *gomock.Call
type MockTrackAskerTrackAskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackAskerTrackAskCall) Return(arg0 error) *MockTrackAskerTrackAskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackAskerTrackAskCall) Do(f func([]*survey.Question, any, ...survey.AskOpt) error) *MockTrackAskerTrackAskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackAskerTrackAskCall) DoAndReturn(f func([]*survey.Question, any, ...survey.AskOpt) error) *MockTrackAskerTrackAskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TrackAskOne mocks base method.
func (m *MockTrackAsker) TrackAskOne(arg0 survey.Prompt, arg1 any, arg2 ...survey.AskOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackAskOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackAskOne indicates an expected call of TrackAskOne.
func (mr *MockTrackAskerMockRecorder) TrackAskOne(arg0, arg1 any, arg2 ...any) *MockTrackAskerTrackAskOneCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackAskOne", reflect.TypeOf((*MockTrackAsker)(nil).TrackAskOne), varargs...)
	return &MockTrackAskerTrackAskOneCall{Call: call}
}

// MockTrackAskerTrackAskOneCall wrap *gomock.Call
type MockTrackAskerTrackAskOneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackAskerTrackAskOneCall) Return(arg0 error) *MockTrackAskerTrackAskOneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackAskerTrackAskOneCall) Do(f func(survey.Prompt, any, ...survey.AskOpt) error) *MockTrackAskerTrackAskOneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackAskerTrackAskOneCall) DoAndReturn(f func(survey.Prompt, any, ...survey.AskOpt) error) *MockTrackAskerTrackAskOneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
