// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/auth (interfaces: LoginConfig,TrackAsker)
//
// Generated by this command:
//
//	mockgen -typed -destination=login_mock_test.go -package=auth . LoginConfig,TrackAsker
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	survey "github.com/AlecAivazis/survey/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockLoginConfig is a mock of LoginConfig interface.
type MockLoginConfig struct {
	ctrl     *gomock.Controller
	recorder *MockLoginConfigMockRecorder
	isgomock struct{}
}

// MockLoginConfigMockRecorder is the mock recorder for MockLoginConfig.
type MockLoginConfigMockRecorder struct {
	mock *MockLoginConfig
}

// NewMockLoginConfig creates a new mock instance.
func NewMockLoginConfig(ctrl *gomock.Controller) *MockLoginConfig {
	mock := &MockLoginConfig{ctrl: ctrl}
	mock.recorder = &MockLoginConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginConfig) EXPECT() *MockLoginConfigMockRecorder {
	return m.recorder
}

// AccessTokenSubject mocks base method.
func (m *MockLoginConfig) AccessTokenSubject() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessTokenSubject")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessTokenSubject indicates an expected call of AccessTokenSubject.
func (mr *MockLoginConfigMockRecorder) AccessTokenSubject() *MockLoginConfigAccessTokenSubjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessTokenSubject", reflect.TypeOf((*MockLoginConfig)(nil).AccessTokenSubject))
	return &MockLoginConfigAccessTokenSubjectCall{Call: call}
}

// MockLoginConfigAccessTokenSubjectCall wrap *gomock.Call
type MockLoginConfigAccessTokenSubjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigAccessTokenSubjectCall) Return(arg0 string, arg1 error) *MockLoginConfigAccessTokenSubjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigAccessTokenSubjectCall) Do(f func() (string, error)) *MockLoginConfigAccessTokenSubjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigAccessTokenSubjectCall) DoAndReturn(f func() (string, error)) *MockLoginConfigAccessTokenSubjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrgID mocks base method.
func (m *MockLoginConfig) OrgID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrgID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OrgID indicates an expected call of OrgID.
func (mr *MockLoginConfigMockRecorder) OrgID() *MockLoginConfigOrgIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrgID", reflect.TypeOf((*MockLoginConfig)(nil).OrgID))
	return &MockLoginConfigOrgIDCall{Call: call}
}

// MockLoginConfigOrgIDCall wrap *gomock.Call
type MockLoginConfigOrgIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigOrgIDCall) Return(arg0 string) *MockLoginConfigOrgIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigOrgIDCall) Do(f func() string) *MockLoginConfigOrgIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigOrgIDCall) DoAndReturn(f func() string) *MockLoginConfigOrgIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProjectID mocks base method.
func (m *MockLoginConfig) ProjectID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProjectID indicates an expected call of ProjectID.
func (mr *MockLoginConfigMockRecorder) ProjectID() *MockLoginConfigProjectIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectID", reflect.TypeOf((*MockLoginConfig)(nil).ProjectID))
	return &MockLoginConfigProjectIDCall{Call: call}
}

// MockLoginConfigProjectIDCall wrap *gomock.Call
type MockLoginConfigProjectIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigProjectIDCall) Return(arg0 string) *MockLoginConfigProjectIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigProjectIDCall) Do(f func() string) *MockLoginConfigProjectIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigProjectIDCall) DoAndReturn(f func() string) *MockLoginConfigProjectIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockLoginConfig) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockLoginConfigMockRecorder) Save() *MockLoginConfigSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLoginConfig)(nil).Save))
	return &MockLoginConfigSaveCall{Call: call}
}

// MockLoginConfigSaveCall wrap *gomock.Call
type MockLoginConfigSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSaveCall) Return(arg0 error) *MockLoginConfigSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSaveCall) Do(f func() error) *MockLoginConfigSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSaveCall) DoAndReturn(f func() error) *MockLoginConfigSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockLoginConfig) Set(arg0 string, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1)
}

// Set indicates an expected call of Set.
func (mr *MockLoginConfigMockRecorder) Set(arg0, arg1 any) *MockLoginConfigSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockLoginConfig)(nil).Set), arg0, arg1)
	return &MockLoginConfigSetCall{Call: call}
}

// MockLoginConfigSetCall wrap *gomock.Call
type MockLoginConfigSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetCall) Return() *MockLoginConfigSetCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetCall) Do(f func(string, any)) *MockLoginConfigSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetCall) DoAndReturn(f func(string, any)) *MockLoginConfigSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetGlobal mocks base method.
func (m *MockLoginConfig) SetGlobal(arg0 string, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGlobal", arg0, arg1)
}

// SetGlobal indicates an expected call of SetGlobal.
func (mr *MockLoginConfigMockRecorder) SetGlobal(arg0, arg1 any) *MockLoginConfigSetGlobalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobal", reflect.TypeOf((*MockLoginConfig)(nil).SetGlobal), arg0, arg1)
	return &MockLoginConfigSetGlobalCall{Call: call}
}

// MockLoginConfigSetGlobalCall wrap *gomock.Call
type MockLoginConfigSetGlobalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoginConfigSetGlobalCall) Return() *MockLoginConfigSetGlobalCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoginConfigSetGlobalCall) Do(f func(string, any)) *MockLoginConfigSetGlobalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoginConfigSetGlobalCall) DoAndReturn(f func(string, any)) *MockLoginConfigSetGlobalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTrackAsker is a mock of TrackAsker interface.
type MockTrackAsker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackAskerMockRecorder
	isgomock struct{}
}

// MockTrackAskerMockRecorder is the mock recorder for MockTrackAsker.
type MockTrackAskerMockRecorder struct {
	mock *MockTrackAsker
}

// NewMockTrackAsker creates a new mock instance.
func NewMockTrackAsker(ctrl *gomock.Controller) *MockTrackAsker {
	mock := &MockTrackAsker{ctrl: ctrl}
	mock.recorder = &MockTrackAskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackAsker) EXPECT() *MockTrackAskerMockRecorder {
	return m.recorder
}

// TrackAsk mocks base method.
func (m *MockTrackAsker) TrackAsk(arg0 []*survey.Question, arg1 any, arg2 ...survey.AskOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackAsk", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackAsk indicates an expected call of TrackAsk.
func (mr *MockTrackAskerMockRecorder) TrackAsk(arg0, arg1 any, arg2 ...any) *MockTrackAskerTrackAskCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackAsk", reflect.TypeOf((*MockTrackAsker)(nil).TrackAsk), varargs...)
	return &MockTrackAskerTrackAskCall{Call: call}
}

// MockTrackAskerTrackAskCall wrap *gomock.Call
type MockTrackAskerTrackAskCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackAskerTrackAskCall) Return(arg0 error) *MockTrackAskerTrackAskCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackAskerTrackAskCall) Do(f func([]*survey.Question, any, ...survey.AskOpt) error) *MockTrackAskerTrackAskCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackAskerTrackAskCall) DoAndReturn(f func([]*survey.Question, any, ...survey.AskOpt) error) *MockTrackAskerTrackAskCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TrackAskOne mocks base method.
func (m *MockTrackAsker) TrackAskOne(arg0 survey.Prompt, arg1 any, arg2 ...survey.AskOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackAskOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackAskOne indicates an expected call of TrackAskOne.
func (mr *MockTrackAskerMockRecorder) TrackAskOne(arg0, arg1 any, arg2 ...any) *MockTrackAskerTrackAskOneCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackAskOne", reflect.TypeOf((*MockTrackAsker)(nil).TrackAskOne), varargs...)
	return &MockTrackAskerTrackAskOneCall{Call: call}
}

// MockTrackAskerTrackAskOneCall wrap *gomock.Call
type MockTrackAskerTrackAskOneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTrackAskerTrackAskOneCall) Return(arg0 error) *MockTrackAskerTrackAskOneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTrackAskerTrackAskOneCall) Do(f func(survey.Prompt, any, ...survey.AskOpt) error) *MockTrackAskerTrackAskOneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTrackAskerTrackAskOneCall) DoAndReturn(f func(survey.Prompt, any, ...survey.AskOpt) error) *MockTrackAskerTrackAskOneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
