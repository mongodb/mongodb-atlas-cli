// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/auth (interfaces: ConfigDeleter,Revoker)
//
// Generated by this command:
//
//	mockgen -typed -destination=logout_mock_test.go -package=auth . ConfigDeleter,Revoker
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	config "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/config"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigDeleter is a mock of ConfigDeleter interface.
type MockConfigDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigDeleterMockRecorder
	isgomock struct{}
}

// MockConfigDeleterMockRecorder is the mock recorder for MockConfigDeleter.
type MockConfigDeleterMockRecorder struct {
	mock *MockConfigDeleter
}

// NewMockConfigDeleter creates a new mock instance.
func NewMockConfigDeleter(ctrl *gomock.Controller) *MockConfigDeleter {
	mock := &MockConfigDeleter{ctrl: ctrl}
	mock.recorder = &MockConfigDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigDeleter) EXPECT() *MockConfigDeleterMockRecorder {
	return m.recorder
}

// AuthType mocks base method.
func (m *MockConfigDeleter) AuthType() config.AuthMechanism {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthType")
	ret0, _ := ret[0].(config.AuthMechanism)
	return ret0
}

// AuthType indicates an expected call of AuthType.
func (mr *MockConfigDeleterMockRecorder) AuthType() *MockConfigDeleterAuthTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthType", reflect.TypeOf((*MockConfigDeleter)(nil).AuthType))
	return &MockConfigDeleterAuthTypeCall{Call: call}
}

// MockConfigDeleterAuthTypeCall wrap *gomock.Call
type MockConfigDeleterAuthTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterAuthTypeCall) Return(arg0 config.AuthMechanism) *MockConfigDeleterAuthTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterAuthTypeCall) Do(f func() config.AuthMechanism) *MockConfigDeleterAuthTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterAuthTypeCall) DoAndReturn(f func() config.AuthMechanism) *MockConfigDeleterAuthTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ClientID mocks base method.
func (m *MockConfigDeleter) ClientID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientID indicates an expected call of ClientID.
func (mr *MockConfigDeleterMockRecorder) ClientID() *MockConfigDeleterClientIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientID", reflect.TypeOf((*MockConfigDeleter)(nil).ClientID))
	return &MockConfigDeleterClientIDCall{Call: call}
}

// MockConfigDeleterClientIDCall wrap *gomock.Call
type MockConfigDeleterClientIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterClientIDCall) Return(arg0 string) *MockConfigDeleterClientIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterClientIDCall) Do(f func() string) *MockConfigDeleterClientIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterClientIDCall) DoAndReturn(f func() string) *MockConfigDeleterClientIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ClientSecret mocks base method.
func (m *MockConfigDeleter) ClientSecret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientSecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientSecret indicates an expected call of ClientSecret.
func (mr *MockConfigDeleterMockRecorder) ClientSecret() *MockConfigDeleterClientSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientSecret", reflect.TypeOf((*MockConfigDeleter)(nil).ClientSecret))
	return &MockConfigDeleterClientSecretCall{Call: call}
}

// MockConfigDeleterClientSecretCall wrap *gomock.Call
type MockConfigDeleterClientSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterClientSecretCall) Return(arg0 string) *MockConfigDeleterClientSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterClientSecretCall) Do(f func() string) *MockConfigDeleterClientSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterClientSecretCall) DoAndReturn(f func() string) *MockConfigDeleterClientSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockConfigDeleter) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockConfigDeleterMockRecorder) Delete() *MockConfigDeleterDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConfigDeleter)(nil).Delete))
	return &MockConfigDeleterDeleteCall{Call: call}
}

// MockConfigDeleterDeleteCall wrap *gomock.Call
type MockConfigDeleterDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterDeleteCall) Return(arg0 error) *MockConfigDeleterDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterDeleteCall) Do(f func() error) *MockConfigDeleterDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterDeleteCall) DoAndReturn(f func() error) *MockConfigDeleterDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockConfigDeleter) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockConfigDeleterMockRecorder) Name() *MockConfigDeleterNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConfigDeleter)(nil).Name))
	return &MockConfigDeleterNameCall{Call: call}
}

// MockConfigDeleterNameCall wrap *gomock.Call
type MockConfigDeleterNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterNameCall) Return(arg0 string) *MockConfigDeleterNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterNameCall) Do(f func() string) *MockConfigDeleterNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterNameCall) DoAndReturn(f func() string) *MockConfigDeleterNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublicAPIKey mocks base method.
func (m *MockConfigDeleter) PublicAPIKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicAPIKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// PublicAPIKey indicates an expected call of PublicAPIKey.
func (mr *MockConfigDeleterMockRecorder) PublicAPIKey() *MockConfigDeleterPublicAPIKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicAPIKey", reflect.TypeOf((*MockConfigDeleter)(nil).PublicAPIKey))
	return &MockConfigDeleterPublicAPIKeyCall{Call: call}
}

// MockConfigDeleterPublicAPIKeyCall wrap *gomock.Call
type MockConfigDeleterPublicAPIKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterPublicAPIKeyCall) Return(arg0 string) *MockConfigDeleterPublicAPIKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterPublicAPIKeyCall) Do(f func() string) *MockConfigDeleterPublicAPIKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterPublicAPIKeyCall) DoAndReturn(f func() string) *MockConfigDeleterPublicAPIKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockConfigDeleter) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockConfigDeleterMockRecorder) Save() *MockConfigDeleterSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockConfigDeleter)(nil).Save))
	return &MockConfigDeleterSaveCall{Call: call}
}

// MockConfigDeleterSaveCall wrap *gomock.Call
type MockConfigDeleterSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterSaveCall) Return(arg0 error) *MockConfigDeleterSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterSaveCall) Do(f func() error) *MockConfigDeleterSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterSaveCall) DoAndReturn(f func() error) *MockConfigDeleterSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAccessToken mocks base method.
func (m *MockConfigDeleter) SetAccessToken(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccessToken", arg0)
}

// SetAccessToken indicates an expected call of SetAccessToken.
func (mr *MockConfigDeleterMockRecorder) SetAccessToken(arg0 any) *MockConfigDeleterSetAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessToken", reflect.TypeOf((*MockConfigDeleter)(nil).SetAccessToken), arg0)
	return &MockConfigDeleterSetAccessTokenCall{Call: call}
}

// MockConfigDeleterSetAccessTokenCall wrap *gomock.Call
type MockConfigDeleterSetAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterSetAccessTokenCall) Return() *MockConfigDeleterSetAccessTokenCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterSetAccessTokenCall) Do(f func(string)) *MockConfigDeleterSetAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterSetAccessTokenCall) DoAndReturn(f func(string)) *MockConfigDeleterSetAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetClientID mocks base method.
func (m *MockConfigDeleter) SetClientID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClientID", arg0)
}

// SetClientID indicates an expected call of SetClientID.
func (mr *MockConfigDeleterMockRecorder) SetClientID(arg0 any) *MockConfigDeleterSetClientIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientID", reflect.TypeOf((*MockConfigDeleter)(nil).SetClientID), arg0)
	return &MockConfigDeleterSetClientIDCall{Call: call}
}

// MockConfigDeleterSetClientIDCall wrap *gomock.Call
type MockConfigDeleterSetClientIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterSetClientIDCall) Return() *MockConfigDeleterSetClientIDCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterSetClientIDCall) Do(f func(string)) *MockConfigDeleterSetClientIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterSetClientIDCall) DoAndReturn(f func(string)) *MockConfigDeleterSetClientIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetClientSecret mocks base method.
func (m *MockConfigDeleter) SetClientSecret(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClientSecret", arg0)
}

// SetClientSecret indicates an expected call of SetClientSecret.
func (mr *MockConfigDeleterMockRecorder) SetClientSecret(arg0 any) *MockConfigDeleterSetClientSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientSecret", reflect.TypeOf((*MockConfigDeleter)(nil).SetClientSecret), arg0)
	return &MockConfigDeleterSetClientSecretCall{Call: call}
}

// MockConfigDeleterSetClientSecretCall wrap *gomock.Call
type MockConfigDeleterSetClientSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterSetClientSecretCall) Return() *MockConfigDeleterSetClientSecretCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterSetClientSecretCall) Do(f func(string)) *MockConfigDeleterSetClientSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterSetClientSecretCall) DoAndReturn(f func(string)) *MockConfigDeleterSetClientSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOrgID mocks base method.
func (m *MockConfigDeleter) SetOrgID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOrgID", arg0)
}

// SetOrgID indicates an expected call of SetOrgID.
func (mr *MockConfigDeleterMockRecorder) SetOrgID(arg0 any) *MockConfigDeleterSetOrgIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrgID", reflect.TypeOf((*MockConfigDeleter)(nil).SetOrgID), arg0)
	return &MockConfigDeleterSetOrgIDCall{Call: call}
}

// MockConfigDeleterSetOrgIDCall wrap *gomock.Call
type MockConfigDeleterSetOrgIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterSetOrgIDCall) Return() *MockConfigDeleterSetOrgIDCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterSetOrgIDCall) Do(f func(string)) *MockConfigDeleterSetOrgIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterSetOrgIDCall) DoAndReturn(f func(string)) *MockConfigDeleterSetOrgIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPrivateAPIKey mocks base method.
func (m *MockConfigDeleter) SetPrivateAPIKey(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrivateAPIKey", arg0)
}

// SetPrivateAPIKey indicates an expected call of SetPrivateAPIKey.
func (mr *MockConfigDeleterMockRecorder) SetPrivateAPIKey(arg0 any) *MockConfigDeleterSetPrivateAPIKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrivateAPIKey", reflect.TypeOf((*MockConfigDeleter)(nil).SetPrivateAPIKey), arg0)
	return &MockConfigDeleterSetPrivateAPIKeyCall{Call: call}
}

// MockConfigDeleterSetPrivateAPIKeyCall wrap *gomock.Call
type MockConfigDeleterSetPrivateAPIKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterSetPrivateAPIKeyCall) Return() *MockConfigDeleterSetPrivateAPIKeyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterSetPrivateAPIKeyCall) Do(f func(string)) *MockConfigDeleterSetPrivateAPIKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterSetPrivateAPIKeyCall) DoAndReturn(f func(string)) *MockConfigDeleterSetPrivateAPIKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetProjectID mocks base method.
func (m *MockConfigDeleter) SetProjectID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProjectID", arg0)
}

// SetProjectID indicates an expected call of SetProjectID.
func (mr *MockConfigDeleterMockRecorder) SetProjectID(arg0 any) *MockConfigDeleterSetProjectIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProjectID", reflect.TypeOf((*MockConfigDeleter)(nil).SetProjectID), arg0)
	return &MockConfigDeleterSetProjectIDCall{Call: call}
}

// MockConfigDeleterSetProjectIDCall wrap *gomock.Call
type MockConfigDeleterSetProjectIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterSetProjectIDCall) Return() *MockConfigDeleterSetProjectIDCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterSetProjectIDCall) Do(f func(string)) *MockConfigDeleterSetProjectIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterSetProjectIDCall) DoAndReturn(f func(string)) *MockConfigDeleterSetProjectIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPublicAPIKey mocks base method.
func (m *MockConfigDeleter) SetPublicAPIKey(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPublicAPIKey", arg0)
}

// SetPublicAPIKey indicates an expected call of SetPublicAPIKey.
func (mr *MockConfigDeleterMockRecorder) SetPublicAPIKey(arg0 any) *MockConfigDeleterSetPublicAPIKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPublicAPIKey", reflect.TypeOf((*MockConfigDeleter)(nil).SetPublicAPIKey), arg0)
	return &MockConfigDeleterSetPublicAPIKeyCall{Call: call}
}

// MockConfigDeleterSetPublicAPIKeyCall wrap *gomock.Call
type MockConfigDeleterSetPublicAPIKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterSetPublicAPIKeyCall) Return() *MockConfigDeleterSetPublicAPIKeyCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterSetPublicAPIKeyCall) Do(f func(string)) *MockConfigDeleterSetPublicAPIKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterSetPublicAPIKeyCall) DoAndReturn(f func(string)) *MockConfigDeleterSetPublicAPIKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRefreshToken mocks base method.
func (m *MockConfigDeleter) SetRefreshToken(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRefreshToken", arg0)
}

// SetRefreshToken indicates an expected call of SetRefreshToken.
func (mr *MockConfigDeleterMockRecorder) SetRefreshToken(arg0 any) *MockConfigDeleterSetRefreshTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRefreshToken", reflect.TypeOf((*MockConfigDeleter)(nil).SetRefreshToken), arg0)
	return &MockConfigDeleterSetRefreshTokenCall{Call: call}
}

// MockConfigDeleterSetRefreshTokenCall wrap *gomock.Call
type MockConfigDeleterSetRefreshTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigDeleterSetRefreshTokenCall) Return() *MockConfigDeleterSetRefreshTokenCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigDeleterSetRefreshTokenCall) Do(f func(string)) *MockConfigDeleterSetRefreshTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigDeleterSetRefreshTokenCall) DoAndReturn(f func(string)) *MockConfigDeleterSetRefreshTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRevoker is a mock of Revoker interface.
type MockRevoker struct {
	ctrl     *gomock.Controller
	recorder *MockRevokerMockRecorder
	isgomock struct{}
}

// MockRevokerMockRecorder is the mock recorder for MockRevoker.
type MockRevokerMockRecorder struct {
	mock *MockRevoker
}

// NewMockRevoker creates a new mock instance.
func NewMockRevoker(ctrl *gomock.Controller) *MockRevoker {
	mock := &MockRevoker{ctrl: ctrl}
	mock.recorder = &MockRevokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRevoker) EXPECT() *MockRevokerMockRecorder {
	return m.recorder
}

// RevokeToken mocks base method.
func (m *MockRevoker) RevokeToken(arg0 context.Context, arg1, arg2 string) (*mongodbatlas.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongodbatlas.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockRevokerMockRecorder) RevokeToken(arg0, arg1, arg2 any) *MockRevokerRevokeTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockRevoker)(nil).RevokeToken), arg0, arg1, arg2)
	return &MockRevokerRevokeTokenCall{Call: call}
}

// MockRevokerRevokeTokenCall wrap *gomock.Call
type MockRevokerRevokeTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRevokerRevokeTokenCall) Return(arg0 *mongodbatlas.Response, arg1 error) *MockRevokerRevokeTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRevokerRevokeTokenCall) Do(f func(context.Context, string, string) (*mongodbatlas.Response, error)) *MockRevokerRevokeTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRevokerRevokeTokenCall) DoAndReturn(f func(context.Context, string, string) (*mongodbatlas.Response, error)) *MockRevokerRevokeTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
