// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/auth (interfaces: TokenConfig)
//
// Generated by this command:
//
//	mockgen -typed -destination=token_mock_test.go -package=auth . TokenConfig
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTokenConfig is a mock of TokenConfig interface.
type MockTokenConfig struct {
	ctrl     *gomock.Controller
	recorder *MockTokenConfigMockRecorder
	isgomock struct{}
}

// MockTokenConfigMockRecorder is the mock recorder for MockTokenConfig.
type MockTokenConfigMockRecorder struct {
	mock *MockTokenConfig
}

// NewMockTokenConfig creates a new mock instance.
func NewMockTokenConfig(ctrl *gomock.Controller) *MockTokenConfig {
	mock := &MockTokenConfig{ctrl: ctrl}
	mock.recorder = &MockTokenConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenConfig) EXPECT() *MockTokenConfigMockRecorder {
	return m.recorder
}

// AccessToken mocks base method.
func (m *MockTokenConfig) AccessToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// AccessToken indicates an expected call of AccessToken.
func (mr *MockTokenConfigMockRecorder) AccessToken() *MockTokenConfigAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessToken", reflect.TypeOf((*MockTokenConfig)(nil).AccessToken))
	return &MockTokenConfigAccessTokenCall{Call: call}
}

// MockTokenConfigAccessTokenCall wrap *gomock.Call
type MockTokenConfigAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTokenConfigAccessTokenCall) Return(arg0 string) *MockTokenConfigAccessTokenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTokenConfigAccessTokenCall) Do(f func() string) *MockTokenConfigAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTokenConfigAccessTokenCall) DoAndReturn(f func() string) *MockTokenConfigAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockTokenConfig) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTokenConfigMockRecorder) Name() *MockTokenConfigNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTokenConfig)(nil).Name))
	return &MockTokenConfigNameCall{Call: call}
}

// MockTokenConfigNameCall wrap *gomock.Call
type MockTokenConfigNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTokenConfigNameCall) Return(arg0 string) *MockTokenConfigNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTokenConfigNameCall) Do(f func() string) *MockTokenConfigNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTokenConfigNameCall) DoAndReturn(f func() string) *MockTokenConfigNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
