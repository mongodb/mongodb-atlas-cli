// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/backup/compliancepolicy/copyprotection (interfaces: CompliancePolicyCopyProtectionDisabler)
//
// Generated by this command:
//
//	mockgen -typed -destination=disable_mock_test.go -package=copyprotection . CompliancePolicyCopyProtectionDisabler
//

// Package copyprotection is a generated GoMock package.
package copyprotection

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockCompliancePolicyCopyProtectionDisabler is a mock of CompliancePolicyCopyProtectionDisabler interface.
type MockCompliancePolicyCopyProtectionDisabler struct {
	ctrl     *gomock.Controller
	recorder *MockCompliancePolicyCopyProtectionDisablerMockRecorder
	isgomock struct{}
}

// MockCompliancePolicyCopyProtectionDisablerMockRecorder is the mock recorder for MockCompliancePolicyCopyProtectionDisabler.
type MockCompliancePolicyCopyProtectionDisablerMockRecorder struct {
	mock *MockCompliancePolicyCopyProtectionDisabler
}

// NewMockCompliancePolicyCopyProtectionDisabler creates a new mock instance.
func NewMockCompliancePolicyCopyProtectionDisabler(ctrl *gomock.Controller) *MockCompliancePolicyCopyProtectionDisabler {
	mock := &MockCompliancePolicyCopyProtectionDisabler{ctrl: ctrl}
	mock.recorder = &MockCompliancePolicyCopyProtectionDisablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompliancePolicyCopyProtectionDisabler) EXPECT() *MockCompliancePolicyCopyProtectionDisablerMockRecorder {
	return m.recorder
}

// DescribeCompliancePolicy mocks base method.
func (m *MockCompliancePolicyCopyProtectionDisabler) DescribeCompliancePolicy(projectID string) (*admin.DataProtectionSettings20231001, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCompliancePolicy", projectID)
	ret0, _ := ret[0].(*admin.DataProtectionSettings20231001)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCompliancePolicy indicates an expected call of DescribeCompliancePolicy.
func (mr *MockCompliancePolicyCopyProtectionDisablerMockRecorder) DescribeCompliancePolicy(projectID any) *MockCompliancePolicyCopyProtectionDisablerDescribeCompliancePolicyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCompliancePolicy", reflect.TypeOf((*MockCompliancePolicyCopyProtectionDisabler)(nil).DescribeCompliancePolicy), projectID)
	return &MockCompliancePolicyCopyProtectionDisablerDescribeCompliancePolicyCall{Call: call}
}

// MockCompliancePolicyCopyProtectionDisablerDescribeCompliancePolicyCall wrap *gomock.Call
type MockCompliancePolicyCopyProtectionDisablerDescribeCompliancePolicyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCompliancePolicyCopyProtectionDisablerDescribeCompliancePolicyCall) Return(arg0 *admin.DataProtectionSettings20231001, arg1 error) *MockCompliancePolicyCopyProtectionDisablerDescribeCompliancePolicyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCompliancePolicyCopyProtectionDisablerDescribeCompliancePolicyCall) Do(f func(string) (*admin.DataProtectionSettings20231001, error)) *MockCompliancePolicyCopyProtectionDisablerDescribeCompliancePolicyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCompliancePolicyCopyProtectionDisablerDescribeCompliancePolicyCall) DoAndReturn(f func(string) (*admin.DataProtectionSettings20231001, error)) *MockCompliancePolicyCopyProtectionDisablerDescribeCompliancePolicyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableCopyProtection mocks base method.
func (m *MockCompliancePolicyCopyProtectionDisabler) DisableCopyProtection(projectID string) (*admin.DataProtectionSettings20231001, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableCopyProtection", projectID)
	ret0, _ := ret[0].(*admin.DataProtectionSettings20231001)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableCopyProtection indicates an expected call of DisableCopyProtection.
func (mr *MockCompliancePolicyCopyProtectionDisablerMockRecorder) DisableCopyProtection(projectID any) *MockCompliancePolicyCopyProtectionDisablerDisableCopyProtectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableCopyProtection", reflect.TypeOf((*MockCompliancePolicyCopyProtectionDisabler)(nil).DisableCopyProtection), projectID)
	return &MockCompliancePolicyCopyProtectionDisablerDisableCopyProtectionCall{Call: call}
}

// MockCompliancePolicyCopyProtectionDisablerDisableCopyProtectionCall wrap *gomock.Call
type MockCompliancePolicyCopyProtectionDisablerDisableCopyProtectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCompliancePolicyCopyProtectionDisablerDisableCopyProtectionCall) Return(arg0 *admin.DataProtectionSettings20231001, arg1 error) *MockCompliancePolicyCopyProtectionDisablerDisableCopyProtectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCompliancePolicyCopyProtectionDisablerDisableCopyProtectionCall) Do(f func(string) (*admin.DataProtectionSettings20231001, error)) *MockCompliancePolicyCopyProtectionDisablerDisableCopyProtectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCompliancePolicyCopyProtectionDisablerDisableCopyProtectionCall) DoAndReturn(f func(string) (*admin.DataProtectionSettings20231001, error)) *MockCompliancePolicyCopyProtectionDisablerDisableCopyProtectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
