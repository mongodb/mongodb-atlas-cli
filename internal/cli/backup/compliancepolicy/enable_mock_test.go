// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/backup/compliancepolicy (interfaces: Enabler)
//
// Generated by this command:
//
//	mockgen -typed -destination=enable_mock_test.go -package=compliancepolicy . Enabler
//

// Package compliancepolicy is a generated GoMock package.
package compliancepolicy

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockEnabler is a mock of Enabler interface.
type MockEnabler struct {
	ctrl     *gomock.Controller
	recorder *MockEnablerMockRecorder
	isgomock struct{}
}

// MockEnablerMockRecorder is the mock recorder for MockEnabler.
type MockEnablerMockRecorder struct {
	mock *MockEnabler
}

// NewMockEnabler creates a new mock instance.
func NewMockEnabler(ctrl *gomock.Controller) *MockEnabler {
	mock := &MockEnabler{ctrl: ctrl}
	mock.recorder = &MockEnablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnabler) EXPECT() *MockEnablerMockRecorder {
	return m.recorder
}

// DescribeCompliancePolicy mocks base method.
func (m *MockEnabler) DescribeCompliancePolicy(projectID string) (*admin.DataProtectionSettings20231001, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCompliancePolicy", projectID)
	ret0, _ := ret[0].(*admin.DataProtectionSettings20231001)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCompliancePolicy indicates an expected call of DescribeCompliancePolicy.
func (mr *MockEnablerMockRecorder) DescribeCompliancePolicy(projectID any) *MockEnablerDescribeCompliancePolicyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCompliancePolicy", reflect.TypeOf((*MockEnabler)(nil).DescribeCompliancePolicy), projectID)
	return &MockEnablerDescribeCompliancePolicyCall{Call: call}
}

// MockEnablerDescribeCompliancePolicyCall wrap *gomock.Call
type MockEnablerDescribeCompliancePolicyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnablerDescribeCompliancePolicyCall) Return(arg0 *admin.DataProtectionSettings20231001, arg1 error) *MockEnablerDescribeCompliancePolicyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnablerDescribeCompliancePolicyCall) Do(f func(string) (*admin.DataProtectionSettings20231001, error)) *MockEnablerDescribeCompliancePolicyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnablerDescribeCompliancePolicyCall) DoAndReturn(f func(string) (*admin.DataProtectionSettings20231001, error)) *MockEnablerDescribeCompliancePolicyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableCompliancePolicy mocks base method.
func (m *MockEnabler) EnableCompliancePolicy(projectID, authorizedEmail, authorizedFirstName, authorizedLastName string) (*admin.DataProtectionSettings20231001, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCompliancePolicy", projectID, authorizedEmail, authorizedFirstName, authorizedLastName)
	ret0, _ := ret[0].(*admin.DataProtectionSettings20231001)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableCompliancePolicy indicates an expected call of EnableCompliancePolicy.
func (mr *MockEnablerMockRecorder) EnableCompliancePolicy(projectID, authorizedEmail, authorizedFirstName, authorizedLastName any) *MockEnablerEnableCompliancePolicyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCompliancePolicy", reflect.TypeOf((*MockEnabler)(nil).EnableCompliancePolicy), projectID, authorizedEmail, authorizedFirstName, authorizedLastName)
	return &MockEnablerEnableCompliancePolicyCall{Call: call}
}

// MockEnablerEnableCompliancePolicyCall wrap *gomock.Call
type MockEnablerEnableCompliancePolicyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnablerEnableCompliancePolicyCall) Return(arg0 *admin.DataProtectionSettings20231001, arg1 error) *MockEnablerEnableCompliancePolicyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnablerEnableCompliancePolicyCall) Do(f func(string, string, string, string) (*admin.DataProtectionSettings20231001, error)) *MockEnablerEnableCompliancePolicyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnablerEnableCompliancePolicyCall) DoAndReturn(f func(string, string, string, string) (*admin.DataProtectionSettings20231001, error)) *MockEnablerEnableCompliancePolicyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
