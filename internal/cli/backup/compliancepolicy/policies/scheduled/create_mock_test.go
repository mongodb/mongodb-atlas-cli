// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/backup/compliancepolicy/policies/scheduled (interfaces: CompliancePolicyScheduledPolicyCreator)
//
// Generated by this command:
//
//	mockgen -typed -destination=create_mock_test.go -package=scheduled . CompliancePolicyScheduledPolicyCreator
//

// Package scheduled is a generated GoMock package.
package scheduled

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockCompliancePolicyScheduledPolicyCreator is a mock of CompliancePolicyScheduledPolicyCreator interface.
type MockCompliancePolicyScheduledPolicyCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCompliancePolicyScheduledPolicyCreatorMockRecorder
	isgomock struct{}
}

// MockCompliancePolicyScheduledPolicyCreatorMockRecorder is the mock recorder for MockCompliancePolicyScheduledPolicyCreator.
type MockCompliancePolicyScheduledPolicyCreatorMockRecorder struct {
	mock *MockCompliancePolicyScheduledPolicyCreator
}

// NewMockCompliancePolicyScheduledPolicyCreator creates a new mock instance.
func NewMockCompliancePolicyScheduledPolicyCreator(ctrl *gomock.Controller) *MockCompliancePolicyScheduledPolicyCreator {
	mock := &MockCompliancePolicyScheduledPolicyCreator{ctrl: ctrl}
	mock.recorder = &MockCompliancePolicyScheduledPolicyCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompliancePolicyScheduledPolicyCreator) EXPECT() *MockCompliancePolicyScheduledPolicyCreatorMockRecorder {
	return m.recorder
}

// CreateScheduledPolicy mocks base method.
func (m *MockCompliancePolicyScheduledPolicyCreator) CreateScheduledPolicy(projectID string, policy *admin.BackupComplianceScheduledPolicyItem) (*admin.DataProtectionSettings20231001, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduledPolicy", projectID, policy)
	ret0, _ := ret[0].(*admin.DataProtectionSettings20231001)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduledPolicy indicates an expected call of CreateScheduledPolicy.
func (mr *MockCompliancePolicyScheduledPolicyCreatorMockRecorder) CreateScheduledPolicy(projectID, policy any) *MockCompliancePolicyScheduledPolicyCreatorCreateScheduledPolicyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduledPolicy", reflect.TypeOf((*MockCompliancePolicyScheduledPolicyCreator)(nil).CreateScheduledPolicy), projectID, policy)
	return &MockCompliancePolicyScheduledPolicyCreatorCreateScheduledPolicyCall{Call: call}
}

// MockCompliancePolicyScheduledPolicyCreatorCreateScheduledPolicyCall wrap *gomock.Call
type MockCompliancePolicyScheduledPolicyCreatorCreateScheduledPolicyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCompliancePolicyScheduledPolicyCreatorCreateScheduledPolicyCall) Return(arg0 *admin.DataProtectionSettings20231001, arg1 error) *MockCompliancePolicyScheduledPolicyCreatorCreateScheduledPolicyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCompliancePolicyScheduledPolicyCreatorCreateScheduledPolicyCall) Do(f func(string, *admin.BackupComplianceScheduledPolicyItem) (*admin.DataProtectionSettings20231001, error)) *MockCompliancePolicyScheduledPolicyCreatorCreateScheduledPolicyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCompliancePolicyScheduledPolicyCreatorCreateScheduledPolicyCall) DoAndReturn(f func(string, *admin.BackupComplianceScheduledPolicyItem) (*admin.DataProtectionSettings20231001, error)) *MockCompliancePolicyScheduledPolicyCreatorCreateScheduledPolicyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DescribeCompliancePolicy mocks base method.
func (m *MockCompliancePolicyScheduledPolicyCreator) DescribeCompliancePolicy(projectID string) (*admin.DataProtectionSettings20231001, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCompliancePolicy", projectID)
	ret0, _ := ret[0].(*admin.DataProtectionSettings20231001)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCompliancePolicy indicates an expected call of DescribeCompliancePolicy.
func (mr *MockCompliancePolicyScheduledPolicyCreatorMockRecorder) DescribeCompliancePolicy(projectID any) *MockCompliancePolicyScheduledPolicyCreatorDescribeCompliancePolicyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCompliancePolicy", reflect.TypeOf((*MockCompliancePolicyScheduledPolicyCreator)(nil).DescribeCompliancePolicy), projectID)
	return &MockCompliancePolicyScheduledPolicyCreatorDescribeCompliancePolicyCall{Call: call}
}

// MockCompliancePolicyScheduledPolicyCreatorDescribeCompliancePolicyCall wrap *gomock.Call
type MockCompliancePolicyScheduledPolicyCreatorDescribeCompliancePolicyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCompliancePolicyScheduledPolicyCreatorDescribeCompliancePolicyCall) Return(arg0 *admin.DataProtectionSettings20231001, arg1 error) *MockCompliancePolicyScheduledPolicyCreatorDescribeCompliancePolicyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCompliancePolicyScheduledPolicyCreatorDescribeCompliancePolicyCall) Do(f func(string) (*admin.DataProtectionSettings20231001, error)) *MockCompliancePolicyScheduledPolicyCreatorDescribeCompliancePolicyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCompliancePolicyScheduledPolicyCreatorDescribeCompliancePolicyCall) DoAndReturn(f func(string) (*admin.DataProtectionSettings20231001, error)) *MockCompliancePolicyScheduledPolicyCreatorDescribeCompliancePolicyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
