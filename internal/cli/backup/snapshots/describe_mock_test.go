// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/backup/snapshots (interfaces: Describer)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=snapshots . Describer
//

// Package snapshots is a generated GoMock package.
package snapshots

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDescriber is a mock of Describer interface.
type MockDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockDescriberMockRecorder
	isgomock struct{}
}

// MockDescriberMockRecorder is the mock recorder for MockDescriber.
type MockDescriberMockRecorder struct {
	mock *MockDescriber
}

// NewMockDescriber creates a new mock instance.
func NewMockDescriber(ctrl *gomock.Controller) *MockDescriber {
	mock := &MockDescriber{ctrl: ctrl}
	mock.recorder = &MockDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriber) EXPECT() *MockDescriberMockRecorder {
	return m.recorder
}

// FlexClusterSnapshot mocks base method.
func (m *MockDescriber) FlexClusterSnapshot(arg0, arg1, arg2 string) (*admin.FlexBackupSnapshot20241113, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexClusterSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.FlexBackupSnapshot20241113)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexClusterSnapshot indicates an expected call of FlexClusterSnapshot.
func (mr *MockDescriberMockRecorder) FlexClusterSnapshot(arg0, arg1, arg2 any) *MockDescriberFlexClusterSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexClusterSnapshot", reflect.TypeOf((*MockDescriber)(nil).FlexClusterSnapshot), arg0, arg1, arg2)
	return &MockDescriberFlexClusterSnapshotCall{Call: call}
}

// MockDescriberFlexClusterSnapshotCall wrap *gomock.Call
type MockDescriberFlexClusterSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDescriberFlexClusterSnapshotCall) Return(arg0 *admin.FlexBackupSnapshot20241113, arg1 error) *MockDescriberFlexClusterSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDescriberFlexClusterSnapshotCall) Do(f func(string, string, string) (*admin.FlexBackupSnapshot20241113, error)) *MockDescriberFlexClusterSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDescriberFlexClusterSnapshotCall) DoAndReturn(f func(string, string, string) (*admin.FlexBackupSnapshot20241113, error)) *MockDescriberFlexClusterSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Snapshot mocks base method.
func (m *MockDescriber) Snapshot(arg0, arg1, arg2 string) (*admin.DiskBackupReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.DiskBackupReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockDescriberMockRecorder) Snapshot(arg0, arg1, arg2 any) *MockDescriberSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockDescriber)(nil).Snapshot), arg0, arg1, arg2)
	return &MockDescriberSnapshotCall{Call: call}
}

// MockDescriberSnapshotCall wrap *gomock.Call
type MockDescriberSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDescriberSnapshotCall) Return(arg0 *admin.DiskBackupReplicaSet, arg1 error) *MockDescriberSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDescriberSnapshotCall) Do(f func(string, string, string) (*admin.DiskBackupReplicaSet, error)) *MockDescriberSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDescriberSnapshotCall) DoAndReturn(f func(string, string, string) (*admin.DiskBackupReplicaSet, error)) *MockDescriberSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
