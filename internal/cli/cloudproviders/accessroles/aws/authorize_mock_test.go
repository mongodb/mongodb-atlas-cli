// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/cloudproviders/accessroles/aws (interfaces: CloudProviderAccessRoleAuthorizer)
//
// Generated by this command:
//
//	mockgen -typed -destination=authorize_mock_test.go -package=aws . CloudProviderAccessRoleAuthorizer
//

// Package aws is a generated GoMock package.
package aws

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudProviderAccessRoleAuthorizer is a mock of CloudProviderAccessRoleAuthorizer interface.
type MockCloudProviderAccessRoleAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderAccessRoleAuthorizerMockRecorder
	isgomock struct{}
}

// MockCloudProviderAccessRoleAuthorizerMockRecorder is the mock recorder for MockCloudProviderAccessRoleAuthorizer.
type MockCloudProviderAccessRoleAuthorizerMockRecorder struct {
	mock *MockCloudProviderAccessRoleAuthorizer
}

// NewMockCloudProviderAccessRoleAuthorizer creates a new mock instance.
func NewMockCloudProviderAccessRoleAuthorizer(ctrl *gomock.Controller) *MockCloudProviderAccessRoleAuthorizer {
	mock := &MockCloudProviderAccessRoleAuthorizer{ctrl: ctrl}
	mock.recorder = &MockCloudProviderAccessRoleAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderAccessRoleAuthorizer) EXPECT() *MockCloudProviderAccessRoleAuthorizerMockRecorder {
	return m.recorder
}

// AuthorizeCloudProviderAccessRole mocks base method.
func (m *MockCloudProviderAccessRoleAuthorizer) AuthorizeCloudProviderAccessRole(arg0, arg1 string, arg2 *admin.CloudProviderAccessRoleRequestUpdate) (*admin.CloudProviderAccessRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeCloudProviderAccessRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.CloudProviderAccessRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizeCloudProviderAccessRole indicates an expected call of AuthorizeCloudProviderAccessRole.
func (mr *MockCloudProviderAccessRoleAuthorizerMockRecorder) AuthorizeCloudProviderAccessRole(arg0, arg1, arg2 any) *MockCloudProviderAccessRoleAuthorizerAuthorizeCloudProviderAccessRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeCloudProviderAccessRole", reflect.TypeOf((*MockCloudProviderAccessRoleAuthorizer)(nil).AuthorizeCloudProviderAccessRole), arg0, arg1, arg2)
	return &MockCloudProviderAccessRoleAuthorizerAuthorizeCloudProviderAccessRoleCall{Call: call}
}

// MockCloudProviderAccessRoleAuthorizerAuthorizeCloudProviderAccessRoleCall wrap *gomock.Call
type MockCloudProviderAccessRoleAuthorizerAuthorizeCloudProviderAccessRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudProviderAccessRoleAuthorizerAuthorizeCloudProviderAccessRoleCall) Return(arg0 *admin.CloudProviderAccessRole, arg1 error) *MockCloudProviderAccessRoleAuthorizerAuthorizeCloudProviderAccessRoleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudProviderAccessRoleAuthorizerAuthorizeCloudProviderAccessRoleCall) Do(f func(string, string, *admin.CloudProviderAccessRoleRequestUpdate) (*admin.CloudProviderAccessRole, error)) *MockCloudProviderAccessRoleAuthorizerAuthorizeCloudProviderAccessRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudProviderAccessRoleAuthorizerAuthorizeCloudProviderAccessRoleCall) DoAndReturn(f func(string, string, *admin.CloudProviderAccessRoleRequestUpdate) (*admin.CloudProviderAccessRole, error)) *MockCloudProviderAccessRoleAuthorizerAuthorizeCloudProviderAccessRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
