// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/cloudproviders/accessroles/aws (interfaces: CloudProviderAccessRoleCreator)
//
// Generated by this command:
//
//	mockgen -typed -destination=create_mock_test.go -package=aws . CloudProviderAccessRoleCreator
//

// Package aws is a generated GoMock package.
package aws

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudProviderAccessRoleCreator is a mock of CloudProviderAccessRoleCreator interface.
type MockCloudProviderAccessRoleCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderAccessRoleCreatorMockRecorder
	isgomock struct{}
}

// MockCloudProviderAccessRoleCreatorMockRecorder is the mock recorder for MockCloudProviderAccessRoleCreator.
type MockCloudProviderAccessRoleCreatorMockRecorder struct {
	mock *MockCloudProviderAccessRoleCreator
}

// NewMockCloudProviderAccessRoleCreator creates a new mock instance.
func NewMockCloudProviderAccessRoleCreator(ctrl *gomock.Controller) *MockCloudProviderAccessRoleCreator {
	mock := &MockCloudProviderAccessRoleCreator{ctrl: ctrl}
	mock.recorder = &MockCloudProviderAccessRoleCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderAccessRoleCreator) EXPECT() *MockCloudProviderAccessRoleCreatorMockRecorder {
	return m.recorder
}

// CreateCloudProviderAccessRole mocks base method.
func (m *MockCloudProviderAccessRoleCreator) CreateCloudProviderAccessRole(arg0, arg1 string) (*admin.CloudProviderAccessRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudProviderAccessRole", arg0, arg1)
	ret0, _ := ret[0].(*admin.CloudProviderAccessRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudProviderAccessRole indicates an expected call of CreateCloudProviderAccessRole.
func (mr *MockCloudProviderAccessRoleCreatorMockRecorder) CreateCloudProviderAccessRole(arg0, arg1 any) *MockCloudProviderAccessRoleCreatorCreateCloudProviderAccessRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudProviderAccessRole", reflect.TypeOf((*MockCloudProviderAccessRoleCreator)(nil).CreateCloudProviderAccessRole), arg0, arg1)
	return &MockCloudProviderAccessRoleCreatorCreateCloudProviderAccessRoleCall{Call: call}
}

// MockCloudProviderAccessRoleCreatorCreateCloudProviderAccessRoleCall wrap *gomock.Call
type MockCloudProviderAccessRoleCreatorCreateCloudProviderAccessRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudProviderAccessRoleCreatorCreateCloudProviderAccessRoleCall) Return(arg0 *admin.CloudProviderAccessRole, arg1 error) *MockCloudProviderAccessRoleCreatorCreateCloudProviderAccessRoleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudProviderAccessRoleCreatorCreateCloudProviderAccessRoleCall) Do(f func(string, string) (*admin.CloudProviderAccessRole, error)) *MockCloudProviderAccessRoleCreatorCreateCloudProviderAccessRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudProviderAccessRoleCreatorCreateCloudProviderAccessRoleCall) DoAndReturn(f func(string, string) (*admin.CloudProviderAccessRole, error)) *MockCloudProviderAccessRoleCreatorCreateCloudProviderAccessRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
