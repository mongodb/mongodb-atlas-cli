// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/cloudproviders/accessroles/aws (interfaces: CloudProviderAccessRoleDeauthorizer)
//
// Generated by this command:
//
//	mockgen -typed -destination=deauthorize_mock_test.go -package=aws . CloudProviderAccessRoleDeauthorizer
//

// Package aws is a generated GoMock package.
package aws

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCloudProviderAccessRoleDeauthorizer is a mock of CloudProviderAccessRoleDeauthorizer interface.
type MockCloudProviderAccessRoleDeauthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderAccessRoleDeauthorizerMockRecorder
	isgomock struct{}
}

// MockCloudProviderAccessRoleDeauthorizerMockRecorder is the mock recorder for MockCloudProviderAccessRoleDeauthorizer.
type MockCloudProviderAccessRoleDeauthorizerMockRecorder struct {
	mock *MockCloudProviderAccessRoleDeauthorizer
}

// NewMockCloudProviderAccessRoleDeauthorizer creates a new mock instance.
func NewMockCloudProviderAccessRoleDeauthorizer(ctrl *gomock.Controller) *MockCloudProviderAccessRoleDeauthorizer {
	mock := &MockCloudProviderAccessRoleDeauthorizer{ctrl: ctrl}
	mock.recorder = &MockCloudProviderAccessRoleDeauthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderAccessRoleDeauthorizer) EXPECT() *MockCloudProviderAccessRoleDeauthorizerMockRecorder {
	return m.recorder
}

// DeauthorizeCloudProviderAccessRoles mocks base method.
func (m *MockCloudProviderAccessRoleDeauthorizer) DeauthorizeCloudProviderAccessRoles(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeauthorizeCloudProviderAccessRoles", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeauthorizeCloudProviderAccessRoles indicates an expected call of DeauthorizeCloudProviderAccessRoles.
func (mr *MockCloudProviderAccessRoleDeauthorizerMockRecorder) DeauthorizeCloudProviderAccessRoles(arg0, arg1, arg2 any) *MockCloudProviderAccessRoleDeauthorizerDeauthorizeCloudProviderAccessRolesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeauthorizeCloudProviderAccessRoles", reflect.TypeOf((*MockCloudProviderAccessRoleDeauthorizer)(nil).DeauthorizeCloudProviderAccessRoles), arg0, arg1, arg2)
	return &MockCloudProviderAccessRoleDeauthorizerDeauthorizeCloudProviderAccessRolesCall{Call: call}
}

// MockCloudProviderAccessRoleDeauthorizerDeauthorizeCloudProviderAccessRolesCall wrap *gomock.Call
type MockCloudProviderAccessRoleDeauthorizerDeauthorizeCloudProviderAccessRolesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudProviderAccessRoleDeauthorizerDeauthorizeCloudProviderAccessRolesCall) Return(arg0 error) *MockCloudProviderAccessRoleDeauthorizerDeauthorizeCloudProviderAccessRolesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudProviderAccessRoleDeauthorizerDeauthorizeCloudProviderAccessRolesCall) Do(f func(string, string, string) error) *MockCloudProviderAccessRoleDeauthorizerDeauthorizeCloudProviderAccessRolesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudProviderAccessRoleDeauthorizerDeauthorizeCloudProviderAccessRolesCall) DoAndReturn(f func(string, string, string) error) *MockCloudProviderAccessRoleDeauthorizerDeauthorizeCloudProviderAccessRolesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
