// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/cloudproviders/accessroles (interfaces: CloudProviderAccessRoleLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=accessroles . CloudProviderAccessRoleLister
//

// Package accessroles is a generated GoMock package.
package accessroles

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudProviderAccessRoleLister is a mock of CloudProviderAccessRoleLister interface.
type MockCloudProviderAccessRoleLister struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderAccessRoleListerMockRecorder
	isgomock struct{}
}

// MockCloudProviderAccessRoleListerMockRecorder is the mock recorder for MockCloudProviderAccessRoleLister.
type MockCloudProviderAccessRoleListerMockRecorder struct {
	mock *MockCloudProviderAccessRoleLister
}

// NewMockCloudProviderAccessRoleLister creates a new mock instance.
func NewMockCloudProviderAccessRoleLister(ctrl *gomock.Controller) *MockCloudProviderAccessRoleLister {
	mock := &MockCloudProviderAccessRoleLister{ctrl: ctrl}
	mock.recorder = &MockCloudProviderAccessRoleListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderAccessRoleLister) EXPECT() *MockCloudProviderAccessRoleListerMockRecorder {
	return m.recorder
}

// CloudProviderAccessRoles mocks base method.
func (m *MockCloudProviderAccessRoleLister) CloudProviderAccessRoles(arg0 string) (*admin.CloudProviderAccessRoles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudProviderAccessRoles", arg0)
	ret0, _ := ret[0].(*admin.CloudProviderAccessRoles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudProviderAccessRoles indicates an expected call of CloudProviderAccessRoles.
func (mr *MockCloudProviderAccessRoleListerMockRecorder) CloudProviderAccessRoles(arg0 any) *MockCloudProviderAccessRoleListerCloudProviderAccessRolesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudProviderAccessRoles", reflect.TypeOf((*MockCloudProviderAccessRoleLister)(nil).CloudProviderAccessRoles), arg0)
	return &MockCloudProviderAccessRoleListerCloudProviderAccessRolesCall{Call: call}
}

// MockCloudProviderAccessRoleListerCloudProviderAccessRolesCall wrap *gomock.Call
type MockCloudProviderAccessRoleListerCloudProviderAccessRolesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudProviderAccessRoleListerCloudProviderAccessRolesCall) Return(arg0 *admin.CloudProviderAccessRoles, arg1 error) *MockCloudProviderAccessRoleListerCloudProviderAccessRolesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudProviderAccessRoleListerCloudProviderAccessRolesCall) Do(f func(string) (*admin.CloudProviderAccessRoles, error)) *MockCloudProviderAccessRoleListerCloudProviderAccessRolesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudProviderAccessRoleListerCloudProviderAccessRolesCall) DoAndReturn(f func(string) (*admin.CloudProviderAccessRoles, error)) *MockCloudProviderAccessRoleListerCloudProviderAccessRolesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
