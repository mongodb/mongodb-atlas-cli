// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/clusters/advancedsettings (interfaces: AtlasClusterConfigurationOptionsUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=advancedsettings . AtlasClusterConfigurationOptionsUpdater
//

// Package advancedsettings is a generated GoMock package.
package advancedsettings

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20240530005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockAtlasClusterConfigurationOptionsUpdater is a mock of AtlasClusterConfigurationOptionsUpdater interface.
type MockAtlasClusterConfigurationOptionsUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockAtlasClusterConfigurationOptionsUpdaterMockRecorder
	isgomock struct{}
}

// MockAtlasClusterConfigurationOptionsUpdaterMockRecorder is the mock recorder for MockAtlasClusterConfigurationOptionsUpdater.
type MockAtlasClusterConfigurationOptionsUpdaterMockRecorder struct {
	mock *MockAtlasClusterConfigurationOptionsUpdater
}

// NewMockAtlasClusterConfigurationOptionsUpdater creates a new mock instance.
func NewMockAtlasClusterConfigurationOptionsUpdater(ctrl *gomock.Controller) *MockAtlasClusterConfigurationOptionsUpdater {
	mock := &MockAtlasClusterConfigurationOptionsUpdater{ctrl: ctrl}
	mock.recorder = &MockAtlasClusterConfigurationOptionsUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtlasClusterConfigurationOptionsUpdater) EXPECT() *MockAtlasClusterConfigurationOptionsUpdaterMockRecorder {
	return m.recorder
}

// UpdateAtlasClusterConfigurationOptions mocks base method.
func (m *MockAtlasClusterConfigurationOptionsUpdater) UpdateAtlasClusterConfigurationOptions(arg0, arg1 string, arg2 *admin.ClusterDescriptionProcessArgs) (*admin.ClusterDescriptionProcessArgs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAtlasClusterConfigurationOptions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.ClusterDescriptionProcessArgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAtlasClusterConfigurationOptions indicates an expected call of UpdateAtlasClusterConfigurationOptions.
func (mr *MockAtlasClusterConfigurationOptionsUpdaterMockRecorder) UpdateAtlasClusterConfigurationOptions(arg0, arg1, arg2 any) *MockAtlasClusterConfigurationOptionsUpdaterUpdateAtlasClusterConfigurationOptionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAtlasClusterConfigurationOptions", reflect.TypeOf((*MockAtlasClusterConfigurationOptionsUpdater)(nil).UpdateAtlasClusterConfigurationOptions), arg0, arg1, arg2)
	return &MockAtlasClusterConfigurationOptionsUpdaterUpdateAtlasClusterConfigurationOptionsCall{Call: call}
}

// MockAtlasClusterConfigurationOptionsUpdaterUpdateAtlasClusterConfigurationOptionsCall wrap *gomock.Call
type MockAtlasClusterConfigurationOptionsUpdaterUpdateAtlasClusterConfigurationOptionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterConfigurationOptionsUpdaterUpdateAtlasClusterConfigurationOptionsCall) Return(arg0 *admin.ClusterDescriptionProcessArgs, arg1 error) *MockAtlasClusterConfigurationOptionsUpdaterUpdateAtlasClusterConfigurationOptionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterConfigurationOptionsUpdaterUpdateAtlasClusterConfigurationOptionsCall) Do(f func(string, string, *admin.ClusterDescriptionProcessArgs) (*admin.ClusterDescriptionProcessArgs, error)) *MockAtlasClusterConfigurationOptionsUpdaterUpdateAtlasClusterConfigurationOptionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterConfigurationOptionsUpdaterUpdateAtlasClusterConfigurationOptionsCall) DoAndReturn(f func(string, string, *admin.ClusterDescriptionProcessArgs) (*admin.ClusterDescriptionProcessArgs, error)) *MockAtlasClusterConfigurationOptionsUpdaterUpdateAtlasClusterConfigurationOptionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
