// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/clusters/availableregions (interfaces: CloudProviderRegionsLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_autocomplete_mock_test.go -package=availableregions . CloudProviderRegionsLister
//

// Package availableregions is a generated GoMock package.
package availableregions

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudProviderRegionsLister is a mock of CloudProviderRegionsLister interface.
type MockCloudProviderRegionsLister struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderRegionsListerMockRecorder
	isgomock struct{}
}

// MockCloudProviderRegionsListerMockRecorder is the mock recorder for MockCloudProviderRegionsLister.
type MockCloudProviderRegionsListerMockRecorder struct {
	mock *MockCloudProviderRegionsLister
}

// NewMockCloudProviderRegionsLister creates a new mock instance.
func NewMockCloudProviderRegionsLister(ctrl *gomock.Controller) *MockCloudProviderRegionsLister {
	mock := &MockCloudProviderRegionsLister{ctrl: ctrl}
	mock.recorder = &MockCloudProviderRegionsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudProviderRegionsLister) EXPECT() *MockCloudProviderRegionsListerMockRecorder {
	return m.recorder
}

// CloudProviderRegions mocks base method.
func (m *MockCloudProviderRegionsLister) CloudProviderRegions(arg0, arg1 string, arg2 []string) (*admin.PaginatedApiAtlasProviderRegions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudProviderRegions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.PaginatedApiAtlasProviderRegions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudProviderRegions indicates an expected call of CloudProviderRegions.
func (mr *MockCloudProviderRegionsListerMockRecorder) CloudProviderRegions(arg0, arg1, arg2 any) *MockCloudProviderRegionsListerCloudProviderRegionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudProviderRegions", reflect.TypeOf((*MockCloudProviderRegionsLister)(nil).CloudProviderRegions), arg0, arg1, arg2)
	return &MockCloudProviderRegionsListerCloudProviderRegionsCall{Call: call}
}

// MockCloudProviderRegionsListerCloudProviderRegionsCall wrap *gomock.Call
type MockCloudProviderRegionsListerCloudProviderRegionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudProviderRegionsListerCloudProviderRegionsCall) Return(arg0 *admin.PaginatedApiAtlasProviderRegions, arg1 error) *MockCloudProviderRegionsListerCloudProviderRegionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudProviderRegionsListerCloudProviderRegionsCall) Do(f func(string, string, []string) (*admin.PaginatedApiAtlasProviderRegions, error)) *MockCloudProviderRegionsListerCloudProviderRegionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudProviderRegionsListerCloudProviderRegionsCall) DoAndReturn(f func(string, string, []string) (*admin.PaginatedApiAtlasProviderRegions, error)) *MockCloudProviderRegionsListerCloudProviderRegionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
