// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/clusters (interfaces: SampleDataAdder)
//
// Generated by this command:
//
//	mockgen -typed -destination=load_sample_data_mock_test.go -package=clusters . SampleDataAdder
//

// Package clusters is a generated GoMock package.
package clusters

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockSampleDataAdder is a mock of SampleDataAdder interface.
type MockSampleDataAdder struct {
	ctrl     *gomock.Controller
	recorder *MockSampleDataAdderMockRecorder
	isgomock struct{}
}

// MockSampleDataAdderMockRecorder is the mock recorder for MockSampleDataAdder.
type MockSampleDataAdderMockRecorder struct {
	mock *MockSampleDataAdder
}

// NewMockSampleDataAdder creates a new mock instance.
func NewMockSampleDataAdder(ctrl *gomock.Controller) *MockSampleDataAdder {
	mock := &MockSampleDataAdder{ctrl: ctrl}
	mock.recorder = &MockSampleDataAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSampleDataAdder) EXPECT() *MockSampleDataAdderMockRecorder {
	return m.recorder
}

// AddSampleData mocks base method.
func (m *MockSampleDataAdder) AddSampleData(arg0, arg1 string) (*admin.SampleDatasetStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSampleData", arg0, arg1)
	ret0, _ := ret[0].(*admin.SampleDatasetStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSampleData indicates an expected call of AddSampleData.
func (mr *MockSampleDataAdderMockRecorder) AddSampleData(arg0, arg1 any) *MockSampleDataAdderAddSampleDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSampleData", reflect.TypeOf((*MockSampleDataAdder)(nil).AddSampleData), arg0, arg1)
	return &MockSampleDataAdderAddSampleDataCall{Call: call}
}

// MockSampleDataAdderAddSampleDataCall wrap *gomock.Call
type MockSampleDataAdderAddSampleDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSampleDataAdderAddSampleDataCall) Return(arg0 *admin.SampleDatasetStatus, arg1 error) *MockSampleDataAdderAddSampleDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSampleDataAdderAddSampleDataCall) Do(f func(string, string) (*admin.SampleDatasetStatus, error)) *MockSampleDataAdderAddSampleDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSampleDataAdderAddSampleDataCall) DoAndReturn(f func(string, string) (*admin.SampleDatasetStatus, error)) *MockSampleDataAdderAddSampleDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
