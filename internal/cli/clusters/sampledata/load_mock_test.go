// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/clusters/sampledata (interfaces: Adder)
//
// Generated by this command:
//
//	mockgen -typed -destination=load_mock_test.go -package=sampledata . Adder
//

// Package sampledata is a generated GoMock package.
package sampledata

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockAdder is a mock of Adder interface.
type MockAdder struct {
	ctrl     *gomock.Controller
	recorder *MockAdderMockRecorder
	isgomock struct{}
}

// MockAdderMockRecorder is the mock recorder for MockAdder.
type MockAdderMockRecorder struct {
	mock *MockAdder
}

// NewMockAdder creates a new mock instance.
func NewMockAdder(ctrl *gomock.Controller) *MockAdder {
	mock := &MockAdder{ctrl: ctrl}
	mock.recorder = &MockAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdder) EXPECT() *MockAdderMockRecorder {
	return m.recorder
}

// AddSampleData mocks base method.
func (m *MockAdder) AddSampleData(arg0, arg1 string) (*admin.SampleDatasetStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSampleData", arg0, arg1)
	ret0, _ := ret[0].(*admin.SampleDatasetStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSampleData indicates an expected call of AddSampleData.
func (mr *MockAdderMockRecorder) AddSampleData(arg0, arg1 any) *MockAdderAddSampleDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSampleData", reflect.TypeOf((*MockAdder)(nil).AddSampleData), arg0, arg1)
	return &MockAdderAddSampleDataCall{Call: call}
}

// MockAdderAddSampleDataCall wrap *gomock.Call
type MockAdderAddSampleDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAdderAddSampleDataCall) Return(arg0 *admin.SampleDatasetStatus, arg1 error) *MockAdderAddSampleDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAdderAddSampleDataCall) Do(f func(string, string) (*admin.SampleDatasetStatus, error)) *MockAdderAddSampleDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAdderAddSampleDataCall) DoAndReturn(f func(string, string) (*admin.SampleDatasetStatus, error)) *MockAdderAddSampleDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
