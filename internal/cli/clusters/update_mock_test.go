// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/clusters (interfaces: AtlasClusterGetterUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=clusters . AtlasClusterGetterUpdater
//

// Package clusters is a generated GoMock package.
package clusters

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20240530005/admin"
	admin0 "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockAtlasClusterGetterUpdater is a mock of AtlasClusterGetterUpdater interface.
type MockAtlasClusterGetterUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockAtlasClusterGetterUpdaterMockRecorder
	isgomock struct{}
}

// MockAtlasClusterGetterUpdaterMockRecorder is the mock recorder for MockAtlasClusterGetterUpdater.
type MockAtlasClusterGetterUpdaterMockRecorder struct {
	mock *MockAtlasClusterGetterUpdater
}

// NewMockAtlasClusterGetterUpdater creates a new mock instance.
func NewMockAtlasClusterGetterUpdater(ctrl *gomock.Controller) *MockAtlasClusterGetterUpdater {
	mock := &MockAtlasClusterGetterUpdater{ctrl: ctrl}
	mock.recorder = &MockAtlasClusterGetterUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtlasClusterGetterUpdater) EXPECT() *MockAtlasClusterGetterUpdaterMockRecorder {
	return m.recorder
}

// AtlasCluster mocks base method.
func (m *MockAtlasClusterGetterUpdater) AtlasCluster(arg0, arg1 string) (*admin.AdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtlasCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin.AdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtlasCluster indicates an expected call of AtlasCluster.
func (mr *MockAtlasClusterGetterUpdaterMockRecorder) AtlasCluster(arg0, arg1 any) *MockAtlasClusterGetterUpdaterAtlasClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtlasCluster", reflect.TypeOf((*MockAtlasClusterGetterUpdater)(nil).AtlasCluster), arg0, arg1)
	return &MockAtlasClusterGetterUpdaterAtlasClusterCall{Call: call}
}

// MockAtlasClusterGetterUpdaterAtlasClusterCall wrap *gomock.Call
type MockAtlasClusterGetterUpdaterAtlasClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterGetterUpdaterAtlasClusterCall) Return(arg0 *admin.AdvancedClusterDescription, arg1 error) *MockAtlasClusterGetterUpdaterAtlasClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterGetterUpdaterAtlasClusterCall) Do(f func(string, string) (*admin.AdvancedClusterDescription, error)) *MockAtlasClusterGetterUpdaterAtlasClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterGetterUpdaterAtlasClusterCall) DoAndReturn(f func(string, string) (*admin.AdvancedClusterDescription, error)) *MockAtlasClusterGetterUpdaterAtlasClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FlexCluster mocks base method.
func (m *MockAtlasClusterGetterUpdater) FlexCluster(arg0, arg1 string) (*admin0.FlexClusterDescription20241113, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin0.FlexClusterDescription20241113)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexCluster indicates an expected call of FlexCluster.
func (mr *MockAtlasClusterGetterUpdaterMockRecorder) FlexCluster(arg0, arg1 any) *MockAtlasClusterGetterUpdaterFlexClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexCluster", reflect.TypeOf((*MockAtlasClusterGetterUpdater)(nil).FlexCluster), arg0, arg1)
	return &MockAtlasClusterGetterUpdaterFlexClusterCall{Call: call}
}

// MockAtlasClusterGetterUpdaterFlexClusterCall wrap *gomock.Call
type MockAtlasClusterGetterUpdaterFlexClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterGetterUpdaterFlexClusterCall) Return(arg0 *admin0.FlexClusterDescription20241113, arg1 error) *MockAtlasClusterGetterUpdaterFlexClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterGetterUpdaterFlexClusterCall) Do(f func(string, string) (*admin0.FlexClusterDescription20241113, error)) *MockAtlasClusterGetterUpdaterFlexClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterGetterUpdaterFlexClusterCall) DoAndReturn(f func(string, string) (*admin0.FlexClusterDescription20241113, error)) *MockAtlasClusterGetterUpdaterFlexClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetClusterAutoScalingConfig mocks base method.
func (m *MockAtlasClusterGetterUpdater) GetClusterAutoScalingConfig(arg0, arg1 string) (*admin0.ClusterDescriptionAutoScalingModeConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterAutoScalingConfig", arg0, arg1)
	ret0, _ := ret[0].(*admin0.ClusterDescriptionAutoScalingModeConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterAutoScalingConfig indicates an expected call of GetClusterAutoScalingConfig.
func (mr *MockAtlasClusterGetterUpdaterMockRecorder) GetClusterAutoScalingConfig(arg0, arg1 any) *MockAtlasClusterGetterUpdaterGetClusterAutoScalingConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterAutoScalingConfig", reflect.TypeOf((*MockAtlasClusterGetterUpdater)(nil).GetClusterAutoScalingConfig), arg0, arg1)
	return &MockAtlasClusterGetterUpdaterGetClusterAutoScalingConfigCall{Call: call}
}

// MockAtlasClusterGetterUpdaterGetClusterAutoScalingConfigCall wrap *gomock.Call
type MockAtlasClusterGetterUpdaterGetClusterAutoScalingConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterGetterUpdaterGetClusterAutoScalingConfigCall) Return(arg0 *admin0.ClusterDescriptionAutoScalingModeConfiguration, arg1 error) *MockAtlasClusterGetterUpdaterGetClusterAutoScalingConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterGetterUpdaterGetClusterAutoScalingConfigCall) Do(f func(string, string) (*admin0.ClusterDescriptionAutoScalingModeConfiguration, error)) *MockAtlasClusterGetterUpdaterGetClusterAutoScalingConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterGetterUpdaterGetClusterAutoScalingConfigCall) DoAndReturn(f func(string, string) (*admin0.ClusterDescriptionAutoScalingModeConfiguration, error)) *MockAtlasClusterGetterUpdaterGetClusterAutoScalingConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LatestAtlasCluster mocks base method.
func (m *MockAtlasClusterGetterUpdater) LatestAtlasCluster(arg0, arg1 string) (*admin0.ClusterDescription20240805, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestAtlasCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin0.ClusterDescription20240805)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestAtlasCluster indicates an expected call of LatestAtlasCluster.
func (mr *MockAtlasClusterGetterUpdaterMockRecorder) LatestAtlasCluster(arg0, arg1 any) *MockAtlasClusterGetterUpdaterLatestAtlasClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestAtlasCluster", reflect.TypeOf((*MockAtlasClusterGetterUpdater)(nil).LatestAtlasCluster), arg0, arg1)
	return &MockAtlasClusterGetterUpdaterLatestAtlasClusterCall{Call: call}
}

// MockAtlasClusterGetterUpdaterLatestAtlasClusterCall wrap *gomock.Call
type MockAtlasClusterGetterUpdaterLatestAtlasClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterGetterUpdaterLatestAtlasClusterCall) Return(arg0 *admin0.ClusterDescription20240805, arg1 error) *MockAtlasClusterGetterUpdaterLatestAtlasClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterGetterUpdaterLatestAtlasClusterCall) Do(f func(string, string) (*admin0.ClusterDescription20240805, error)) *MockAtlasClusterGetterUpdaterLatestAtlasClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterGetterUpdaterLatestAtlasClusterCall) DoAndReturn(f func(string, string) (*admin0.ClusterDescription20240805, error)) *MockAtlasClusterGetterUpdaterLatestAtlasClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCluster mocks base method.
func (m *MockAtlasClusterGetterUpdater) UpdateCluster(arg0, arg1 string, arg2 *admin.AdvancedClusterDescription) (*admin.AdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.AdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockAtlasClusterGetterUpdaterMockRecorder) UpdateCluster(arg0, arg1, arg2 any) *MockAtlasClusterGetterUpdaterUpdateClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockAtlasClusterGetterUpdater)(nil).UpdateCluster), arg0, arg1, arg2)
	return &MockAtlasClusterGetterUpdaterUpdateClusterCall{Call: call}
}

// MockAtlasClusterGetterUpdaterUpdateClusterCall wrap *gomock.Call
type MockAtlasClusterGetterUpdaterUpdateClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterGetterUpdaterUpdateClusterCall) Return(arg0 *admin.AdvancedClusterDescription, arg1 error) *MockAtlasClusterGetterUpdaterUpdateClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterGetterUpdaterUpdateClusterCall) Do(f func(string, string, *admin.AdvancedClusterDescription) (*admin.AdvancedClusterDescription, error)) *MockAtlasClusterGetterUpdaterUpdateClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterGetterUpdaterUpdateClusterCall) DoAndReturn(f func(string, string, *admin.AdvancedClusterDescription) (*admin.AdvancedClusterDescription, error)) *MockAtlasClusterGetterUpdaterUpdateClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateClusterLatest mocks base method.
func (m *MockAtlasClusterGetterUpdater) UpdateClusterLatest(arg0, arg1 string, arg2 *admin0.ClusterDescription20240805) (*admin0.ClusterDescription20240805, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterLatest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin0.ClusterDescription20240805)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterLatest indicates an expected call of UpdateClusterLatest.
func (mr *MockAtlasClusterGetterUpdaterMockRecorder) UpdateClusterLatest(arg0, arg1, arg2 any) *MockAtlasClusterGetterUpdaterUpdateClusterLatestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterLatest", reflect.TypeOf((*MockAtlasClusterGetterUpdater)(nil).UpdateClusterLatest), arg0, arg1, arg2)
	return &MockAtlasClusterGetterUpdaterUpdateClusterLatestCall{Call: call}
}

// MockAtlasClusterGetterUpdaterUpdateClusterLatestCall wrap *gomock.Call
type MockAtlasClusterGetterUpdaterUpdateClusterLatestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterGetterUpdaterUpdateClusterLatestCall) Return(arg0 *admin0.ClusterDescription20240805, arg1 error) *MockAtlasClusterGetterUpdaterUpdateClusterLatestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterGetterUpdaterUpdateClusterLatestCall) Do(f func(string, string, *admin0.ClusterDescription20240805) (*admin0.ClusterDescription20240805, error)) *MockAtlasClusterGetterUpdaterUpdateClusterLatestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterGetterUpdaterUpdateClusterLatestCall) DoAndReturn(f func(string, string, *admin0.ClusterDescription20240805) (*admin0.ClusterDescription20240805, error)) *MockAtlasClusterGetterUpdaterUpdateClusterLatestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateFlexCluster mocks base method.
func (m *MockAtlasClusterGetterUpdater) UpdateFlexCluster(arg0, arg1 string, arg2 *admin0.FlexClusterDescriptionUpdate20241113) (*admin0.FlexClusterDescription20241113, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlexCluster", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin0.FlexClusterDescription20241113)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlexCluster indicates an expected call of UpdateFlexCluster.
func (mr *MockAtlasClusterGetterUpdaterMockRecorder) UpdateFlexCluster(arg0, arg1, arg2 any) *MockAtlasClusterGetterUpdaterUpdateFlexClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlexCluster", reflect.TypeOf((*MockAtlasClusterGetterUpdater)(nil).UpdateFlexCluster), arg0, arg1, arg2)
	return &MockAtlasClusterGetterUpdaterUpdateFlexClusterCall{Call: call}
}

// MockAtlasClusterGetterUpdaterUpdateFlexClusterCall wrap *gomock.Call
type MockAtlasClusterGetterUpdaterUpdateFlexClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterGetterUpdaterUpdateFlexClusterCall) Return(arg0 *admin0.FlexClusterDescription20241113, arg1 error) *MockAtlasClusterGetterUpdaterUpdateFlexClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterGetterUpdaterUpdateFlexClusterCall) Do(f func(string, string, *admin0.FlexClusterDescriptionUpdate20241113) (*admin0.FlexClusterDescription20241113, error)) *MockAtlasClusterGetterUpdaterUpdateFlexClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterGetterUpdaterUpdateFlexClusterCall) DoAndReturn(f func(string, string, *admin0.FlexClusterDescriptionUpdate20241113) (*admin0.FlexClusterDescription20241113, error)) *MockAtlasClusterGetterUpdaterUpdateFlexClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
