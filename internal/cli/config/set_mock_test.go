// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/config (interfaces: SetSaver)
//
// Generated by this command:
//
//	mockgen -typed -destination=set_mock_test.go -package=config . SetSaver
//

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSetSaver is a mock of SetSaver interface.
type MockSetSaver struct {
	ctrl     *gomock.Controller
	recorder *MockSetSaverMockRecorder
	isgomock struct{}
}

// MockSetSaverMockRecorder is the mock recorder for MockSetSaver.
type MockSetSaverMockRecorder struct {
	mock *MockSetSaver
}

// NewMockSetSaver creates a new mock instance.
func NewMockSetSaver(ctrl *gomock.Controller) *MockSetSaver {
	mock := &MockSetSaver{ctrl: ctrl}
	mock.recorder = &MockSetSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetSaver) EXPECT() *MockSetSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockSetSaver) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSetSaverMockRecorder) Save() *MockSetSaverSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSetSaver)(nil).Save))
	return &MockSetSaverSaveCall{Call: call}
}

// MockSetSaverSaveCall wrap *gomock.Call
type MockSetSaverSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSetSaverSaveCall) Return(arg0 error) *MockSetSaverSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSetSaverSaveCall) Do(f func() error) *MockSetSaverSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSetSaverSaveCall) DoAndReturn(f func() error) *MockSetSaverSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockSetSaver) Set(arg0 string, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1)
}

// Set indicates an expected call of Set.
func (mr *MockSetSaverMockRecorder) Set(arg0, arg1 any) *MockSetSaverSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSetSaver)(nil).Set), arg0, arg1)
	return &MockSetSaverSetCall{Call: call}
}

// MockSetSaverSetCall wrap *gomock.Call
type MockSetSaverSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSetSaverSetCall) Return() *MockSetSaverSetCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSetSaverSetCall) Do(f func(string, any)) *MockSetSaverSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSetSaverSetCall) DoAndReturn(f func(string, any)) *MockSetSaverSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetGlobal mocks base method.
func (m *MockSetSaver) SetGlobal(arg0 string, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGlobal", arg0, arg1)
}

// SetGlobal indicates an expected call of SetGlobal.
func (mr *MockSetSaverMockRecorder) SetGlobal(arg0, arg1 any) *MockSetSaverSetGlobalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobal", reflect.TypeOf((*MockSetSaver)(nil).SetGlobal), arg0, arg1)
	return &MockSetSaverSetGlobalCall{Call: call}
}

// MockSetSaverSetGlobalCall wrap *gomock.Call
type MockSetSaverSetGlobalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSetSaverSetGlobalCall) Return() *MockSetSaverSetGlobalCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSetSaverSetGlobalCall) Do(f func(string, any)) *MockSetSaverSetGlobalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSetSaverSetGlobalCall) DoAndReturn(f func(string, any)) *MockSetSaverSetGlobalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
