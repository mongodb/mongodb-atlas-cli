// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/customdbroles (interfaces: DatabaseRoleDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=customdbroles . DatabaseRoleDescriber
//

// Package customdbroles is a generated GoMock package.
package customdbroles

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseRoleDescriber is a mock of DatabaseRoleDescriber interface.
type MockDatabaseRoleDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRoleDescriberMockRecorder
	isgomock struct{}
}

// MockDatabaseRoleDescriberMockRecorder is the mock recorder for MockDatabaseRoleDescriber.
type MockDatabaseRoleDescriberMockRecorder struct {
	mock *MockDatabaseRoleDescriber
}

// NewMockDatabaseRoleDescriber creates a new mock instance.
func NewMockDatabaseRoleDescriber(ctrl *gomock.Controller) *MockDatabaseRoleDescriber {
	mock := &MockDatabaseRoleDescriber{ctrl: ctrl}
	mock.recorder = &MockDatabaseRoleDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRoleDescriber) EXPECT() *MockDatabaseRoleDescriberMockRecorder {
	return m.recorder
}

// DatabaseRole mocks base method.
func (m *MockDatabaseRoleDescriber) DatabaseRole(arg0, arg1 string) (*admin.UserCustomDBRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseRole", arg0, arg1)
	ret0, _ := ret[0].(*admin.UserCustomDBRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseRole indicates an expected call of DatabaseRole.
func (mr *MockDatabaseRoleDescriberMockRecorder) DatabaseRole(arg0, arg1 any) *MockDatabaseRoleDescriberDatabaseRoleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseRole", reflect.TypeOf((*MockDatabaseRoleDescriber)(nil).DatabaseRole), arg0, arg1)
	return &MockDatabaseRoleDescriberDatabaseRoleCall{Call: call}
}

// MockDatabaseRoleDescriberDatabaseRoleCall wrap *gomock.Call
type MockDatabaseRoleDescriberDatabaseRoleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseRoleDescriberDatabaseRoleCall) Return(arg0 *admin.UserCustomDBRole, arg1 error) *MockDatabaseRoleDescriberDatabaseRoleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseRoleDescriberDatabaseRoleCall) Do(f func(string, string) (*admin.UserCustomDBRole, error)) *MockDatabaseRoleDescriberDatabaseRoleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseRoleDescriberDatabaseRoleCall) DoAndReturn(f func(string, string) (*admin.UserCustomDBRole, error)) *MockDatabaseRoleDescriberDatabaseRoleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
