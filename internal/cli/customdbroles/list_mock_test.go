// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/customdbroles (interfaces: DatabaseRoleLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=customdbroles . DatabaseRoleLister
//

// Package customdbroles is a generated GoMock package.
package customdbroles

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseRoleLister is a mock of DatabaseRoleLister interface.
type MockDatabaseRoleLister struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRoleListerMockRecorder
	isgomock struct{}
}

// MockDatabaseRoleListerMockRecorder is the mock recorder for MockDatabaseRoleLister.
type MockDatabaseRoleListerMockRecorder struct {
	mock *MockDatabaseRoleLister
}

// NewMockDatabaseRoleLister creates a new mock instance.
func NewMockDatabaseRoleLister(ctrl *gomock.Controller) *MockDatabaseRoleLister {
	mock := &MockDatabaseRoleLister{ctrl: ctrl}
	mock.recorder = &MockDatabaseRoleListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRoleLister) EXPECT() *MockDatabaseRoleListerMockRecorder {
	return m.recorder
}

// DatabaseRoles mocks base method.
func (m *MockDatabaseRoleLister) DatabaseRoles(arg0 string) ([]admin.UserCustomDBRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseRoles", arg0)
	ret0, _ := ret[0].([]admin.UserCustomDBRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseRoles indicates an expected call of DatabaseRoles.
func (mr *MockDatabaseRoleListerMockRecorder) DatabaseRoles(arg0 any) *MockDatabaseRoleListerDatabaseRolesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseRoles", reflect.TypeOf((*MockDatabaseRoleLister)(nil).DatabaseRoles), arg0)
	return &MockDatabaseRoleListerDatabaseRolesCall{Call: call}
}

// MockDatabaseRoleListerDatabaseRolesCall wrap *gomock.Call
type MockDatabaseRoleListerDatabaseRolesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseRoleListerDatabaseRolesCall) Return(arg0 []admin.UserCustomDBRole, arg1 error) *MockDatabaseRoleListerDatabaseRolesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseRoleListerDatabaseRolesCall) Do(f func(string) ([]admin.UserCustomDBRole, error)) *MockDatabaseRoleListerDatabaseRolesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseRoleListerDatabaseRolesCall) DoAndReturn(f func(string) ([]admin.UserCustomDBRole, error)) *MockDatabaseRoleListerDatabaseRolesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
