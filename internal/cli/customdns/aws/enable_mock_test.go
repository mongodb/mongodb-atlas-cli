// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/customdns/aws (interfaces: CustomDNSEnabler)
//
// Generated by this command:
//
//	mockgen -typed -destination=enable_mock_test.go -package=aws . CustomDNSEnabler
//

// Package aws is a generated GoMock package.
package aws

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomDNSEnabler is a mock of CustomDNSEnabler interface.
type MockCustomDNSEnabler struct {
	ctrl     *gomock.Controller
	recorder *MockCustomDNSEnablerMockRecorder
	isgomock struct{}
}

// MockCustomDNSEnablerMockRecorder is the mock recorder for MockCustomDNSEnabler.
type MockCustomDNSEnablerMockRecorder struct {
	mock *MockCustomDNSEnabler
}

// NewMockCustomDNSEnabler creates a new mock instance.
func NewMockCustomDNSEnabler(ctrl *gomock.Controller) *MockCustomDNSEnabler {
	mock := &MockCustomDNSEnabler{ctrl: ctrl}
	mock.recorder = &MockCustomDNSEnablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomDNSEnabler) EXPECT() *MockCustomDNSEnablerMockRecorder {
	return m.recorder
}

// EnableCustomDNS mocks base method.
func (m *MockCustomDNSEnabler) EnableCustomDNS(arg0 string) (*admin.AWSCustomDNSEnabled, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCustomDNS", arg0)
	ret0, _ := ret[0].(*admin.AWSCustomDNSEnabled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableCustomDNS indicates an expected call of EnableCustomDNS.
func (mr *MockCustomDNSEnablerMockRecorder) EnableCustomDNS(arg0 any) *MockCustomDNSEnablerEnableCustomDNSCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCustomDNS", reflect.TypeOf((*MockCustomDNSEnabler)(nil).EnableCustomDNS), arg0)
	return &MockCustomDNSEnablerEnableCustomDNSCall{Call: call}
}

// MockCustomDNSEnablerEnableCustomDNSCall wrap *gomock.Call
type MockCustomDNSEnablerEnableCustomDNSCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCustomDNSEnablerEnableCustomDNSCall) Return(arg0 *admin.AWSCustomDNSEnabled, arg1 error) *MockCustomDNSEnablerEnableCustomDNSCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCustomDNSEnablerEnableCustomDNSCall) Do(f func(string) (*admin.AWSCustomDNSEnabled, error)) *MockCustomDNSEnablerEnableCustomDNSCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCustomDNSEnablerEnableCustomDNSCall) DoAndReturn(f func(string) (*admin.AWSCustomDNSEnabled, error)) *MockCustomDNSEnablerEnableCustomDNSCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
