// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datafederation (interfaces: Lister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=datafederation . Lister
//

// Package datafederation is a generated GoMock package.
package datafederation

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockLister is a mock of Lister interface.
type MockLister struct {
	ctrl     *gomock.Controller
	recorder *MockListerMockRecorder
	isgomock struct{}
}

// MockListerMockRecorder is the mock recorder for MockLister.
type MockListerMockRecorder struct {
	mock *MockLister
}

// NewMockLister creates a new mock instance.
func NewMockLister(ctrl *gomock.Controller) *MockLister {
	mock := &MockLister{ctrl: ctrl}
	mock.recorder = &MockListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLister) EXPECT() *MockListerMockRecorder {
	return m.recorder
}

// DataFederationList mocks base method.
func (m *MockLister) DataFederationList(arg0 string) ([]admin.DataLakeTenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataFederationList", arg0)
	ret0, _ := ret[0].([]admin.DataLakeTenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataFederationList indicates an expected call of DataFederationList.
func (mr *MockListerMockRecorder) DataFederationList(arg0 any) *MockListerDataFederationListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataFederationList", reflect.TypeOf((*MockLister)(nil).DataFederationList), arg0)
	return &MockListerDataFederationListCall{Call: call}
}

// MockListerDataFederationListCall wrap *gomock.Call
type MockListerDataFederationListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListerDataFederationListCall) Return(arg0 []admin.DataLakeTenant, arg1 error) *MockListerDataFederationListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListerDataFederationListCall) Do(f func(string) ([]admin.DataLakeTenant, error)) *MockListerDataFederationListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListerDataFederationListCall) DoAndReturn(f func(string) ([]admin.DataLakeTenant, error)) *MockListerDataFederationListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
