// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datafederation (interfaces: LogDownloader)
//
// Generated by this command:
//
//	mockgen -typed -destination=logs_mock_test.go -package=datafederation . LogDownloader
//

// Package datafederation is a generated GoMock package.
package datafederation

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogDownloader is a mock of LogDownloader interface.
type MockLogDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockLogDownloaderMockRecorder
	isgomock struct{}
}

// MockLogDownloaderMockRecorder is the mock recorder for MockLogDownloader.
type MockLogDownloaderMockRecorder struct {
	mock *MockLogDownloader
}

// NewMockLogDownloader creates a new mock instance.
func NewMockLogDownloader(ctrl *gomock.Controller) *MockLogDownloader {
	mock := &MockLogDownloader{ctrl: ctrl}
	mock.recorder = &MockLogDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogDownloader) EXPECT() *MockLogDownloaderMockRecorder {
	return m.recorder
}

// DataFederationLogs mocks base method.
func (m *MockLogDownloader) DataFederationLogs(arg0, arg1 string, arg2, arg3 int64) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataFederationLogs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataFederationLogs indicates an expected call of DataFederationLogs.
func (mr *MockLogDownloaderMockRecorder) DataFederationLogs(arg0, arg1, arg2, arg3 any) *MockLogDownloaderDataFederationLogsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataFederationLogs", reflect.TypeOf((*MockLogDownloader)(nil).DataFederationLogs), arg0, arg1, arg2, arg3)
	return &MockLogDownloaderDataFederationLogsCall{Call: call}
}

// MockLogDownloaderDataFederationLogsCall wrap *gomock.Call
type MockLogDownloaderDataFederationLogsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLogDownloaderDataFederationLogsCall) Return(arg0 io.ReadCloser, arg1 error) *MockLogDownloaderDataFederationLogsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLogDownloaderDataFederationLogsCall) Do(f func(string, string, int64, int64) (io.ReadCloser, error)) *MockLogDownloaderDataFederationLogsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLogDownloaderDataFederationLogsCall) DoAndReturn(f func(string, string, int64, int64) (io.ReadCloser, error)) *MockLogDownloaderDataFederationLogsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
