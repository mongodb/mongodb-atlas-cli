// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datafederation/querylimits (interfaces: DataFederationQueryLimitCreator)
//
// Generated by this command:
//
//	mockgen -typed -destination=create_mock_test.go -package=querylimits . DataFederationQueryLimitCreator
//

// Package querylimits is a generated GoMock package.
package querylimits

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDataFederationQueryLimitCreator is a mock of DataFederationQueryLimitCreator interface.
type MockDataFederationQueryLimitCreator struct {
	ctrl     *gomock.Controller
	recorder *MockDataFederationQueryLimitCreatorMockRecorder
	isgomock struct{}
}

// MockDataFederationQueryLimitCreatorMockRecorder is the mock recorder for MockDataFederationQueryLimitCreator.
type MockDataFederationQueryLimitCreatorMockRecorder struct {
	mock *MockDataFederationQueryLimitCreator
}

// NewMockDataFederationQueryLimitCreator creates a new mock instance.
func NewMockDataFederationQueryLimitCreator(ctrl *gomock.Controller) *MockDataFederationQueryLimitCreator {
	mock := &MockDataFederationQueryLimitCreator{ctrl: ctrl}
	mock.recorder = &MockDataFederationQueryLimitCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataFederationQueryLimitCreator) EXPECT() *MockDataFederationQueryLimitCreatorMockRecorder {
	return m.recorder
}

// CreateDataFederationQueryLimit mocks base method.
func (m *MockDataFederationQueryLimitCreator) CreateDataFederationQueryLimit(arg0, arg1, arg2 string, arg3 *admin.DataFederationTenantQueryLimit) (*admin.DataFederationTenantQueryLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataFederationQueryLimit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*admin.DataFederationTenantQueryLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataFederationQueryLimit indicates an expected call of CreateDataFederationQueryLimit.
func (mr *MockDataFederationQueryLimitCreatorMockRecorder) CreateDataFederationQueryLimit(arg0, arg1, arg2, arg3 any) *MockDataFederationQueryLimitCreatorCreateDataFederationQueryLimitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataFederationQueryLimit", reflect.TypeOf((*MockDataFederationQueryLimitCreator)(nil).CreateDataFederationQueryLimit), arg0, arg1, arg2, arg3)
	return &MockDataFederationQueryLimitCreatorCreateDataFederationQueryLimitCall{Call: call}
}

// MockDataFederationQueryLimitCreatorCreateDataFederationQueryLimitCall wrap *gomock.Call
type MockDataFederationQueryLimitCreatorCreateDataFederationQueryLimitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataFederationQueryLimitCreatorCreateDataFederationQueryLimitCall) Return(arg0 *admin.DataFederationTenantQueryLimit, arg1 error) *MockDataFederationQueryLimitCreatorCreateDataFederationQueryLimitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataFederationQueryLimitCreatorCreateDataFederationQueryLimitCall) Do(f func(string, string, string, *admin.DataFederationTenantQueryLimit) (*admin.DataFederationTenantQueryLimit, error)) *MockDataFederationQueryLimitCreatorCreateDataFederationQueryLimitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataFederationQueryLimitCreatorCreateDataFederationQueryLimitCall) DoAndReturn(f func(string, string, string, *admin.DataFederationTenantQueryLimit) (*admin.DataFederationTenantQueryLimit, error)) *MockDataFederationQueryLimitCreatorCreateDataFederationQueryLimitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
