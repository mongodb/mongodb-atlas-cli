// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datafederation/querylimits (interfaces: DataFederationQueryLimitDeleter)
//
// Generated by this command:
//
//	mockgen -typed -destination=delete_mock_test.go -package=querylimits . DataFederationQueryLimitDeleter
//

// Package querylimits is a generated GoMock package.
package querylimits

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDataFederationQueryLimitDeleter is a mock of DataFederationQueryLimitDeleter interface.
type MockDataFederationQueryLimitDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDataFederationQueryLimitDeleterMockRecorder
	isgomock struct{}
}

// MockDataFederationQueryLimitDeleterMockRecorder is the mock recorder for MockDataFederationQueryLimitDeleter.
type MockDataFederationQueryLimitDeleterMockRecorder struct {
	mock *MockDataFederationQueryLimitDeleter
}

// NewMockDataFederationQueryLimitDeleter creates a new mock instance.
func NewMockDataFederationQueryLimitDeleter(ctrl *gomock.Controller) *MockDataFederationQueryLimitDeleter {
	mock := &MockDataFederationQueryLimitDeleter{ctrl: ctrl}
	mock.recorder = &MockDataFederationQueryLimitDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataFederationQueryLimitDeleter) EXPECT() *MockDataFederationQueryLimitDeleterMockRecorder {
	return m.recorder
}

// DeleteDataFederationQueryLimit mocks base method.
func (m *MockDataFederationQueryLimitDeleter) DeleteDataFederationQueryLimit(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataFederationQueryLimit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataFederationQueryLimit indicates an expected call of DeleteDataFederationQueryLimit.
func (mr *MockDataFederationQueryLimitDeleterMockRecorder) DeleteDataFederationQueryLimit(arg0, arg1, arg2 any) *MockDataFederationQueryLimitDeleterDeleteDataFederationQueryLimitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataFederationQueryLimit", reflect.TypeOf((*MockDataFederationQueryLimitDeleter)(nil).DeleteDataFederationQueryLimit), arg0, arg1, arg2)
	return &MockDataFederationQueryLimitDeleterDeleteDataFederationQueryLimitCall{Call: call}
}

// MockDataFederationQueryLimitDeleterDeleteDataFederationQueryLimitCall wrap *gomock.Call
type MockDataFederationQueryLimitDeleterDeleteDataFederationQueryLimitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataFederationQueryLimitDeleterDeleteDataFederationQueryLimitCall) Return(arg0 error) *MockDataFederationQueryLimitDeleterDeleteDataFederationQueryLimitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataFederationQueryLimitDeleterDeleteDataFederationQueryLimitCall) Do(f func(string, string, string) error) *MockDataFederationQueryLimitDeleterDeleteDataFederationQueryLimitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataFederationQueryLimitDeleterDeleteDataFederationQueryLimitCall) DoAndReturn(f func(string, string, string) error) *MockDataFederationQueryLimitDeleterDeleteDataFederationQueryLimitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
