// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datafederation/querylimits (interfaces: DataFederationQueryLimitDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=querylimits . DataFederationQueryLimitDescriber
//

// Package querylimits is a generated GoMock package.
package querylimits

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDataFederationQueryLimitDescriber is a mock of DataFederationQueryLimitDescriber interface.
type MockDataFederationQueryLimitDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockDataFederationQueryLimitDescriberMockRecorder
	isgomock struct{}
}

// MockDataFederationQueryLimitDescriberMockRecorder is the mock recorder for MockDataFederationQueryLimitDescriber.
type MockDataFederationQueryLimitDescriberMockRecorder struct {
	mock *MockDataFederationQueryLimitDescriber
}

// NewMockDataFederationQueryLimitDescriber creates a new mock instance.
func NewMockDataFederationQueryLimitDescriber(ctrl *gomock.Controller) *MockDataFederationQueryLimitDescriber {
	mock := &MockDataFederationQueryLimitDescriber{ctrl: ctrl}
	mock.recorder = &MockDataFederationQueryLimitDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataFederationQueryLimitDescriber) EXPECT() *MockDataFederationQueryLimitDescriberMockRecorder {
	return m.recorder
}

// DataFederationQueryLimit mocks base method.
func (m *MockDataFederationQueryLimitDescriber) DataFederationQueryLimit(arg0, arg1, arg2 string) (*admin.DataFederationTenantQueryLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataFederationQueryLimit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.DataFederationTenantQueryLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataFederationQueryLimit indicates an expected call of DataFederationQueryLimit.
func (mr *MockDataFederationQueryLimitDescriberMockRecorder) DataFederationQueryLimit(arg0, arg1, arg2 any) *MockDataFederationQueryLimitDescriberDataFederationQueryLimitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataFederationQueryLimit", reflect.TypeOf((*MockDataFederationQueryLimitDescriber)(nil).DataFederationQueryLimit), arg0, arg1, arg2)
	return &MockDataFederationQueryLimitDescriberDataFederationQueryLimitCall{Call: call}
}

// MockDataFederationQueryLimitDescriberDataFederationQueryLimitCall wrap *gomock.Call
type MockDataFederationQueryLimitDescriberDataFederationQueryLimitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataFederationQueryLimitDescriberDataFederationQueryLimitCall) Return(arg0 *admin.DataFederationTenantQueryLimit, arg1 error) *MockDataFederationQueryLimitDescriberDataFederationQueryLimitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataFederationQueryLimitDescriberDataFederationQueryLimitCall) Do(f func(string, string, string) (*admin.DataFederationTenantQueryLimit, error)) *MockDataFederationQueryLimitDescriberDataFederationQueryLimitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataFederationQueryLimitDescriberDataFederationQueryLimitCall) DoAndReturn(f func(string, string, string) (*admin.DataFederationTenantQueryLimit, error)) *MockDataFederationQueryLimitDescriberDataFederationQueryLimitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
