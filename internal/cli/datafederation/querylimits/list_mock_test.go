// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datafederation/querylimits (interfaces: DataFederationQueryLimitLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=querylimits . DataFederationQueryLimitLister
//

// Package querylimits is a generated GoMock package.
package querylimits

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDataFederationQueryLimitLister is a mock of DataFederationQueryLimitLister interface.
type MockDataFederationQueryLimitLister struct {
	ctrl     *gomock.Controller
	recorder *MockDataFederationQueryLimitListerMockRecorder
	isgomock struct{}
}

// MockDataFederationQueryLimitListerMockRecorder is the mock recorder for MockDataFederationQueryLimitLister.
type MockDataFederationQueryLimitListerMockRecorder struct {
	mock *MockDataFederationQueryLimitLister
}

// NewMockDataFederationQueryLimitLister creates a new mock instance.
func NewMockDataFederationQueryLimitLister(ctrl *gomock.Controller) *MockDataFederationQueryLimitLister {
	mock := &MockDataFederationQueryLimitLister{ctrl: ctrl}
	mock.recorder = &MockDataFederationQueryLimitListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataFederationQueryLimitLister) EXPECT() *MockDataFederationQueryLimitListerMockRecorder {
	return m.recorder
}

// DataFederationQueryLimits mocks base method.
func (m *MockDataFederationQueryLimitLister) DataFederationQueryLimits(arg0, arg1 string) ([]admin.DataFederationTenantQueryLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataFederationQueryLimits", arg0, arg1)
	ret0, _ := ret[0].([]admin.DataFederationTenantQueryLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataFederationQueryLimits indicates an expected call of DataFederationQueryLimits.
func (mr *MockDataFederationQueryLimitListerMockRecorder) DataFederationQueryLimits(arg0, arg1 any) *MockDataFederationQueryLimitListerDataFederationQueryLimitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataFederationQueryLimits", reflect.TypeOf((*MockDataFederationQueryLimitLister)(nil).DataFederationQueryLimits), arg0, arg1)
	return &MockDataFederationQueryLimitListerDataFederationQueryLimitsCall{Call: call}
}

// MockDataFederationQueryLimitListerDataFederationQueryLimitsCall wrap *gomock.Call
type MockDataFederationQueryLimitListerDataFederationQueryLimitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDataFederationQueryLimitListerDataFederationQueryLimitsCall) Return(arg0 []admin.DataFederationTenantQueryLimit, arg1 error) *MockDataFederationQueryLimitListerDataFederationQueryLimitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDataFederationQueryLimitListerDataFederationQueryLimitsCall) Do(f func(string, string) ([]admin.DataFederationTenantQueryLimit, error)) *MockDataFederationQueryLimitListerDataFederationQueryLimitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDataFederationQueryLimitListerDataFederationQueryLimitsCall) DoAndReturn(f func(string, string) ([]admin.DataFederationTenantQueryLimit, error)) *MockDataFederationQueryLimitListerDataFederationQueryLimitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
