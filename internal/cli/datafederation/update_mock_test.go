// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datafederation (interfaces: Updater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=datafederation . Updater
//

// Package datafederation is a generated GoMock package.
package datafederation

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdater is a mock of Updater interface.
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
	isgomock struct{}
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater.
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance.
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// UpdateDataFederation mocks base method.
func (m *MockUpdater) UpdateDataFederation(arg0, arg1 string, arg2 *admin.DataLakeTenant) (*admin.DataLakeTenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataFederation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.DataLakeTenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataFederation indicates an expected call of UpdateDataFederation.
func (mr *MockUpdaterMockRecorder) UpdateDataFederation(arg0, arg1, arg2 any) *MockUpdaterUpdateDataFederationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataFederation", reflect.TypeOf((*MockUpdater)(nil).UpdateDataFederation), arg0, arg1, arg2)
	return &MockUpdaterUpdateDataFederationCall{Call: call}
}

// MockUpdaterUpdateDataFederationCall wrap *gomock.Call
type MockUpdaterUpdateDataFederationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpdaterUpdateDataFederationCall) Return(arg0 *admin.DataLakeTenant, arg1 error) *MockUpdaterUpdateDataFederationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpdaterUpdateDataFederationCall) Do(f func(string, string, *admin.DataLakeTenant) (*admin.DataLakeTenant, error)) *MockUpdaterUpdateDataFederationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpdaterUpdateDataFederationCall) DoAndReturn(f func(string, string, *admin.DataLakeTenant) (*admin.DataLakeTenant, error)) *MockUpdaterUpdateDataFederationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
