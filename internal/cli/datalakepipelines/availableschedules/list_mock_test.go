// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datalakepipelines/availableschedules (interfaces: PipelineAvailableSchedulesLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=availableschedules . PipelineAvailableSchedulesLister
//

// Package availableschedules is a generated GoMock package.
package availableschedules

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelineAvailableSchedulesLister is a mock of PipelineAvailableSchedulesLister interface.
type MockPipelineAvailableSchedulesLister struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineAvailableSchedulesListerMockRecorder
	isgomock struct{}
}

// MockPipelineAvailableSchedulesListerMockRecorder is the mock recorder for MockPipelineAvailableSchedulesLister.
type MockPipelineAvailableSchedulesListerMockRecorder struct {
	mock *MockPipelineAvailableSchedulesLister
}

// NewMockPipelineAvailableSchedulesLister creates a new mock instance.
func NewMockPipelineAvailableSchedulesLister(ctrl *gomock.Controller) *MockPipelineAvailableSchedulesLister {
	mock := &MockPipelineAvailableSchedulesLister{ctrl: ctrl}
	mock.recorder = &MockPipelineAvailableSchedulesListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineAvailableSchedulesLister) EXPECT() *MockPipelineAvailableSchedulesListerMockRecorder {
	return m.recorder
}

// PipelineAvailableSchedules mocks base method.
func (m *MockPipelineAvailableSchedulesLister) PipelineAvailableSchedules(arg0, arg1 string) ([]admin.DiskBackupApiPolicyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineAvailableSchedules", arg0, arg1)
	ret0, _ := ret[0].([]admin.DiskBackupApiPolicyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineAvailableSchedules indicates an expected call of PipelineAvailableSchedules.
func (mr *MockPipelineAvailableSchedulesListerMockRecorder) PipelineAvailableSchedules(arg0, arg1 any) *MockPipelineAvailableSchedulesListerPipelineAvailableSchedulesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineAvailableSchedules", reflect.TypeOf((*MockPipelineAvailableSchedulesLister)(nil).PipelineAvailableSchedules), arg0, arg1)
	return &MockPipelineAvailableSchedulesListerPipelineAvailableSchedulesCall{Call: call}
}

// MockPipelineAvailableSchedulesListerPipelineAvailableSchedulesCall wrap *gomock.Call
type MockPipelineAvailableSchedulesListerPipelineAvailableSchedulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipelineAvailableSchedulesListerPipelineAvailableSchedulesCall) Return(arg0 []admin.DiskBackupApiPolicyItem, arg1 error) *MockPipelineAvailableSchedulesListerPipelineAvailableSchedulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipelineAvailableSchedulesListerPipelineAvailableSchedulesCall) Do(f func(string, string) ([]admin.DiskBackupApiPolicyItem, error)) *MockPipelineAvailableSchedulesListerPipelineAvailableSchedulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipelineAvailableSchedulesListerPipelineAvailableSchedulesCall) DoAndReturn(f func(string, string) ([]admin.DiskBackupApiPolicyItem, error)) *MockPipelineAvailableSchedulesListerPipelineAvailableSchedulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
