// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datalakepipelines/availablesnapshots (interfaces: PipelineAvailableSnapshotsLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=availablesnapshots . PipelineAvailableSnapshotsLister
//

// Package availablesnapshots is a generated GoMock package.
package availablesnapshots

import (
	reflect "reflect"
	time "time"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelineAvailableSnapshotsLister is a mock of PipelineAvailableSnapshotsLister interface.
type MockPipelineAvailableSnapshotsLister struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineAvailableSnapshotsListerMockRecorder
	isgomock struct{}
}

// MockPipelineAvailableSnapshotsListerMockRecorder is the mock recorder for MockPipelineAvailableSnapshotsLister.
type MockPipelineAvailableSnapshotsListerMockRecorder struct {
	mock *MockPipelineAvailableSnapshotsLister
}

// NewMockPipelineAvailableSnapshotsLister creates a new mock instance.
func NewMockPipelineAvailableSnapshotsLister(ctrl *gomock.Controller) *MockPipelineAvailableSnapshotsLister {
	mock := &MockPipelineAvailableSnapshotsLister{ctrl: ctrl}
	mock.recorder = &MockPipelineAvailableSnapshotsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineAvailableSnapshotsLister) EXPECT() *MockPipelineAvailableSnapshotsListerMockRecorder {
	return m.recorder
}

// PipelineAvailableSnapshots mocks base method.
func (m *MockPipelineAvailableSnapshotsLister) PipelineAvailableSnapshots(arg0, arg1 string, arg2 *time.Time, arg3 *store.ListOptions) (*admin.PaginatedBackupSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineAvailableSnapshots", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*admin.PaginatedBackupSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineAvailableSnapshots indicates an expected call of PipelineAvailableSnapshots.
func (mr *MockPipelineAvailableSnapshotsListerMockRecorder) PipelineAvailableSnapshots(arg0, arg1, arg2, arg3 any) *MockPipelineAvailableSnapshotsListerPipelineAvailableSnapshotsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineAvailableSnapshots", reflect.TypeOf((*MockPipelineAvailableSnapshotsLister)(nil).PipelineAvailableSnapshots), arg0, arg1, arg2, arg3)
	return &MockPipelineAvailableSnapshotsListerPipelineAvailableSnapshotsCall{Call: call}
}

// MockPipelineAvailableSnapshotsListerPipelineAvailableSnapshotsCall wrap *gomock.Call
type MockPipelineAvailableSnapshotsListerPipelineAvailableSnapshotsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipelineAvailableSnapshotsListerPipelineAvailableSnapshotsCall) Return(arg0 *admin.PaginatedBackupSnapshot, arg1 error) *MockPipelineAvailableSnapshotsListerPipelineAvailableSnapshotsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipelineAvailableSnapshotsListerPipelineAvailableSnapshotsCall) Do(f func(string, string, *time.Time, *store.ListOptions) (*admin.PaginatedBackupSnapshot, error)) *MockPipelineAvailableSnapshotsListerPipelineAvailableSnapshotsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipelineAvailableSnapshotsListerPipelineAvailableSnapshotsCall) DoAndReturn(f func(string, string, *time.Time, *store.ListOptions) (*admin.PaginatedBackupSnapshot, error)) *MockPipelineAvailableSnapshotsListerPipelineAvailableSnapshotsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
