// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datalakepipelines (interfaces: PipelinesPauser)
//
// Generated by this command:
//
//	mockgen -typed -destination=pause_mock_test.go -package=datalakepipelines . PipelinesPauser
//

// Package datalakepipelines is a generated GoMock package.
package datalakepipelines

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelinesPauser is a mock of PipelinesPauser interface.
type MockPipelinesPauser struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinesPauserMockRecorder
	isgomock struct{}
}

// MockPipelinesPauserMockRecorder is the mock recorder for MockPipelinesPauser.
type MockPipelinesPauserMockRecorder struct {
	mock *MockPipelinesPauser
}

// NewMockPipelinesPauser creates a new mock instance.
func NewMockPipelinesPauser(ctrl *gomock.Controller) *MockPipelinesPauser {
	mock := &MockPipelinesPauser{ctrl: ctrl}
	mock.recorder = &MockPipelinesPauserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelinesPauser) EXPECT() *MockPipelinesPauserMockRecorder {
	return m.recorder
}

// PipelinePause mocks base method.
func (m *MockPipelinesPauser) PipelinePause(arg0, arg1 string) (*admin.DataLakeIngestionPipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelinePause", arg0, arg1)
	ret0, _ := ret[0].(*admin.DataLakeIngestionPipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelinePause indicates an expected call of PipelinePause.
func (mr *MockPipelinesPauserMockRecorder) PipelinePause(arg0, arg1 any) *MockPipelinesPauserPipelinePauseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelinePause", reflect.TypeOf((*MockPipelinesPauser)(nil).PipelinePause), arg0, arg1)
	return &MockPipelinesPauserPipelinePauseCall{Call: call}
}

// MockPipelinesPauserPipelinePauseCall wrap *gomock.Call
type MockPipelinesPauserPipelinePauseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipelinesPauserPipelinePauseCall) Return(arg0 *admin.DataLakeIngestionPipeline, arg1 error) *MockPipelinesPauserPipelinePauseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipelinesPauserPipelinePauseCall) Do(f func(string, string) (*admin.DataLakeIngestionPipeline, error)) *MockPipelinesPauserPipelinePauseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipelinesPauserPipelinePauseCall) DoAndReturn(f func(string, string) (*admin.DataLakeIngestionPipeline, error)) *MockPipelinesPauserPipelinePauseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
