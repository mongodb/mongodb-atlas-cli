// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datalakepipelines/runs (interfaces: PipelineRunsDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=runs . PipelineRunsDescriber
//

// Package runs is a generated GoMock package.
package runs

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelineRunsDescriber is a mock of PipelineRunsDescriber interface.
type MockPipelineRunsDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineRunsDescriberMockRecorder
	isgomock struct{}
}

// MockPipelineRunsDescriberMockRecorder is the mock recorder for MockPipelineRunsDescriber.
type MockPipelineRunsDescriberMockRecorder struct {
	mock *MockPipelineRunsDescriber
}

// NewMockPipelineRunsDescriber creates a new mock instance.
func NewMockPipelineRunsDescriber(ctrl *gomock.Controller) *MockPipelineRunsDescriber {
	mock := &MockPipelineRunsDescriber{ctrl: ctrl}
	mock.recorder = &MockPipelineRunsDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineRunsDescriber) EXPECT() *MockPipelineRunsDescriberMockRecorder {
	return m.recorder
}

// PipelineRun mocks base method.
func (m *MockPipelineRunsDescriber) PipelineRun(arg0, arg1, arg2 string) (*admin.IngestionPipelineRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineRun", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.IngestionPipelineRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineRun indicates an expected call of PipelineRun.
func (mr *MockPipelineRunsDescriberMockRecorder) PipelineRun(arg0, arg1, arg2 any) *MockPipelineRunsDescriberPipelineRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineRun", reflect.TypeOf((*MockPipelineRunsDescriber)(nil).PipelineRun), arg0, arg1, arg2)
	return &MockPipelineRunsDescriberPipelineRunCall{Call: call}
}

// MockPipelineRunsDescriberPipelineRunCall wrap *gomock.Call
type MockPipelineRunsDescriberPipelineRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipelineRunsDescriberPipelineRunCall) Return(arg0 *admin.IngestionPipelineRun, arg1 error) *MockPipelineRunsDescriberPipelineRunCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipelineRunsDescriberPipelineRunCall) Do(f func(string, string, string) (*admin.IngestionPipelineRun, error)) *MockPipelineRunsDescriberPipelineRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipelineRunsDescriberPipelineRunCall) DoAndReturn(f func(string, string, string) (*admin.IngestionPipelineRun, error)) *MockPipelineRunsDescriberPipelineRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
