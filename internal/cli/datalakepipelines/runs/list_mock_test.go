// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datalakepipelines/runs (interfaces: PipelineRunsLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=runs . PipelineRunsLister
//

// Package runs is a generated GoMock package.
package runs

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelineRunsLister is a mock of PipelineRunsLister interface.
type MockPipelineRunsLister struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineRunsListerMockRecorder
	isgomock struct{}
}

// MockPipelineRunsListerMockRecorder is the mock recorder for MockPipelineRunsLister.
type MockPipelineRunsListerMockRecorder struct {
	mock *MockPipelineRunsLister
}

// NewMockPipelineRunsLister creates a new mock instance.
func NewMockPipelineRunsLister(ctrl *gomock.Controller) *MockPipelineRunsLister {
	mock := &MockPipelineRunsLister{ctrl: ctrl}
	mock.recorder = &MockPipelineRunsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineRunsLister) EXPECT() *MockPipelineRunsListerMockRecorder {
	return m.recorder
}

// PipelineRuns mocks base method.
func (m *MockPipelineRunsLister) PipelineRuns(arg0, arg1 string) (*admin.PaginatedPipelineRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineRuns", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedPipelineRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineRuns indicates an expected call of PipelineRuns.
func (mr *MockPipelineRunsListerMockRecorder) PipelineRuns(arg0, arg1 any) *MockPipelineRunsListerPipelineRunsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineRuns", reflect.TypeOf((*MockPipelineRunsLister)(nil).PipelineRuns), arg0, arg1)
	return &MockPipelineRunsListerPipelineRunsCall{Call: call}
}

// MockPipelineRunsListerPipelineRunsCall wrap *gomock.Call
type MockPipelineRunsListerPipelineRunsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipelineRunsListerPipelineRunsCall) Return(arg0 *admin.PaginatedPipelineRun, arg1 error) *MockPipelineRunsListerPipelineRunsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipelineRunsListerPipelineRunsCall) Do(f func(string, string) (*admin.PaginatedPipelineRun, error)) *MockPipelineRunsListerPipelineRunsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipelineRunsListerPipelineRunsCall) DoAndReturn(f func(string, string) (*admin.PaginatedPipelineRun, error)) *MockPipelineRunsListerPipelineRunsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
