// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datalakepipelines (interfaces: PipelinesTriggerer)
//
// Generated by this command:
//
//	mockgen -typed -destination=trigger_mock_test.go -package=datalakepipelines . PipelinesTriggerer
//

// Package datalakepipelines is a generated GoMock package.
package datalakepipelines

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelinesTriggerer is a mock of PipelinesTriggerer interface.
type MockPipelinesTriggerer struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinesTriggererMockRecorder
	isgomock struct{}
}

// MockPipelinesTriggererMockRecorder is the mock recorder for MockPipelinesTriggerer.
type MockPipelinesTriggererMockRecorder struct {
	mock *MockPipelinesTriggerer
}

// NewMockPipelinesTriggerer creates a new mock instance.
func NewMockPipelinesTriggerer(ctrl *gomock.Controller) *MockPipelinesTriggerer {
	mock := &MockPipelinesTriggerer{ctrl: ctrl}
	mock.recorder = &MockPipelinesTriggererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelinesTriggerer) EXPECT() *MockPipelinesTriggererMockRecorder {
	return m.recorder
}

// PipelineTrigger mocks base method.
func (m *MockPipelinesTriggerer) PipelineTrigger(arg0, arg1, arg2 string) (*admin.IngestionPipelineRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineTrigger", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.IngestionPipelineRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineTrigger indicates an expected call of PipelineTrigger.
func (mr *MockPipelinesTriggererMockRecorder) PipelineTrigger(arg0, arg1, arg2 any) *MockPipelinesTriggererPipelineTriggerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineTrigger", reflect.TypeOf((*MockPipelinesTriggerer)(nil).PipelineTrigger), arg0, arg1, arg2)
	return &MockPipelinesTriggererPipelineTriggerCall{Call: call}
}

// MockPipelinesTriggererPipelineTriggerCall wrap *gomock.Call
type MockPipelinesTriggererPipelineTriggerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipelinesTriggererPipelineTriggerCall) Return(arg0 *admin.IngestionPipelineRun, arg1 error) *MockPipelinesTriggererPipelineTriggerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipelinesTriggererPipelineTriggerCall) Do(f func(string, string, string) (*admin.IngestionPipelineRun, error)) *MockPipelinesTriggererPipelineTriggerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipelinesTriggererPipelineTriggerCall) DoAndReturn(f func(string, string, string) (*admin.IngestionPipelineRun, error)) *MockPipelinesTriggererPipelineTriggerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
