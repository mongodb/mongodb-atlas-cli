// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/datalakepipelines (interfaces: PipelinesUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=datalakepipelines . PipelinesUpdater
//

// Package datalakepipelines is a generated GoMock package.
package datalakepipelines

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelinesUpdater is a mock of PipelinesUpdater interface.
type MockPipelinesUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinesUpdaterMockRecorder
	isgomock struct{}
}

// MockPipelinesUpdaterMockRecorder is the mock recorder for MockPipelinesUpdater.
type MockPipelinesUpdaterMockRecorder struct {
	mock *MockPipelinesUpdater
}

// NewMockPipelinesUpdater creates a new mock instance.
func NewMockPipelinesUpdater(ctrl *gomock.Controller) *MockPipelinesUpdater {
	mock := &MockPipelinesUpdater{ctrl: ctrl}
	mock.recorder = &MockPipelinesUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelinesUpdater) EXPECT() *MockPipelinesUpdaterMockRecorder {
	return m.recorder
}

// UpdatePipeline mocks base method.
func (m *MockPipelinesUpdater) UpdatePipeline(arg0, arg1 string, arg2 admin.DataLakeIngestionPipeline) (*admin.DataLakeIngestionPipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.DataLakeIngestionPipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePipeline indicates an expected call of UpdatePipeline.
func (mr *MockPipelinesUpdaterMockRecorder) UpdatePipeline(arg0, arg1, arg2 any) *MockPipelinesUpdaterUpdatePipelineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*MockPipelinesUpdater)(nil).UpdatePipeline), arg0, arg1, arg2)
	return &MockPipelinesUpdaterUpdatePipelineCall{Call: call}
}

// MockPipelinesUpdaterUpdatePipelineCall wrap *gomock.Call
type MockPipelinesUpdaterUpdatePipelineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPipelinesUpdaterUpdatePipelineCall) Return(arg0 *admin.DataLakeIngestionPipeline, arg1 error) *MockPipelinesUpdaterUpdatePipelineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPipelinesUpdaterUpdatePipelineCall) Do(f func(string, string, admin.DataLakeIngestionPipeline) (*admin.DataLakeIngestionPipeline, error)) *MockPipelinesUpdaterUpdatePipelineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPipelinesUpdaterUpdatePipelineCall) DoAndReturn(f func(string, string, admin.DataLakeIngestionPipeline) (*admin.DataLakeIngestionPipeline, error)) *MockPipelinesUpdaterUpdatePipelineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
