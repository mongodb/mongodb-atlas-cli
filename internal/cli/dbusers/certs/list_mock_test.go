// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/dbusers/certs (interfaces: DBUserCertificateLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=certs . DBUserCertificateLister
//

// Package certs is a generated GoMock package.
package certs

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDBUserCertificateLister is a mock of DBUserCertificateLister interface.
type MockDBUserCertificateLister struct {
	ctrl     *gomock.Controller
	recorder *MockDBUserCertificateListerMockRecorder
	isgomock struct{}
}

// MockDBUserCertificateListerMockRecorder is the mock recorder for MockDBUserCertificateLister.
type MockDBUserCertificateListerMockRecorder struct {
	mock *MockDBUserCertificateLister
}

// NewMockDBUserCertificateLister creates a new mock instance.
func NewMockDBUserCertificateLister(ctrl *gomock.Controller) *MockDBUserCertificateLister {
	mock := &MockDBUserCertificateLister{ctrl: ctrl}
	mock.recorder = &MockDBUserCertificateListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBUserCertificateLister) EXPECT() *MockDBUserCertificateListerMockRecorder {
	return m.recorder
}

// DBUserCertificates mocks base method.
func (m *MockDBUserCertificateLister) DBUserCertificates(arg0, arg1 string, arg2 *store.ListOptions) (*admin.PaginatedUserCert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBUserCertificates", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.PaginatedUserCert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBUserCertificates indicates an expected call of DBUserCertificates.
func (mr *MockDBUserCertificateListerMockRecorder) DBUserCertificates(arg0, arg1, arg2 any) *MockDBUserCertificateListerDBUserCertificatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBUserCertificates", reflect.TypeOf((*MockDBUserCertificateLister)(nil).DBUserCertificates), arg0, arg1, arg2)
	return &MockDBUserCertificateListerDBUserCertificatesCall{Call: call}
}

// MockDBUserCertificateListerDBUserCertificatesCall wrap *gomock.Call
type MockDBUserCertificateListerDBUserCertificatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDBUserCertificateListerDBUserCertificatesCall) Return(arg0 *admin.PaginatedUserCert, arg1 error) *MockDBUserCertificateListerDBUserCertificatesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDBUserCertificateListerDBUserCertificatesCall) Do(f func(string, string, *store.ListOptions) (*admin.PaginatedUserCert, error)) *MockDBUserCertificateListerDBUserCertificatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDBUserCertificateListerDBUserCertificatesCall) DoAndReturn(f func(string, string, *store.ListOptions) (*admin.PaginatedUserCert, error)) *MockDBUserCertificateListerDBUserCertificatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
