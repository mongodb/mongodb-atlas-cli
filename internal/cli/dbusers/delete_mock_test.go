// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/dbusers (interfaces: DatabaseUserDeleter)
//
// Generated by this command:
//
//	mockgen -typed -destination=delete_mock_test.go -package=dbusers . DatabaseUserDeleter
//

// Package dbusers is a generated GoMock package.
package dbusers

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseUserDeleter is a mock of DatabaseUserDeleter interface.
type MockDatabaseUserDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseUserDeleterMockRecorder
	isgomock struct{}
}

// MockDatabaseUserDeleterMockRecorder is the mock recorder for MockDatabaseUserDeleter.
type MockDatabaseUserDeleterMockRecorder struct {
	mock *MockDatabaseUserDeleter
}

// NewMockDatabaseUserDeleter creates a new mock instance.
func NewMockDatabaseUserDeleter(ctrl *gomock.Controller) *MockDatabaseUserDeleter {
	mock := &MockDatabaseUserDeleter{ctrl: ctrl}
	mock.recorder = &MockDatabaseUserDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseUserDeleter) EXPECT() *MockDatabaseUserDeleterMockRecorder {
	return m.recorder
}

// DeleteDatabaseUser mocks base method.
func (m *MockDatabaseUserDeleter) DeleteDatabaseUser(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabaseUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDatabaseUser indicates an expected call of DeleteDatabaseUser.
func (mr *MockDatabaseUserDeleterMockRecorder) DeleteDatabaseUser(arg0, arg1, arg2 any) *MockDatabaseUserDeleterDeleteDatabaseUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabaseUser", reflect.TypeOf((*MockDatabaseUserDeleter)(nil).DeleteDatabaseUser), arg0, arg1, arg2)
	return &MockDatabaseUserDeleterDeleteDatabaseUserCall{Call: call}
}

// MockDatabaseUserDeleterDeleteDatabaseUserCall wrap *gomock.Call
type MockDatabaseUserDeleterDeleteDatabaseUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUserDeleterDeleteDatabaseUserCall) Return(arg0 error) *MockDatabaseUserDeleterDeleteDatabaseUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUserDeleterDeleteDatabaseUserCall) Do(f func(string, string, string) error) *MockDatabaseUserDeleterDeleteDatabaseUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUserDeleterDeleteDatabaseUserCall) DoAndReturn(f func(string, string, string) error) *MockDatabaseUserDeleterDeleteDatabaseUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
