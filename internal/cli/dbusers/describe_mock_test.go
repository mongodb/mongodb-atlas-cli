// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/dbusers (interfaces: DatabaseUserDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=dbusers . DatabaseUserDescriber
//

// Package dbusers is a generated GoMock package.
package dbusers

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseUserDescriber is a mock of DatabaseUserDescriber interface.
type MockDatabaseUserDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseUserDescriberMockRecorder
	isgomock struct{}
}

// MockDatabaseUserDescriberMockRecorder is the mock recorder for MockDatabaseUserDescriber.
type MockDatabaseUserDescriberMockRecorder struct {
	mock *MockDatabaseUserDescriber
}

// NewMockDatabaseUserDescriber creates a new mock instance.
func NewMockDatabaseUserDescriber(ctrl *gomock.Controller) *MockDatabaseUserDescriber {
	mock := &MockDatabaseUserDescriber{ctrl: ctrl}
	mock.recorder = &MockDatabaseUserDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseUserDescriber) EXPECT() *MockDatabaseUserDescriberMockRecorder {
	return m.recorder
}

// DatabaseUser mocks base method.
func (m *MockDatabaseUserDescriber) DatabaseUser(arg0, arg1, arg2 string) (*admin.CloudDatabaseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.CloudDatabaseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseUser indicates an expected call of DatabaseUser.
func (mr *MockDatabaseUserDescriberMockRecorder) DatabaseUser(arg0, arg1, arg2 any) *MockDatabaseUserDescriberDatabaseUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseUser", reflect.TypeOf((*MockDatabaseUserDescriber)(nil).DatabaseUser), arg0, arg1, arg2)
	return &MockDatabaseUserDescriberDatabaseUserCall{Call: call}
}

// MockDatabaseUserDescriberDatabaseUserCall wrap *gomock.Call
type MockDatabaseUserDescriberDatabaseUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUserDescriberDatabaseUserCall) Return(arg0 *admin.CloudDatabaseUser, arg1 error) *MockDatabaseUserDescriberDatabaseUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUserDescriberDatabaseUserCall) Do(f func(string, string, string) (*admin.CloudDatabaseUser, error)) *MockDatabaseUserDescriberDatabaseUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUserDescriberDatabaseUserCall) DoAndReturn(f func(string, string, string) (*admin.CloudDatabaseUser, error)) *MockDatabaseUserDescriberDatabaseUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
