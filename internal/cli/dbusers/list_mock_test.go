// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/dbusers (interfaces: DatabaseUserLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=dbusers . DatabaseUserLister
//

// Package dbusers is a generated GoMock package.
package dbusers

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseUserLister is a mock of DatabaseUserLister interface.
type MockDatabaseUserLister struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseUserListerMockRecorder
	isgomock struct{}
}

// MockDatabaseUserListerMockRecorder is the mock recorder for MockDatabaseUserLister.
type MockDatabaseUserListerMockRecorder struct {
	mock *MockDatabaseUserLister
}

// NewMockDatabaseUserLister creates a new mock instance.
func NewMockDatabaseUserLister(ctrl *gomock.Controller) *MockDatabaseUserLister {
	mock := &MockDatabaseUserLister{ctrl: ctrl}
	mock.recorder = &MockDatabaseUserListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseUserLister) EXPECT() *MockDatabaseUserListerMockRecorder {
	return m.recorder
}

// DatabaseUsers mocks base method.
func (m *MockDatabaseUserLister) DatabaseUsers(groupID string, opts *store.ListOptions) (*admin.PaginatedApiAtlasDatabaseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseUsers", groupID, opts)
	ret0, _ := ret[0].(*admin.PaginatedApiAtlasDatabaseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseUsers indicates an expected call of DatabaseUsers.
func (mr *MockDatabaseUserListerMockRecorder) DatabaseUsers(groupID, opts any) *MockDatabaseUserListerDatabaseUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseUsers", reflect.TypeOf((*MockDatabaseUserLister)(nil).DatabaseUsers), groupID, opts)
	return &MockDatabaseUserListerDatabaseUsersCall{Call: call}
}

// MockDatabaseUserListerDatabaseUsersCall wrap *gomock.Call
type MockDatabaseUserListerDatabaseUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUserListerDatabaseUsersCall) Return(arg0 *admin.PaginatedApiAtlasDatabaseUser, arg1 error) *MockDatabaseUserListerDatabaseUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUserListerDatabaseUsersCall) Do(f func(string, *store.ListOptions) (*admin.PaginatedApiAtlasDatabaseUser, error)) *MockDatabaseUserListerDatabaseUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUserListerDatabaseUsersCall) DoAndReturn(f func(string, *store.ListOptions) (*admin.PaginatedApiAtlasDatabaseUser, error)) *MockDatabaseUserListerDatabaseUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
