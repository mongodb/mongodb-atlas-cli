// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/dbusers (interfaces: DatabaseUserUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=dbusers . DatabaseUserUpdater
//

// Package dbusers is a generated GoMock package.
package dbusers

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseUserUpdater is a mock of DatabaseUserUpdater interface.
type MockDatabaseUserUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseUserUpdaterMockRecorder
	isgomock struct{}
}

// MockDatabaseUserUpdaterMockRecorder is the mock recorder for MockDatabaseUserUpdater.
type MockDatabaseUserUpdaterMockRecorder struct {
	mock *MockDatabaseUserUpdater
}

// NewMockDatabaseUserUpdater creates a new mock instance.
func NewMockDatabaseUserUpdater(ctrl *gomock.Controller) *MockDatabaseUserUpdater {
	mock := &MockDatabaseUserUpdater{ctrl: ctrl}
	mock.recorder = &MockDatabaseUserUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseUserUpdater) EXPECT() *MockDatabaseUserUpdaterMockRecorder {
	return m.recorder
}

// UpdateDatabaseUser mocks base method.
func (m *MockDatabaseUserUpdater) UpdateDatabaseUser(arg0 *admin.UpdateDatabaseUserApiParams) (*admin.CloudDatabaseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatabaseUser", arg0)
	ret0, _ := ret[0].(*admin.CloudDatabaseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatabaseUser indicates an expected call of UpdateDatabaseUser.
func (mr *MockDatabaseUserUpdaterMockRecorder) UpdateDatabaseUser(arg0 any) *MockDatabaseUserUpdaterUpdateDatabaseUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabaseUser", reflect.TypeOf((*MockDatabaseUserUpdater)(nil).UpdateDatabaseUser), arg0)
	return &MockDatabaseUserUpdaterUpdateDatabaseUserCall{Call: call}
}

// MockDatabaseUserUpdaterUpdateDatabaseUserCall wrap *gomock.Call
type MockDatabaseUserUpdaterUpdateDatabaseUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseUserUpdaterUpdateDatabaseUserCall) Return(arg0 *admin.CloudDatabaseUser, arg1 error) *MockDatabaseUserUpdaterUpdateDatabaseUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseUserUpdaterUpdateDatabaseUserCall) Do(f func(*admin.UpdateDatabaseUserApiParams) (*admin.CloudDatabaseUser, error)) *MockDatabaseUserUpdaterUpdateDatabaseUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseUserUpdaterUpdateDatabaseUserCall) DoAndReturn(f func(*admin.UpdateDatabaseUserApiParams) (*admin.CloudDatabaseUser, error)) *MockDatabaseUserUpdaterUpdateDatabaseUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
