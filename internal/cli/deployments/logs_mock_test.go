// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/deployments (interfaces: LogsDownloader)
//
// Generated by this command:
//
//	mockgen -typed -destination=logs_mock_test.go -package=deployments . LogsDownloader
//

// Package deployments is a generated GoMock package.
package deployments

import (
	io "io"
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockLogsDownloader is a mock of LogsDownloader interface.
type MockLogsDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockLogsDownloaderMockRecorder
	isgomock struct{}
}

// MockLogsDownloaderMockRecorder is the mock recorder for MockLogsDownloader.
type MockLogsDownloaderMockRecorder struct {
	mock *MockLogsDownloader
}

// NewMockLogsDownloader creates a new mock instance.
func NewMockLogsDownloader(ctrl *gomock.Controller) *MockLogsDownloader {
	mock := &MockLogsDownloader{ctrl: ctrl}
	mock.recorder = &MockLogsDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogsDownloader) EXPECT() *MockLogsDownloaderMockRecorder {
	return m.recorder
}

// DownloadLog mocks base method.
func (m *MockLogsDownloader) DownloadLog(arg0 *admin.GetHostLogsApiParams) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadLog", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadLog indicates an expected call of DownloadLog.
func (mr *MockLogsDownloaderMockRecorder) DownloadLog(arg0 any) *MockLogsDownloaderDownloadLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadLog", reflect.TypeOf((*MockLogsDownloader)(nil).DownloadLog), arg0)
	return &MockLogsDownloaderDownloadLogCall{Call: call}
}

// MockLogsDownloaderDownloadLogCall wrap *gomock.Call
type MockLogsDownloaderDownloadLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLogsDownloaderDownloadLogCall) Return(arg0 io.ReadCloser, arg1 error) *MockLogsDownloaderDownloadLogCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLogsDownloaderDownloadLogCall) Do(f func(*admin.GetHostLogsApiParams) (io.ReadCloser, error)) *MockLogsDownloaderDownloadLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLogsDownloaderDownloadLogCall) DoAndReturn(f func(*admin.GetHostLogsApiParams) (io.ReadCloser, error)) *MockLogsDownloaderDownloadLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
