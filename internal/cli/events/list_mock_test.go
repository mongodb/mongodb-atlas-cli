// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/events (interfaces: EventLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=events . EventLister
//

// Package events is a generated GoMock package.
package events

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockEventLister is a mock of EventLister interface.
type MockEventLister struct {
	ctrl     *gomock.Controller
	recorder *MockEventListerMockRecorder
	isgomock struct{}
}

// MockEventListerMockRecorder is the mock recorder for MockEventLister.
type MockEventListerMockRecorder struct {
	mock *MockEventLister
}

// NewMockEventLister creates a new mock instance.
func NewMockEventLister(ctrl *gomock.Controller) *MockEventLister {
	mock := &MockEventLister{ctrl: ctrl}
	mock.recorder = &MockEventListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventLister) EXPECT() *MockEventListerMockRecorder {
	return m.recorder
}

// OrganizationEvents mocks base method.
func (m *MockEventLister) OrganizationEvents(opts *admin.ListOrganizationEventsApiParams) (*admin.OrgPaginatedEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationEvents", opts)
	ret0, _ := ret[0].(*admin.OrgPaginatedEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationEvents indicates an expected call of OrganizationEvents.
func (mr *MockEventListerMockRecorder) OrganizationEvents(opts any) *MockEventListerOrganizationEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationEvents", reflect.TypeOf((*MockEventLister)(nil).OrganizationEvents), opts)
	return &MockEventListerOrganizationEventsCall{Call: call}
}

// MockEventListerOrganizationEventsCall wrap *gomock.Call
type MockEventListerOrganizationEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventListerOrganizationEventsCall) Return(arg0 *admin.OrgPaginatedEvent, arg1 error) *MockEventListerOrganizationEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventListerOrganizationEventsCall) Do(f func(*admin.ListOrganizationEventsApiParams) (*admin.OrgPaginatedEvent, error)) *MockEventListerOrganizationEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventListerOrganizationEventsCall) DoAndReturn(f func(*admin.ListOrganizationEventsApiParams) (*admin.OrgPaginatedEvent, error)) *MockEventListerOrganizationEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProjectEvents mocks base method.
func (m *MockEventLister) ProjectEvents(opts *admin.ListProjectEventsApiParams) (*admin.GroupPaginatedEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectEvents", opts)
	ret0, _ := ret[0].(*admin.GroupPaginatedEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectEvents indicates an expected call of ProjectEvents.
func (mr *MockEventListerMockRecorder) ProjectEvents(opts any) *MockEventListerProjectEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectEvents", reflect.TypeOf((*MockEventLister)(nil).ProjectEvents), opts)
	return &MockEventListerProjectEventsCall{Call: call}
}

// MockEventListerProjectEventsCall wrap *gomock.Call
type MockEventListerProjectEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventListerProjectEventsCall) Return(arg0 *admin.GroupPaginatedEvent, arg1 error) *MockEventListerProjectEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventListerProjectEventsCall) Do(f func(*admin.ListProjectEventsApiParams) (*admin.GroupPaginatedEvent, error)) *MockEventListerProjectEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventListerProjectEventsCall) DoAndReturn(f func(*admin.ListProjectEventsApiParams) (*admin.GroupPaginatedEvent, error)) *MockEventListerProjectEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
