// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/events (interfaces: OrganizationEventLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=orgs_list_mock_test.go -package=events . OrganizationEventLister
//

// Package events is a generated GoMock package.
package events

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationEventLister is a mock of OrganizationEventLister interface.
type MockOrganizationEventLister struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationEventListerMockRecorder
	isgomock struct{}
}

// MockOrganizationEventListerMockRecorder is the mock recorder for MockOrganizationEventLister.
type MockOrganizationEventListerMockRecorder struct {
	mock *MockOrganizationEventLister
}

// NewMockOrganizationEventLister creates a new mock instance.
func NewMockOrganizationEventLister(ctrl *gomock.Controller) *MockOrganizationEventLister {
	mock := &MockOrganizationEventLister{ctrl: ctrl}
	mock.recorder = &MockOrganizationEventListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationEventLister) EXPECT() *MockOrganizationEventListerMockRecorder {
	return m.recorder
}

// OrganizationEvents mocks base method.
func (m *MockOrganizationEventLister) OrganizationEvents(opts *admin.ListOrgEventsApiParams) (*admin.OrgPaginatedEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationEvents", opts)
	ret0, _ := ret[0].(*admin.OrgPaginatedEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationEvents indicates an expected call of OrganizationEvents.
func (mr *MockOrganizationEventListerMockRecorder) OrganizationEvents(opts any) *MockOrganizationEventListerOrganizationEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationEvents", reflect.TypeOf((*MockOrganizationEventLister)(nil).OrganizationEvents), opts)
	return &MockOrganizationEventListerOrganizationEventsCall{Call: call}
}

// MockOrganizationEventListerOrganizationEventsCall wrap *gomock.Call
type MockOrganizationEventListerOrganizationEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrganizationEventListerOrganizationEventsCall) Return(arg0 *admin.OrgPaginatedEvent, arg1 error) *MockOrganizationEventListerOrganizationEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrganizationEventListerOrganizationEventsCall) Do(f func(*admin.ListOrgEventsApiParams) (*admin.OrgPaginatedEvent, error)) *MockOrganizationEventListerOrganizationEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrganizationEventListerOrganizationEventsCall) DoAndReturn(f func(*admin.ListOrgEventsApiParams) (*admin.OrgPaginatedEvent, error)) *MockOrganizationEventListerOrganizationEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
