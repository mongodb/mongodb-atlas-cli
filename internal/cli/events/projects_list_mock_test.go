// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/events (interfaces: ProjectEventLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=projects_list_mock_test.go -package=events . ProjectEventLister
//

// Package events is a generated GoMock package.
package events

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectEventLister is a mock of ProjectEventLister interface.
type MockProjectEventLister struct {
	ctrl     *gomock.Controller
	recorder *MockProjectEventListerMockRecorder
	isgomock struct{}
}

// MockProjectEventListerMockRecorder is the mock recorder for MockProjectEventLister.
type MockProjectEventListerMockRecorder struct {
	mock *MockProjectEventLister
}

// NewMockProjectEventLister creates a new mock instance.
func NewMockProjectEventLister(ctrl *gomock.Controller) *MockProjectEventLister {
	mock := &MockProjectEventLister{ctrl: ctrl}
	mock.recorder = &MockProjectEventListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectEventLister) EXPECT() *MockProjectEventListerMockRecorder {
	return m.recorder
}

// ProjectEvents mocks base method.
func (m *MockProjectEventLister) ProjectEvents(opts *admin.ListGroupEventsApiParams) (*admin.GroupPaginatedEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectEvents", opts)
	ret0, _ := ret[0].(*admin.GroupPaginatedEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectEvents indicates an expected call of ProjectEvents.
func (mr *MockProjectEventListerMockRecorder) ProjectEvents(opts any) *MockProjectEventListerProjectEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectEvents", reflect.TypeOf((*MockProjectEventLister)(nil).ProjectEvents), opts)
	return &MockProjectEventListerProjectEventsCall{Call: call}
}

// MockProjectEventListerProjectEventsCall wrap *gomock.Call
type MockProjectEventListerProjectEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectEventListerProjectEventsCall) Return(arg0 *admin.GroupPaginatedEvent, arg1 error) *MockProjectEventListerProjectEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectEventListerProjectEventsCall) Do(f func(*admin.ListGroupEventsApiParams) (*admin.GroupPaginatedEvent, error)) *MockProjectEventListerProjectEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectEventListerProjectEventsCall) DoAndReturn(f func(*admin.ListGroupEventsApiParams) (*admin.GroupPaginatedEvent, error)) *MockProjectEventListerProjectEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
