// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/federatedauthentication/federationsettings/connectedorgsconfigs (interfaces: ConnectedOrgConfigsLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=connectedorgsconfigs . ConnectedOrgConfigsLister
//

// Package connectedorgsconfigs is a generated GoMock package.
package connectedorgsconfigs

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectedOrgConfigsLister is a mock of ConnectedOrgConfigsLister interface.
type MockConnectedOrgConfigsLister struct {
	ctrl     *gomock.Controller
	recorder *MockConnectedOrgConfigsListerMockRecorder
	isgomock struct{}
}

// MockConnectedOrgConfigsListerMockRecorder is the mock recorder for MockConnectedOrgConfigsLister.
type MockConnectedOrgConfigsListerMockRecorder struct {
	mock *MockConnectedOrgConfigsLister
}

// NewMockConnectedOrgConfigsLister creates a new mock instance.
func NewMockConnectedOrgConfigsLister(ctrl *gomock.Controller) *MockConnectedOrgConfigsLister {
	mock := &MockConnectedOrgConfigsLister{ctrl: ctrl}
	mock.recorder = &MockConnectedOrgConfigsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectedOrgConfigsLister) EXPECT() *MockConnectedOrgConfigsListerMockRecorder {
	return m.recorder
}

// ListConnectedOrgConfigs mocks base method.
func (m *MockConnectedOrgConfigsLister) ListConnectedOrgConfigs(opts *admin.ListConnectedOrgConfigsApiParams) (*admin.PaginatedConnectedOrgConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectedOrgConfigs", opts)
	ret0, _ := ret[0].(*admin.PaginatedConnectedOrgConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectedOrgConfigs indicates an expected call of ListConnectedOrgConfigs.
func (mr *MockConnectedOrgConfigsListerMockRecorder) ListConnectedOrgConfigs(opts any) *MockConnectedOrgConfigsListerListConnectedOrgConfigsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectedOrgConfigs", reflect.TypeOf((*MockConnectedOrgConfigsLister)(nil).ListConnectedOrgConfigs), opts)
	return &MockConnectedOrgConfigsListerListConnectedOrgConfigsCall{Call: call}
}

// MockConnectedOrgConfigsListerListConnectedOrgConfigsCall wrap *gomock.Call
type MockConnectedOrgConfigsListerListConnectedOrgConfigsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConnectedOrgConfigsListerListConnectedOrgConfigsCall) Return(arg0 *admin.PaginatedConnectedOrgConfigs, arg1 error) *MockConnectedOrgConfigsListerListConnectedOrgConfigsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConnectedOrgConfigsListerListConnectedOrgConfigsCall) Do(f func(*admin.ListConnectedOrgConfigsApiParams) (*admin.PaginatedConnectedOrgConfigs, error)) *MockConnectedOrgConfigsListerListConnectedOrgConfigsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConnectedOrgConfigsListerListConnectedOrgConfigsCall) DoAndReturn(f func(*admin.ListConnectedOrgConfigsApiParams) (*admin.PaginatedConnectedOrgConfigs, error)) *MockConnectedOrgConfigsListerListConnectedOrgConfigsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
