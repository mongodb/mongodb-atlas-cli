// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/federatedauthentication/federationsettings/connectedorgsconfigs (interfaces: ConnectedOrgConfigsUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=connectedorgsconfigs . ConnectedOrgConfigsUpdater
//

// Package connectedorgsconfigs is a generated GoMock package.
package connectedorgsconfigs

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectedOrgConfigsUpdater is a mock of ConnectedOrgConfigsUpdater interface.
type MockConnectedOrgConfigsUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockConnectedOrgConfigsUpdaterMockRecorder
	isgomock struct{}
}

// MockConnectedOrgConfigsUpdaterMockRecorder is the mock recorder for MockConnectedOrgConfigsUpdater.
type MockConnectedOrgConfigsUpdaterMockRecorder struct {
	mock *MockConnectedOrgConfigsUpdater
}

// NewMockConnectedOrgConfigsUpdater creates a new mock instance.
func NewMockConnectedOrgConfigsUpdater(ctrl *gomock.Controller) *MockConnectedOrgConfigsUpdater {
	mock := &MockConnectedOrgConfigsUpdater{ctrl: ctrl}
	mock.recorder = &MockConnectedOrgConfigsUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectedOrgConfigsUpdater) EXPECT() *MockConnectedOrgConfigsUpdaterMockRecorder {
	return m.recorder
}

// UpdateConnectedOrgConfig mocks base method.
func (m *MockConnectedOrgConfigsUpdater) UpdateConnectedOrgConfig(opts *admin.UpdateConnectedOrgConfigApiParams) (*admin.ConnectedOrgConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectedOrgConfig", opts)
	ret0, _ := ret[0].(*admin.ConnectedOrgConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectedOrgConfig indicates an expected call of UpdateConnectedOrgConfig.
func (mr *MockConnectedOrgConfigsUpdaterMockRecorder) UpdateConnectedOrgConfig(opts any) *MockConnectedOrgConfigsUpdaterUpdateConnectedOrgConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectedOrgConfig", reflect.TypeOf((*MockConnectedOrgConfigsUpdater)(nil).UpdateConnectedOrgConfig), opts)
	return &MockConnectedOrgConfigsUpdaterUpdateConnectedOrgConfigCall{Call: call}
}

// MockConnectedOrgConfigsUpdaterUpdateConnectedOrgConfigCall wrap *gomock.Call
type MockConnectedOrgConfigsUpdaterUpdateConnectedOrgConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConnectedOrgConfigsUpdaterUpdateConnectedOrgConfigCall) Return(arg0 *admin.ConnectedOrgConfig, arg1 error) *MockConnectedOrgConfigsUpdaterUpdateConnectedOrgConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConnectedOrgConfigsUpdaterUpdateConnectedOrgConfigCall) Do(f func(*admin.UpdateConnectedOrgConfigApiParams) (*admin.ConnectedOrgConfig, error)) *MockConnectedOrgConfigsUpdaterUpdateConnectedOrgConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConnectedOrgConfigsUpdaterUpdateConnectedOrgConfigCall) DoAndReturn(f func(*admin.UpdateConnectedOrgConfigApiParams) (*admin.ConnectedOrgConfig, error)) *MockConnectedOrgConfigsUpdaterUpdateConnectedOrgConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
