// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/federatedauthentication/federationsettings/identityprovider/create (interfaces: IdentityProviderCreator)
//
// Generated by this command:
//
//	mockgen -typed -destination=oidc_mock_test.go -package=create . IdentityProviderCreator
//

// Package create is a generated GoMock package.
package create

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockIdentityProviderCreator is a mock of IdentityProviderCreator interface.
type MockIdentityProviderCreator struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityProviderCreatorMockRecorder
	isgomock struct{}
}

// MockIdentityProviderCreatorMockRecorder is the mock recorder for MockIdentityProviderCreator.
type MockIdentityProviderCreatorMockRecorder struct {
	mock *MockIdentityProviderCreator
}

// NewMockIdentityProviderCreator creates a new mock instance.
func NewMockIdentityProviderCreator(ctrl *gomock.Controller) *MockIdentityProviderCreator {
	mock := &MockIdentityProviderCreator{ctrl: ctrl}
	mock.recorder = &MockIdentityProviderCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityProviderCreator) EXPECT() *MockIdentityProviderCreatorMockRecorder {
	return m.recorder
}

// CreateIdentityProvider mocks base method.
func (m *MockIdentityProviderCreator) CreateIdentityProvider(arg0 *admin.CreateIdentityProviderApiParams) (*admin.FederationOidcIdentityProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProvider", arg0)
	ret0, _ := ret[0].(*admin.FederationOidcIdentityProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentityProvider indicates an expected call of CreateIdentityProvider.
func (mr *MockIdentityProviderCreatorMockRecorder) CreateIdentityProvider(arg0 any) *MockIdentityProviderCreatorCreateIdentityProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProvider", reflect.TypeOf((*MockIdentityProviderCreator)(nil).CreateIdentityProvider), arg0)
	return &MockIdentityProviderCreatorCreateIdentityProviderCall{Call: call}
}

// MockIdentityProviderCreatorCreateIdentityProviderCall wrap *gomock.Call
type MockIdentityProviderCreatorCreateIdentityProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIdentityProviderCreatorCreateIdentityProviderCall) Return(arg0 *admin.FederationOidcIdentityProvider, arg1 error) *MockIdentityProviderCreatorCreateIdentityProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIdentityProviderCreatorCreateIdentityProviderCall) Do(f func(*admin.CreateIdentityProviderApiParams) (*admin.FederationOidcIdentityProvider, error)) *MockIdentityProviderCreatorCreateIdentityProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIdentityProviderCreatorCreateIdentityProviderCall) DoAndReturn(f func(*admin.CreateIdentityProviderApiParams) (*admin.FederationOidcIdentityProvider, error)) *MockIdentityProviderCreatorCreateIdentityProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
