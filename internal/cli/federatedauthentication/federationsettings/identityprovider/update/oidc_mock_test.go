// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/federatedauthentication/federationsettings/identityprovider/update (interfaces: Updater)
//
// Generated by this command:
//
//	mockgen -typed -destination=oidc_mock_test.go -package=update . Updater
//

// Package update is a generated GoMock package.
package update

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312004/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdater is a mock of Updater interface.
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
	isgomock struct{}
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater.
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance.
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// UpdateIdentityProvider mocks base method.
func (m *MockUpdater) UpdateIdentityProvider(opts *admin.UpdateIdentityProviderApiParams) (*admin.FederationIdentityProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProvider", opts)
	ret0, _ := ret[0].(*admin.FederationIdentityProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentityProvider indicates an expected call of UpdateIdentityProvider.
func (mr *MockUpdaterMockRecorder) UpdateIdentityProvider(opts any) *MockUpdaterUpdateIdentityProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProvider", reflect.TypeOf((*MockUpdater)(nil).UpdateIdentityProvider), opts)
	return &MockUpdaterUpdateIdentityProviderCall{Call: call}
}

// MockUpdaterUpdateIdentityProviderCall wrap *gomock.Call
type MockUpdaterUpdateIdentityProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpdaterUpdateIdentityProviderCall) Return(arg0 *admin.FederationIdentityProvider, arg1 error) *MockUpdaterUpdateIdentityProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpdaterUpdateIdentityProviderCall) Do(f func(*admin.UpdateIdentityProviderApiParams) (*admin.FederationIdentityProvider, error)) *MockUpdaterUpdateIdentityProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpdaterUpdateIdentityProviderCall) DoAndReturn(f func(*admin.UpdateIdentityProviderApiParams) (*admin.FederationIdentityProvider, error)) *MockUpdaterUpdateIdentityProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
