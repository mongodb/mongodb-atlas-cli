// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/integrations (interfaces: IntegrationDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=integrations . IntegrationDescriber
//

// Package integrations is a generated GoMock package.
package integrations

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockIntegrationDescriber is a mock of IntegrationDescriber interface.
type MockIntegrationDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationDescriberMockRecorder
	isgomock struct{}
}

// MockIntegrationDescriberMockRecorder is the mock recorder for MockIntegrationDescriber.
type MockIntegrationDescriberMockRecorder struct {
	mock *MockIntegrationDescriber
}

// NewMockIntegrationDescriber creates a new mock instance.
func NewMockIntegrationDescriber(ctrl *gomock.Controller) *MockIntegrationDescriber {
	mock := &MockIntegrationDescriber{ctrl: ctrl}
	mock.recorder = &MockIntegrationDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegrationDescriber) EXPECT() *MockIntegrationDescriberMockRecorder {
	return m.recorder
}

// Integration mocks base method.
func (m *MockIntegrationDescriber) Integration(arg0, arg1 string) (*admin.ThirdPartyIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Integration", arg0, arg1)
	ret0, _ := ret[0].(*admin.ThirdPartyIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Integration indicates an expected call of Integration.
func (mr *MockIntegrationDescriberMockRecorder) Integration(arg0, arg1 any) *MockIntegrationDescriberIntegrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Integration", reflect.TypeOf((*MockIntegrationDescriber)(nil).Integration), arg0, arg1)
	return &MockIntegrationDescriberIntegrationCall{Call: call}
}

// MockIntegrationDescriberIntegrationCall wrap *gomock.Call
type MockIntegrationDescriberIntegrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIntegrationDescriberIntegrationCall) Return(arg0 *admin.ThirdPartyIntegration, arg1 error) *MockIntegrationDescriberIntegrationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIntegrationDescriberIntegrationCall) Do(f func(string, string) (*admin.ThirdPartyIntegration, error)) *MockIntegrationDescriberIntegrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIntegrationDescriberIntegrationCall) DoAndReturn(f func(string, string) (*admin.ThirdPartyIntegration, error)) *MockIntegrationDescriberIntegrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
