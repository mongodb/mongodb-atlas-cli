// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/logs (interfaces: Downloader)
//
// Generated by this command:
//
//	mockgen -typed -destination=download_mock_test.go -package=logs . Downloader
//

// Package logs is a generated GoMock package.
package logs

import (
	io "io"
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDownloader is a mock of Downloader interface.
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
	isgomock struct{}
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader.
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance.
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// DownloadLog mocks base method.
func (m *MockDownloader) DownloadLog(arg0 *admin.GetHostLogsApiParams) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadLog", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadLog indicates an expected call of DownloadLog.
func (mr *MockDownloaderMockRecorder) DownloadLog(arg0 any) *MockDownloaderDownloadLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadLog", reflect.TypeOf((*MockDownloader)(nil).DownloadLog), arg0)
	return &MockDownloaderDownloadLogCall{Call: call}
}

// MockDownloaderDownloadLogCall wrap *gomock.Call
type MockDownloaderDownloadLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloaderDownloadLogCall) Return(arg0 io.ReadCloser, arg1 error) *MockDownloaderDownloadLogCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloaderDownloadLogCall) Do(f func(*admin.GetHostLogsApiParams) (io.ReadCloser, error)) *MockDownloaderDownloadLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloaderDownloadLogCall) DoAndReturn(f func(*admin.GetHostLogsApiParams) (io.ReadCloser, error)) *MockDownloaderDownloadLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
