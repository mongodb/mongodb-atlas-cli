// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/maintenance (interfaces: Describer)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=maintenance . Describer
//

// Package maintenance is a generated GoMock package.
package maintenance

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockDescriber is a mock of Describer interface.
type MockDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockDescriberMockRecorder
	isgomock struct{}
}

// MockDescriberMockRecorder is the mock recorder for MockDescriber.
type MockDescriberMockRecorder struct {
	mock *MockDescriber
}

// NewMockDescriber creates a new mock instance.
func NewMockDescriber(ctrl *gomock.Controller) *MockDescriber {
	mock := &MockDescriber{ctrl: ctrl}
	mock.recorder = &MockDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescriber) EXPECT() *MockDescriberMockRecorder {
	return m.recorder
}

// MaintenanceWindow mocks base method.
func (m *MockDescriber) MaintenanceWindow(arg0 string) (*admin.GroupMaintenanceWindow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaintenanceWindow", arg0)
	ret0, _ := ret[0].(*admin.GroupMaintenanceWindow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaintenanceWindow indicates an expected call of MaintenanceWindow.
func (mr *MockDescriberMockRecorder) MaintenanceWindow(arg0 any) *MockDescriberMaintenanceWindowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaintenanceWindow", reflect.TypeOf((*MockDescriber)(nil).MaintenanceWindow), arg0)
	return &MockDescriberMaintenanceWindowCall{Call: call}
}

// MockDescriberMaintenanceWindowCall wrap *gomock.Call
type MockDescriberMaintenanceWindowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDescriberMaintenanceWindowCall) Return(arg0 *admin.GroupMaintenanceWindow, arg1 error) *MockDescriberMaintenanceWindowCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDescriberMaintenanceWindowCall) Do(f func(string) (*admin.GroupMaintenanceWindow, error)) *MockDescriberMaintenanceWindowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDescriberMaintenanceWindowCall) DoAndReturn(f func(string) (*admin.GroupMaintenanceWindow, error)) *MockDescriberMaintenanceWindowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
