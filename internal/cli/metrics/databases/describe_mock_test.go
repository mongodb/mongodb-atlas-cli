// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/metrics/databases (interfaces: ProcessDatabaseMeasurementsLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=databases . ProcessDatabaseMeasurementsLister
//

// Package databases is a generated GoMock package.
package databases

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProcessDatabaseMeasurementsLister is a mock of ProcessDatabaseMeasurementsLister interface.
type MockProcessDatabaseMeasurementsLister struct {
	ctrl     *gomock.Controller
	recorder *MockProcessDatabaseMeasurementsListerMockRecorder
	isgomock struct{}
}

// MockProcessDatabaseMeasurementsListerMockRecorder is the mock recorder for MockProcessDatabaseMeasurementsLister.
type MockProcessDatabaseMeasurementsListerMockRecorder struct {
	mock *MockProcessDatabaseMeasurementsLister
}

// NewMockProcessDatabaseMeasurementsLister creates a new mock instance.
func NewMockProcessDatabaseMeasurementsLister(ctrl *gomock.Controller) *MockProcessDatabaseMeasurementsLister {
	mock := &MockProcessDatabaseMeasurementsLister{ctrl: ctrl}
	mock.recorder = &MockProcessDatabaseMeasurementsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessDatabaseMeasurementsLister) EXPECT() *MockProcessDatabaseMeasurementsListerMockRecorder {
	return m.recorder
}

// ProcessDatabaseMeasurements mocks base method.
func (m *MockProcessDatabaseMeasurementsLister) ProcessDatabaseMeasurements(arg0 *admin.GetDatabaseMeasurementsApiParams) (*admin.ApiMeasurementsGeneralViewAtlas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDatabaseMeasurements", arg0)
	ret0, _ := ret[0].(*admin.ApiMeasurementsGeneralViewAtlas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessDatabaseMeasurements indicates an expected call of ProcessDatabaseMeasurements.
func (mr *MockProcessDatabaseMeasurementsListerMockRecorder) ProcessDatabaseMeasurements(arg0 any) *MockProcessDatabaseMeasurementsListerProcessDatabaseMeasurementsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDatabaseMeasurements", reflect.TypeOf((*MockProcessDatabaseMeasurementsLister)(nil).ProcessDatabaseMeasurements), arg0)
	return &MockProcessDatabaseMeasurementsListerProcessDatabaseMeasurementsCall{Call: call}
}

// MockProcessDatabaseMeasurementsListerProcessDatabaseMeasurementsCall wrap *gomock.Call
type MockProcessDatabaseMeasurementsListerProcessDatabaseMeasurementsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProcessDatabaseMeasurementsListerProcessDatabaseMeasurementsCall) Return(arg0 *admin.ApiMeasurementsGeneralViewAtlas, arg1 error) *MockProcessDatabaseMeasurementsListerProcessDatabaseMeasurementsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProcessDatabaseMeasurementsListerProcessDatabaseMeasurementsCall) Do(f func(*admin.GetDatabaseMeasurementsApiParams) (*admin.ApiMeasurementsGeneralViewAtlas, error)) *MockProcessDatabaseMeasurementsListerProcessDatabaseMeasurementsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProcessDatabaseMeasurementsListerProcessDatabaseMeasurementsCall) DoAndReturn(f func(*admin.GetDatabaseMeasurementsApiParams) (*admin.ApiMeasurementsGeneralViewAtlas, error)) *MockProcessDatabaseMeasurementsListerProcessDatabaseMeasurementsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
