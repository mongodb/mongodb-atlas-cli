// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/metrics/databases (interfaces: ProcessDatabaseLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=databases . ProcessDatabaseLister
//

// Package databases is a generated GoMock package.
package databases

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProcessDatabaseLister is a mock of ProcessDatabaseLister interface.
type MockProcessDatabaseLister struct {
	ctrl     *gomock.Controller
	recorder *MockProcessDatabaseListerMockRecorder
	isgomock struct{}
}

// MockProcessDatabaseListerMockRecorder is the mock recorder for MockProcessDatabaseLister.
type MockProcessDatabaseListerMockRecorder struct {
	mock *MockProcessDatabaseLister
}

// NewMockProcessDatabaseLister creates a new mock instance.
func NewMockProcessDatabaseLister(ctrl *gomock.Controller) *MockProcessDatabaseLister {
	mock := &MockProcessDatabaseLister{ctrl: ctrl}
	mock.recorder = &MockProcessDatabaseListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessDatabaseLister) EXPECT() *MockProcessDatabaseListerMockRecorder {
	return m.recorder
}

// ProcessDatabases mocks base method.
func (m *MockProcessDatabaseLister) ProcessDatabases(arg0, arg1 string, arg2 int, arg3 *store.ListOptions) (*admin.PaginatedDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDatabases", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*admin.PaginatedDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessDatabases indicates an expected call of ProcessDatabases.
func (mr *MockProcessDatabaseListerMockRecorder) ProcessDatabases(arg0, arg1, arg2, arg3 any) *MockProcessDatabaseListerProcessDatabasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDatabases", reflect.TypeOf((*MockProcessDatabaseLister)(nil).ProcessDatabases), arg0, arg1, arg2, arg3)
	return &MockProcessDatabaseListerProcessDatabasesCall{Call: call}
}

// MockProcessDatabaseListerProcessDatabasesCall wrap *gomock.Call
type MockProcessDatabaseListerProcessDatabasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProcessDatabaseListerProcessDatabasesCall) Return(arg0 *admin.PaginatedDatabase, arg1 error) *MockProcessDatabaseListerProcessDatabasesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProcessDatabaseListerProcessDatabasesCall) Do(f func(string, string, int, *store.ListOptions) (*admin.PaginatedDatabase, error)) *MockProcessDatabaseListerProcessDatabasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProcessDatabaseListerProcessDatabasesCall) DoAndReturn(f func(string, string, int, *store.ListOptions) (*admin.PaginatedDatabase, error)) *MockProcessDatabaseListerProcessDatabasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
