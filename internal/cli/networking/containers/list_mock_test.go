// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/networking/containers (interfaces: Lister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=containers . Lister
//

// Package containers is a generated GoMock package.
package containers

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockLister is a mock of Lister interface.
type MockLister struct {
	ctrl     *gomock.Controller
	recorder *MockListerMockRecorder
	isgomock struct{}
}

// MockListerMockRecorder is the mock recorder for MockLister.
type MockListerMockRecorder struct {
	mock *MockLister
}

// NewMockLister creates a new mock instance.
func NewMockLister(ctrl *gomock.Controller) *MockLister {
	mock := &MockLister{ctrl: ctrl}
	mock.recorder = &MockListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLister) EXPECT() *MockListerMockRecorder {
	return m.recorder
}

// AllContainers mocks base method.
func (m *MockLister) AllContainers(arg0 string, arg1 *store.ListOptions) ([]admin.CloudProviderContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllContainers", arg0, arg1)
	ret0, _ := ret[0].([]admin.CloudProviderContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllContainers indicates an expected call of AllContainers.
func (mr *MockListerMockRecorder) AllContainers(arg0, arg1 any) *MockListerAllContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllContainers", reflect.TypeOf((*MockLister)(nil).AllContainers), arg0, arg1)
	return &MockListerAllContainersCall{Call: call}
}

// MockListerAllContainersCall wrap *gomock.Call
type MockListerAllContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListerAllContainersCall) Return(arg0 []admin.CloudProviderContainer, arg1 error) *MockListerAllContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListerAllContainersCall) Do(f func(string, *store.ListOptions) ([]admin.CloudProviderContainer, error)) *MockListerAllContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListerAllContainersCall) DoAndReturn(f func(string, *store.ListOptions) ([]admin.CloudProviderContainer, error)) *MockListerAllContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ContainersByProvider mocks base method.
func (m *MockLister) ContainersByProvider(arg0 string, arg1 *store.ContainersListOptions) ([]admin.CloudProviderContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainersByProvider", arg0, arg1)
	ret0, _ := ret[0].([]admin.CloudProviderContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainersByProvider indicates an expected call of ContainersByProvider.
func (mr *MockListerMockRecorder) ContainersByProvider(arg0, arg1 any) *MockListerContainersByProviderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainersByProvider", reflect.TypeOf((*MockLister)(nil).ContainersByProvider), arg0, arg1)
	return &MockListerContainersByProviderCall{Call: call}
}

// MockListerContainersByProviderCall wrap *gomock.Call
type MockListerContainersByProviderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListerContainersByProviderCall) Return(arg0 []admin.CloudProviderContainer, arg1 error) *MockListerContainersByProviderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListerContainersByProviderCall) Do(f func(string, *store.ContainersListOptions) ([]admin.CloudProviderContainer, error)) *MockListerContainersByProviderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListerContainersByProviderCall) DoAndReturn(f func(string, *store.ContainersListOptions) ([]admin.CloudProviderContainer, error)) *MockListerContainersByProviderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
