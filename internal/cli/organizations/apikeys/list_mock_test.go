// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/organizations/apikeys (interfaces: OrganizationAPIKeyLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=apikeys . OrganizationAPIKeyLister
//

// Package apikeys is a generated GoMock package.
package apikeys

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationAPIKeyLister is a mock of OrganizationAPIKeyLister interface.
type MockOrganizationAPIKeyLister struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationAPIKeyListerMockRecorder
	isgomock struct{}
}

// MockOrganizationAPIKeyListerMockRecorder is the mock recorder for MockOrganizationAPIKeyLister.
type MockOrganizationAPIKeyListerMockRecorder struct {
	mock *MockOrganizationAPIKeyLister
}

// NewMockOrganizationAPIKeyLister creates a new mock instance.
func NewMockOrganizationAPIKeyLister(ctrl *gomock.Controller) *MockOrganizationAPIKeyLister {
	mock := &MockOrganizationAPIKeyLister{ctrl: ctrl}
	mock.recorder = &MockOrganizationAPIKeyListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationAPIKeyLister) EXPECT() *MockOrganizationAPIKeyListerMockRecorder {
	return m.recorder
}

// OrganizationAPIKeys mocks base method.
func (m *MockOrganizationAPIKeyLister) OrganizationAPIKeys(arg0 string, arg1 *store.ListOptions) (*admin.PaginatedApiApiUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationAPIKeys", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedApiApiUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationAPIKeys indicates an expected call of OrganizationAPIKeys.
func (mr *MockOrganizationAPIKeyListerMockRecorder) OrganizationAPIKeys(arg0, arg1 any) *MockOrganizationAPIKeyListerOrganizationAPIKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationAPIKeys", reflect.TypeOf((*MockOrganizationAPIKeyLister)(nil).OrganizationAPIKeys), arg0, arg1)
	return &MockOrganizationAPIKeyListerOrganizationAPIKeysCall{Call: call}
}

// MockOrganizationAPIKeyListerOrganizationAPIKeysCall wrap *gomock.Call
type MockOrganizationAPIKeyListerOrganizationAPIKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrganizationAPIKeyListerOrganizationAPIKeysCall) Return(arg0 *admin.PaginatedApiApiUser, arg1 error) *MockOrganizationAPIKeyListerOrganizationAPIKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrganizationAPIKeyListerOrganizationAPIKeysCall) Do(f func(string, *store.ListOptions) (*admin.PaginatedApiApiUser, error)) *MockOrganizationAPIKeyListerOrganizationAPIKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrganizationAPIKeyListerOrganizationAPIKeysCall) DoAndReturn(f func(string, *store.ListOptions) (*admin.PaginatedApiApiUser, error)) *MockOrganizationAPIKeyListerOrganizationAPIKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
