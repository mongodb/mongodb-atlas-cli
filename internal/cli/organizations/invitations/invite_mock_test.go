// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/organizations/invitations (interfaces: OrganizationInviter)
//
// Generated by this command:
//
//	mockgen -typed -destination=invite_mock_test.go -package=invitations . OrganizationInviter
//

// Package invitations is a generated GoMock package.
package invitations

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationInviter is a mock of OrganizationInviter interface.
type MockOrganizationInviter struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationInviterMockRecorder
	isgomock struct{}
}

// MockOrganizationInviterMockRecorder is the mock recorder for MockOrganizationInviter.
type MockOrganizationInviterMockRecorder struct {
	mock *MockOrganizationInviter
}

// NewMockOrganizationInviter creates a new mock instance.
func NewMockOrganizationInviter(ctrl *gomock.Controller) *MockOrganizationInviter {
	mock := &MockOrganizationInviter{ctrl: ctrl}
	mock.recorder = &MockOrganizationInviterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationInviter) EXPECT() *MockOrganizationInviterMockRecorder {
	return m.recorder
}

// InviteUser mocks base method.
func (m *MockOrganizationInviter) InviteUser(arg0 string, arg1 *admin.OrganizationInvitationRequest) (*admin.OrganizationInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUser", arg0, arg1)
	ret0, _ := ret[0].(*admin.OrganizationInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUser indicates an expected call of InviteUser.
func (mr *MockOrganizationInviterMockRecorder) InviteUser(arg0, arg1 any) *MockOrganizationInviterInviteUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUser", reflect.TypeOf((*MockOrganizationInviter)(nil).InviteUser), arg0, arg1)
	return &MockOrganizationInviterInviteUserCall{Call: call}
}

// MockOrganizationInviterInviteUserCall wrap *gomock.Call
type MockOrganizationInviterInviteUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrganizationInviterInviteUserCall) Return(arg0 *admin.OrganizationInvitation, arg1 error) *MockOrganizationInviterInviteUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrganizationInviterInviteUserCall) Do(f func(string, *admin.OrganizationInvitationRequest) (*admin.OrganizationInvitation, error)) *MockOrganizationInviterInviteUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrganizationInviterInviteUserCall) DoAndReturn(f func(string, *admin.OrganizationInvitationRequest) (*admin.OrganizationInvitation, error)) *MockOrganizationInviterInviteUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
