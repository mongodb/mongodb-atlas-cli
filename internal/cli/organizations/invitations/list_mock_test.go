// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/organizations/invitations (interfaces: OrganizationInvitationLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=invitations . OrganizationInvitationLister
//

// Package invitations is a generated GoMock package.
package invitations

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationInvitationLister is a mock of OrganizationInvitationLister interface.
type MockOrganizationInvitationLister struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationInvitationListerMockRecorder
	isgomock struct{}
}

// MockOrganizationInvitationListerMockRecorder is the mock recorder for MockOrganizationInvitationLister.
type MockOrganizationInvitationListerMockRecorder struct {
	mock *MockOrganizationInvitationLister
}

// NewMockOrganizationInvitationLister creates a new mock instance.
func NewMockOrganizationInvitationLister(ctrl *gomock.Controller) *MockOrganizationInvitationLister {
	mock := &MockOrganizationInvitationLister{ctrl: ctrl}
	mock.recorder = &MockOrganizationInvitationListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationInvitationLister) EXPECT() *MockOrganizationInvitationListerMockRecorder {
	return m.recorder
}

// OrganizationInvitations mocks base method.
func (m *MockOrganizationInvitationLister) OrganizationInvitations(arg0 *admin.ListOrganizationInvitationsApiParams) ([]admin.OrganizationInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationInvitations", arg0)
	ret0, _ := ret[0].([]admin.OrganizationInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationInvitations indicates an expected call of OrganizationInvitations.
func (mr *MockOrganizationInvitationListerMockRecorder) OrganizationInvitations(arg0 any) *MockOrganizationInvitationListerOrganizationInvitationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationInvitations", reflect.TypeOf((*MockOrganizationInvitationLister)(nil).OrganizationInvitations), arg0)
	return &MockOrganizationInvitationListerOrganizationInvitationsCall{Call: call}
}

// MockOrganizationInvitationListerOrganizationInvitationsCall wrap *gomock.Call
type MockOrganizationInvitationListerOrganizationInvitationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrganizationInvitationListerOrganizationInvitationsCall) Return(arg0 []admin.OrganizationInvitation, arg1 error) *MockOrganizationInvitationListerOrganizationInvitationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrganizationInvitationListerOrganizationInvitationsCall) Do(f func(*admin.ListOrganizationInvitationsApiParams) ([]admin.OrganizationInvitation, error)) *MockOrganizationInvitationListerOrganizationInvitationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrganizationInvitationListerOrganizationInvitationsCall) DoAndReturn(f func(*admin.ListOrganizationInvitationsApiParams) ([]admin.OrganizationInvitation, error)) *MockOrganizationInvitationListerOrganizationInvitationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
