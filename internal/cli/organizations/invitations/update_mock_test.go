// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/organizations/invitations (interfaces: OrganizationInvitationUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=invitations . OrganizationInvitationUpdater
//

// Package invitations is a generated GoMock package.
package invitations

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationInvitationUpdater is a mock of OrganizationInvitationUpdater interface.
type MockOrganizationInvitationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationInvitationUpdaterMockRecorder
	isgomock struct{}
}

// MockOrganizationInvitationUpdaterMockRecorder is the mock recorder for MockOrganizationInvitationUpdater.
type MockOrganizationInvitationUpdaterMockRecorder struct {
	mock *MockOrganizationInvitationUpdater
}

// NewMockOrganizationInvitationUpdater creates a new mock instance.
func NewMockOrganizationInvitationUpdater(ctrl *gomock.Controller) *MockOrganizationInvitationUpdater {
	mock := &MockOrganizationInvitationUpdater{ctrl: ctrl}
	mock.recorder = &MockOrganizationInvitationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationInvitationUpdater) EXPECT() *MockOrganizationInvitationUpdaterMockRecorder {
	return m.recorder
}

// UpdateOrganizationInvitation mocks base method.
func (m *MockOrganizationInvitationUpdater) UpdateOrganizationInvitation(arg0, arg1 string, arg2 *admin.OrganizationInvitationRequest) (*admin.OrganizationInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationInvitation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.OrganizationInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationInvitation indicates an expected call of UpdateOrganizationInvitation.
func (mr *MockOrganizationInvitationUpdaterMockRecorder) UpdateOrganizationInvitation(arg0, arg1, arg2 any) *MockOrganizationInvitationUpdaterUpdateOrganizationInvitationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationInvitation", reflect.TypeOf((*MockOrganizationInvitationUpdater)(nil).UpdateOrganizationInvitation), arg0, arg1, arg2)
	return &MockOrganizationInvitationUpdaterUpdateOrganizationInvitationCall{Call: call}
}

// MockOrganizationInvitationUpdaterUpdateOrganizationInvitationCall wrap *gomock.Call
type MockOrganizationInvitationUpdaterUpdateOrganizationInvitationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrganizationInvitationUpdaterUpdateOrganizationInvitationCall) Return(arg0 *admin.OrganizationInvitation, arg1 error) *MockOrganizationInvitationUpdaterUpdateOrganizationInvitationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrganizationInvitationUpdaterUpdateOrganizationInvitationCall) Do(f func(string, string, *admin.OrganizationInvitationRequest) (*admin.OrganizationInvitation, error)) *MockOrganizationInvitationUpdaterUpdateOrganizationInvitationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrganizationInvitationUpdaterUpdateOrganizationInvitationCall) DoAndReturn(f func(string, string, *admin.OrganizationInvitationRequest) (*admin.OrganizationInvitation, error)) *MockOrganizationInvitationUpdaterUpdateOrganizationInvitationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
