// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/organizations (interfaces: OrganizationLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=organizations . OrganizationLister
//

// Package organizations is a generated GoMock package.
package organizations

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationLister is a mock of OrganizationLister interface.
type MockOrganizationLister struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationListerMockRecorder
	isgomock struct{}
}

// MockOrganizationListerMockRecorder is the mock recorder for MockOrganizationLister.
type MockOrganizationListerMockRecorder struct {
	mock *MockOrganizationLister
}

// NewMockOrganizationLister creates a new mock instance.
func NewMockOrganizationLister(ctrl *gomock.Controller) *MockOrganizationLister {
	mock := &MockOrganizationLister{ctrl: ctrl}
	mock.recorder = &MockOrganizationListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationLister) EXPECT() *MockOrganizationListerMockRecorder {
	return m.recorder
}

// Organizations mocks base method.
func (m *MockOrganizationLister) Organizations(arg0 *admin.ListOrganizationsApiParams) (*admin.PaginatedOrganization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Organizations", arg0)
	ret0, _ := ret[0].(*admin.PaginatedOrganization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Organizations indicates an expected call of Organizations.
func (mr *MockOrganizationListerMockRecorder) Organizations(arg0 any) *MockOrganizationListerOrganizationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Organizations", reflect.TypeOf((*MockOrganizationLister)(nil).Organizations), arg0)
	return &MockOrganizationListerOrganizationsCall{Call: call}
}

// MockOrganizationListerOrganizationsCall wrap *gomock.Call
type MockOrganizationListerOrganizationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrganizationListerOrganizationsCall) Return(arg0 *admin.PaginatedOrganization, arg1 error) *MockOrganizationListerOrganizationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrganizationListerOrganizationsCall) Do(f func(*admin.ListOrganizationsApiParams) (*admin.PaginatedOrganization, error)) *MockOrganizationListerOrganizationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrganizationListerOrganizationsCall) DoAndReturn(f func(*admin.ListOrganizationsApiParams) (*admin.PaginatedOrganization, error)) *MockOrganizationListerOrganizationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
