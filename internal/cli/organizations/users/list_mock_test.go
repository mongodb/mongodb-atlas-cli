// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/organizations/users (interfaces: UserLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=users . UserLister
//

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockUserLister is a mock of UserLister interface.
type MockUserLister struct {
	ctrl     *gomock.Controller
	recorder *MockUserListerMockRecorder
	isgomock struct{}
}

// MockUserListerMockRecorder is the mock recorder for MockUserLister.
type MockUserListerMockRecorder struct {
	mock *MockUserLister
}

// NewMockUserLister creates a new mock instance.
func NewMockUserLister(ctrl *gomock.Controller) *MockUserLister {
	mock := &MockUserLister{ctrl: ctrl}
	mock.recorder = &MockUserListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLister) EXPECT() *MockUserListerMockRecorder {
	return m.recorder
}

// OrganizationUsers mocks base method.
func (m *MockUserLister) OrganizationUsers(arg0 string, arg1 *store.ListOptions) (*admin.PaginatedOrgUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationUsers", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedOrgUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationUsers indicates an expected call of OrganizationUsers.
func (mr *MockUserListerMockRecorder) OrganizationUsers(arg0, arg1 any) *MockUserListerOrganizationUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationUsers", reflect.TypeOf((*MockUserLister)(nil).OrganizationUsers), arg0, arg1)
	return &MockUserListerOrganizationUsersCall{Call: call}
}

// MockUserListerOrganizationUsersCall wrap *gomock.Call
type MockUserListerOrganizationUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserListerOrganizationUsersCall) Return(arg0 *admin.PaginatedOrgUser, arg1 error) *MockUserListerOrganizationUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserListerOrganizationUsersCall) Do(f func(string, *store.ListOptions) (*admin.PaginatedOrgUser, error)) *MockUserListerOrganizationUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserListerOrganizationUsersCall) DoAndReturn(f func(string, *store.ListOptions) (*admin.PaginatedOrgUser, error)) *MockUserListerOrganizationUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
