// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/performanceadvisor/namespaces (interfaces: PerformanceAdvisorNamespacesLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=namespaces . PerformanceAdvisorNamespacesLister
//

// Package namespaces is a generated GoMock package.
package namespaces

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockPerformanceAdvisorNamespacesLister is a mock of PerformanceAdvisorNamespacesLister interface.
type MockPerformanceAdvisorNamespacesLister struct {
	ctrl     *gomock.Controller
	recorder *MockPerformanceAdvisorNamespacesListerMockRecorder
	isgomock struct{}
}

// MockPerformanceAdvisorNamespacesListerMockRecorder is the mock recorder for MockPerformanceAdvisorNamespacesLister.
type MockPerformanceAdvisorNamespacesListerMockRecorder struct {
	mock *MockPerformanceAdvisorNamespacesLister
}

// NewMockPerformanceAdvisorNamespacesLister creates a new mock instance.
func NewMockPerformanceAdvisorNamespacesLister(ctrl *gomock.Controller) *MockPerformanceAdvisorNamespacesLister {
	mock := &MockPerformanceAdvisorNamespacesLister{ctrl: ctrl}
	mock.recorder = &MockPerformanceAdvisorNamespacesListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerformanceAdvisorNamespacesLister) EXPECT() *MockPerformanceAdvisorNamespacesListerMockRecorder {
	return m.recorder
}

// PerformanceAdvisorNamespaces mocks base method.
func (m *MockPerformanceAdvisorNamespacesLister) PerformanceAdvisorNamespaces(opts *admin.ListSlowQueryNamespacesApiParams) (*admin.Namespaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformanceAdvisorNamespaces", opts)
	ret0, _ := ret[0].(*admin.Namespaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformanceAdvisorNamespaces indicates an expected call of PerformanceAdvisorNamespaces.
func (mr *MockPerformanceAdvisorNamespacesListerMockRecorder) PerformanceAdvisorNamespaces(opts any) *MockPerformanceAdvisorNamespacesListerPerformanceAdvisorNamespacesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformanceAdvisorNamespaces", reflect.TypeOf((*MockPerformanceAdvisorNamespacesLister)(nil).PerformanceAdvisorNamespaces), opts)
	return &MockPerformanceAdvisorNamespacesListerPerformanceAdvisorNamespacesCall{Call: call}
}

// MockPerformanceAdvisorNamespacesListerPerformanceAdvisorNamespacesCall wrap *gomock.Call
type MockPerformanceAdvisorNamespacesListerPerformanceAdvisorNamespacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPerformanceAdvisorNamespacesListerPerformanceAdvisorNamespacesCall) Return(arg0 *admin.Namespaces, arg1 error) *MockPerformanceAdvisorNamespacesListerPerformanceAdvisorNamespacesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPerformanceAdvisorNamespacesListerPerformanceAdvisorNamespacesCall) Do(f func(*admin.ListSlowQueryNamespacesApiParams) (*admin.Namespaces, error)) *MockPerformanceAdvisorNamespacesListerPerformanceAdvisorNamespacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPerformanceAdvisorNamespacesListerPerformanceAdvisorNamespacesCall) DoAndReturn(f func(*admin.ListSlowQueryNamespacesApiParams) (*admin.Namespaces, error)) *MockPerformanceAdvisorNamespacesListerPerformanceAdvisorNamespacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
