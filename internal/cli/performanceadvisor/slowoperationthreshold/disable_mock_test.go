// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/performanceadvisor/slowoperationthreshold (interfaces: PerformanceAdvisorSlowOperationThresholdDisabler)
//
// Generated by this command:
//
//	mockgen -typed -destination=disable_mock_test.go -package=slowoperationthreshold . PerformanceAdvisorSlowOperationThresholdDisabler
//

// Package slowoperationthreshold is a generated GoMock package.
package slowoperationthreshold

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPerformanceAdvisorSlowOperationThresholdDisabler is a mock of PerformanceAdvisorSlowOperationThresholdDisabler interface.
type MockPerformanceAdvisorSlowOperationThresholdDisabler struct {
	ctrl     *gomock.Controller
	recorder *MockPerformanceAdvisorSlowOperationThresholdDisablerMockRecorder
	isgomock struct{}
}

// MockPerformanceAdvisorSlowOperationThresholdDisablerMockRecorder is the mock recorder for MockPerformanceAdvisorSlowOperationThresholdDisabler.
type MockPerformanceAdvisorSlowOperationThresholdDisablerMockRecorder struct {
	mock *MockPerformanceAdvisorSlowOperationThresholdDisabler
}

// NewMockPerformanceAdvisorSlowOperationThresholdDisabler creates a new mock instance.
func NewMockPerformanceAdvisorSlowOperationThresholdDisabler(ctrl *gomock.Controller) *MockPerformanceAdvisorSlowOperationThresholdDisabler {
	mock := &MockPerformanceAdvisorSlowOperationThresholdDisabler{ctrl: ctrl}
	mock.recorder = &MockPerformanceAdvisorSlowOperationThresholdDisablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerformanceAdvisorSlowOperationThresholdDisabler) EXPECT() *MockPerformanceAdvisorSlowOperationThresholdDisablerMockRecorder {
	return m.recorder
}

// DisablePerformanceAdvisorSlowOperationThreshold mocks base method.
func (m *MockPerformanceAdvisorSlowOperationThresholdDisabler) DisablePerformanceAdvisorSlowOperationThreshold(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisablePerformanceAdvisorSlowOperationThreshold", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisablePerformanceAdvisorSlowOperationThreshold indicates an expected call of DisablePerformanceAdvisorSlowOperationThreshold.
func (mr *MockPerformanceAdvisorSlowOperationThresholdDisablerMockRecorder) DisablePerformanceAdvisorSlowOperationThreshold(arg0 any) *MockPerformanceAdvisorSlowOperationThresholdDisablerDisablePerformanceAdvisorSlowOperationThresholdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisablePerformanceAdvisorSlowOperationThreshold", reflect.TypeOf((*MockPerformanceAdvisorSlowOperationThresholdDisabler)(nil).DisablePerformanceAdvisorSlowOperationThreshold), arg0)
	return &MockPerformanceAdvisorSlowOperationThresholdDisablerDisablePerformanceAdvisorSlowOperationThresholdCall{Call: call}
}

// MockPerformanceAdvisorSlowOperationThresholdDisablerDisablePerformanceAdvisorSlowOperationThresholdCall wrap *gomock.Call
type MockPerformanceAdvisorSlowOperationThresholdDisablerDisablePerformanceAdvisorSlowOperationThresholdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPerformanceAdvisorSlowOperationThresholdDisablerDisablePerformanceAdvisorSlowOperationThresholdCall) Return(arg0 error) *MockPerformanceAdvisorSlowOperationThresholdDisablerDisablePerformanceAdvisorSlowOperationThresholdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPerformanceAdvisorSlowOperationThresholdDisablerDisablePerformanceAdvisorSlowOperationThresholdCall) Do(f func(string) error) *MockPerformanceAdvisorSlowOperationThresholdDisablerDisablePerformanceAdvisorSlowOperationThresholdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPerformanceAdvisorSlowOperationThresholdDisablerDisablePerformanceAdvisorSlowOperationThresholdCall) DoAndReturn(f func(string) error) *MockPerformanceAdvisorSlowOperationThresholdDisablerDisablePerformanceAdvisorSlowOperationThresholdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
