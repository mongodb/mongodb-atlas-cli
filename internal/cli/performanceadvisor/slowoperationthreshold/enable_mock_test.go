// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/performanceadvisor/slowoperationthreshold (interfaces: PerformanceAdvisorSlowOperationThresholdEnabler)
//
// Generated by this command:
//
//	mockgen -typed -destination=enable_mock_test.go -package=slowoperationthreshold . PerformanceAdvisorSlowOperationThresholdEnabler
//

// Package slowoperationthreshold is a generated GoMock package.
package slowoperationthreshold

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPerformanceAdvisorSlowOperationThresholdEnabler is a mock of PerformanceAdvisorSlowOperationThresholdEnabler interface.
type MockPerformanceAdvisorSlowOperationThresholdEnabler struct {
	ctrl     *gomock.Controller
	recorder *MockPerformanceAdvisorSlowOperationThresholdEnablerMockRecorder
	isgomock struct{}
}

// MockPerformanceAdvisorSlowOperationThresholdEnablerMockRecorder is the mock recorder for MockPerformanceAdvisorSlowOperationThresholdEnabler.
type MockPerformanceAdvisorSlowOperationThresholdEnablerMockRecorder struct {
	mock *MockPerformanceAdvisorSlowOperationThresholdEnabler
}

// NewMockPerformanceAdvisorSlowOperationThresholdEnabler creates a new mock instance.
func NewMockPerformanceAdvisorSlowOperationThresholdEnabler(ctrl *gomock.Controller) *MockPerformanceAdvisorSlowOperationThresholdEnabler {
	mock := &MockPerformanceAdvisorSlowOperationThresholdEnabler{ctrl: ctrl}
	mock.recorder = &MockPerformanceAdvisorSlowOperationThresholdEnablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerformanceAdvisorSlowOperationThresholdEnabler) EXPECT() *MockPerformanceAdvisorSlowOperationThresholdEnablerMockRecorder {
	return m.recorder
}

// EnablePerformanceAdvisorSlowOperationThreshold mocks base method.
func (m *MockPerformanceAdvisorSlowOperationThresholdEnabler) EnablePerformanceAdvisorSlowOperationThreshold(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnablePerformanceAdvisorSlowOperationThreshold", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnablePerformanceAdvisorSlowOperationThreshold indicates an expected call of EnablePerformanceAdvisorSlowOperationThreshold.
func (mr *MockPerformanceAdvisorSlowOperationThresholdEnablerMockRecorder) EnablePerformanceAdvisorSlowOperationThreshold(arg0 any) *MockPerformanceAdvisorSlowOperationThresholdEnablerEnablePerformanceAdvisorSlowOperationThresholdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnablePerformanceAdvisorSlowOperationThreshold", reflect.TypeOf((*MockPerformanceAdvisorSlowOperationThresholdEnabler)(nil).EnablePerformanceAdvisorSlowOperationThreshold), arg0)
	return &MockPerformanceAdvisorSlowOperationThresholdEnablerEnablePerformanceAdvisorSlowOperationThresholdCall{Call: call}
}

// MockPerformanceAdvisorSlowOperationThresholdEnablerEnablePerformanceAdvisorSlowOperationThresholdCall wrap *gomock.Call
type MockPerformanceAdvisorSlowOperationThresholdEnablerEnablePerformanceAdvisorSlowOperationThresholdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPerformanceAdvisorSlowOperationThresholdEnablerEnablePerformanceAdvisorSlowOperationThresholdCall) Return(arg0 error) *MockPerformanceAdvisorSlowOperationThresholdEnablerEnablePerformanceAdvisorSlowOperationThresholdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPerformanceAdvisorSlowOperationThresholdEnablerEnablePerformanceAdvisorSlowOperationThresholdCall) Do(f func(string) error) *MockPerformanceAdvisorSlowOperationThresholdEnablerEnablePerformanceAdvisorSlowOperationThresholdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPerformanceAdvisorSlowOperationThresholdEnablerEnablePerformanceAdvisorSlowOperationThresholdCall) DoAndReturn(f func(string) error) *MockPerformanceAdvisorSlowOperationThresholdEnablerEnablePerformanceAdvisorSlowOperationThresholdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
