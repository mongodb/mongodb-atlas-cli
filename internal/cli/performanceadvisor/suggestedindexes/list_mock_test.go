// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/performanceadvisor/suggestedindexes (interfaces: PerformanceAdvisorIndexesLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=suggestedindexes . PerformanceAdvisorIndexesLister
//

// Package suggestedindexes is a generated GoMock package.
package suggestedindexes

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockPerformanceAdvisorIndexesLister is a mock of PerformanceAdvisorIndexesLister interface.
type MockPerformanceAdvisorIndexesLister struct {
	ctrl     *gomock.Controller
	recorder *MockPerformanceAdvisorIndexesListerMockRecorder
	isgomock struct{}
}

// MockPerformanceAdvisorIndexesListerMockRecorder is the mock recorder for MockPerformanceAdvisorIndexesLister.
type MockPerformanceAdvisorIndexesListerMockRecorder struct {
	mock *MockPerformanceAdvisorIndexesLister
}

// NewMockPerformanceAdvisorIndexesLister creates a new mock instance.
func NewMockPerformanceAdvisorIndexesLister(ctrl *gomock.Controller) *MockPerformanceAdvisorIndexesLister {
	mock := &MockPerformanceAdvisorIndexesLister{ctrl: ctrl}
	mock.recorder = &MockPerformanceAdvisorIndexesListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerformanceAdvisorIndexesLister) EXPECT() *MockPerformanceAdvisorIndexesListerMockRecorder {
	return m.recorder
}

// PerformanceAdvisorIndexes mocks base method.
func (m *MockPerformanceAdvisorIndexesLister) PerformanceAdvisorIndexes(arg0 *admin.ListSuggestedIndexesApiParams) (*admin.PerformanceAdvisorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformanceAdvisorIndexes", arg0)
	ret0, _ := ret[0].(*admin.PerformanceAdvisorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformanceAdvisorIndexes indicates an expected call of PerformanceAdvisorIndexes.
func (mr *MockPerformanceAdvisorIndexesListerMockRecorder) PerformanceAdvisorIndexes(arg0 any) *MockPerformanceAdvisorIndexesListerPerformanceAdvisorIndexesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformanceAdvisorIndexes", reflect.TypeOf((*MockPerformanceAdvisorIndexesLister)(nil).PerformanceAdvisorIndexes), arg0)
	return &MockPerformanceAdvisorIndexesListerPerformanceAdvisorIndexesCall{Call: call}
}

// MockPerformanceAdvisorIndexesListerPerformanceAdvisorIndexesCall wrap *gomock.Call
type MockPerformanceAdvisorIndexesListerPerformanceAdvisorIndexesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPerformanceAdvisorIndexesListerPerformanceAdvisorIndexesCall) Return(arg0 *admin.PerformanceAdvisorResponse, arg1 error) *MockPerformanceAdvisorIndexesListerPerformanceAdvisorIndexesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPerformanceAdvisorIndexesListerPerformanceAdvisorIndexesCall) Do(f func(*admin.ListSuggestedIndexesApiParams) (*admin.PerformanceAdvisorResponse, error)) *MockPerformanceAdvisorIndexesListerPerformanceAdvisorIndexesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPerformanceAdvisorIndexesListerPerformanceAdvisorIndexesCall) DoAndReturn(f func(*admin.ListSuggestedIndexesApiParams) (*admin.PerformanceAdvisorResponse, error)) *MockPerformanceAdvisorIndexesListerPerformanceAdvisorIndexesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
