// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/processes (interfaces: ProcessLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=processes . ProcessLister
//

// Package processes is a generated GoMock package.
package processes

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProcessLister is a mock of ProcessLister interface.
type MockProcessLister struct {
	ctrl     *gomock.Controller
	recorder *MockProcessListerMockRecorder
	isgomock struct{}
}

// MockProcessListerMockRecorder is the mock recorder for MockProcessLister.
type MockProcessListerMockRecorder struct {
	mock *MockProcessLister
}

// NewMockProcessLister creates a new mock instance.
func NewMockProcessLister(ctrl *gomock.Controller) *MockProcessLister {
	mock := &MockProcessLister{ctrl: ctrl}
	mock.recorder = &MockProcessListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessLister) EXPECT() *MockProcessListerMockRecorder {
	return m.recorder
}

// Processes mocks base method.
func (m *MockProcessLister) Processes(arg0 *admin.ListGroupProcessesApiParams) (*admin.PaginatedHostViewAtlas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processes", arg0)
	ret0, _ := ret[0].(*admin.PaginatedHostViewAtlas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Processes indicates an expected call of Processes.
func (mr *MockProcessListerMockRecorder) Processes(arg0 any) *MockProcessListerProcessesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processes", reflect.TypeOf((*MockProcessLister)(nil).Processes), arg0)
	return &MockProcessListerProcessesCall{Call: call}
}

// MockProcessListerProcessesCall wrap *gomock.Call
type MockProcessListerProcessesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProcessListerProcessesCall) Return(arg0 *admin.PaginatedHostViewAtlas, arg1 error) *MockProcessListerProcessesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProcessListerProcessesCall) Do(f func(*admin.ListGroupProcessesApiParams) (*admin.PaginatedHostViewAtlas, error)) *MockProcessListerProcessesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProcessListerProcessesCall) DoAndReturn(f func(*admin.ListGroupProcessesApiParams) (*admin.PaginatedHostViewAtlas, error)) *MockProcessListerProcessesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
