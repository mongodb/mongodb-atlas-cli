// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/apikeys (interfaces: ProjectAPIKeyLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=apikeys . ProjectAPIKeyLister
//

// Package apikeys is a generated GoMock package.
package apikeys

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectAPIKeyLister is a mock of ProjectAPIKeyLister interface.
type MockProjectAPIKeyLister struct {
	ctrl     *gomock.Controller
	recorder *MockProjectAPIKeyListerMockRecorder
	isgomock struct{}
}

// MockProjectAPIKeyListerMockRecorder is the mock recorder for MockProjectAPIKeyLister.
type MockProjectAPIKeyListerMockRecorder struct {
	mock *MockProjectAPIKeyLister
}

// NewMockProjectAPIKeyLister creates a new mock instance.
func NewMockProjectAPIKeyLister(ctrl *gomock.Controller) *MockProjectAPIKeyLister {
	mock := &MockProjectAPIKeyLister{ctrl: ctrl}
	mock.recorder = &MockProjectAPIKeyListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectAPIKeyLister) EXPECT() *MockProjectAPIKeyListerMockRecorder {
	return m.recorder
}

// ProjectAPIKeys mocks base method.
func (m *MockProjectAPIKeyLister) ProjectAPIKeys(arg0 string, arg1 *store.ListOptions) (*admin.PaginatedApiApiUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectAPIKeys", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedApiApiUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectAPIKeys indicates an expected call of ProjectAPIKeys.
func (mr *MockProjectAPIKeyListerMockRecorder) ProjectAPIKeys(arg0, arg1 any) *MockProjectAPIKeyListerProjectAPIKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectAPIKeys", reflect.TypeOf((*MockProjectAPIKeyLister)(nil).ProjectAPIKeys), arg0, arg1)
	return &MockProjectAPIKeyListerProjectAPIKeysCall{Call: call}
}

// MockProjectAPIKeyListerProjectAPIKeysCall wrap *gomock.Call
type MockProjectAPIKeyListerProjectAPIKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectAPIKeyListerProjectAPIKeysCall) Return(arg0 *admin.PaginatedApiApiUser, arg1 error) *MockProjectAPIKeyListerProjectAPIKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectAPIKeyListerProjectAPIKeysCall) Do(f func(string, *store.ListOptions) (*admin.PaginatedApiApiUser, error)) *MockProjectAPIKeyListerProjectAPIKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectAPIKeyListerProjectAPIKeysCall) DoAndReturn(f func(string, *store.ListOptions) (*admin.PaginatedApiApiUser, error)) *MockProjectAPIKeyListerProjectAPIKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
