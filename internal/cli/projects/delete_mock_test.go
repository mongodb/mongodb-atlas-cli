// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects (interfaces: ProjectDeleter)
//
// Generated by this command:
//
//	mockgen -typed -destination=delete_mock_test.go -package=projects . ProjectDeleter
//

// Package projects is a generated GoMock package.
package projects

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProjectDeleter is a mock of ProjectDeleter interface.
type MockProjectDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectDeleterMockRecorder
	isgomock struct{}
}

// MockProjectDeleterMockRecorder is the mock recorder for MockProjectDeleter.
type MockProjectDeleterMockRecorder struct {
	mock *MockProjectDeleter
}

// NewMockProjectDeleter creates a new mock instance.
func NewMockProjectDeleter(ctrl *gomock.Controller) *MockProjectDeleter {
	mock := &MockProjectDeleter{ctrl: ctrl}
	mock.recorder = &MockProjectDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectDeleter) EXPECT() *MockProjectDeleterMockRecorder {
	return m.recorder
}

// DeleteProject mocks base method.
func (m *MockProjectDeleter) DeleteProject(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockProjectDeleterMockRecorder) DeleteProject(arg0 any) *MockProjectDeleterDeleteProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockProjectDeleter)(nil).DeleteProject), arg0)
	return &MockProjectDeleterDeleteProjectCall{Call: call}
}

// MockProjectDeleterDeleteProjectCall wrap *gomock.Call
type MockProjectDeleterDeleteProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectDeleterDeleteProjectCall) Return(arg0 error) *MockProjectDeleterDeleteProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectDeleterDeleteProjectCall) Do(f func(string) error) *MockProjectDeleterDeleteProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectDeleterDeleteProjectCall) DoAndReturn(f func(string) error) *MockProjectDeleterDeleteProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
