// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/invitations (interfaces: ProjectInvitationDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=invitations . ProjectInvitationDescriber
//

// Package invitations is a generated GoMock package.
package invitations

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectInvitationDescriber is a mock of ProjectInvitationDescriber interface.
type MockProjectInvitationDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockProjectInvitationDescriberMockRecorder
	isgomock struct{}
}

// MockProjectInvitationDescriberMockRecorder is the mock recorder for MockProjectInvitationDescriber.
type MockProjectInvitationDescriberMockRecorder struct {
	mock *MockProjectInvitationDescriber
}

// NewMockProjectInvitationDescriber creates a new mock instance.
func NewMockProjectInvitationDescriber(ctrl *gomock.Controller) *MockProjectInvitationDescriber {
	mock := &MockProjectInvitationDescriber{ctrl: ctrl}
	mock.recorder = &MockProjectInvitationDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectInvitationDescriber) EXPECT() *MockProjectInvitationDescriberMockRecorder {
	return m.recorder
}

// ProjectInvitation mocks base method.
func (m *MockProjectInvitationDescriber) ProjectInvitation(arg0, arg1 string) (*admin.GroupInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectInvitation", arg0, arg1)
	ret0, _ := ret[0].(*admin.GroupInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectInvitation indicates an expected call of ProjectInvitation.
func (mr *MockProjectInvitationDescriberMockRecorder) ProjectInvitation(arg0, arg1 any) *MockProjectInvitationDescriberProjectInvitationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectInvitation", reflect.TypeOf((*MockProjectInvitationDescriber)(nil).ProjectInvitation), arg0, arg1)
	return &MockProjectInvitationDescriberProjectInvitationCall{Call: call}
}

// MockProjectInvitationDescriberProjectInvitationCall wrap *gomock.Call
type MockProjectInvitationDescriberProjectInvitationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectInvitationDescriberProjectInvitationCall) Return(arg0 *admin.GroupInvitation, arg1 error) *MockProjectInvitationDescriberProjectInvitationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectInvitationDescriberProjectInvitationCall) Do(f func(string, string) (*admin.GroupInvitation, error)) *MockProjectInvitationDescriberProjectInvitationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectInvitationDescriberProjectInvitationCall) DoAndReturn(f func(string, string) (*admin.GroupInvitation, error)) *MockProjectInvitationDescriberProjectInvitationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
