// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/invitations (interfaces: ProjectInviter)
//
// Generated by this command:
//
//	mockgen -typed -destination=invite_mock_test.go -package=invitations . ProjectInviter
//

// Package invitations is a generated GoMock package.
package invitations

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectInviter is a mock of ProjectInviter interface.
type MockProjectInviter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectInviterMockRecorder
	isgomock struct{}
}

// MockProjectInviterMockRecorder is the mock recorder for MockProjectInviter.
type MockProjectInviterMockRecorder struct {
	mock *MockProjectInviter
}

// NewMockProjectInviter creates a new mock instance.
func NewMockProjectInviter(ctrl *gomock.Controller) *MockProjectInviter {
	mock := &MockProjectInviter{ctrl: ctrl}
	mock.recorder = &MockProjectInviterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectInviter) EXPECT() *MockProjectInviterMockRecorder {
	return m.recorder
}

// InviteUserToProject mocks base method.
func (m *MockProjectInviter) InviteUserToProject(arg0 string, arg1 *admin.GroupInvitationRequest) (*admin.GroupInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUserToProject", arg0, arg1)
	ret0, _ := ret[0].(*admin.GroupInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUserToProject indicates an expected call of InviteUserToProject.
func (mr *MockProjectInviterMockRecorder) InviteUserToProject(arg0, arg1 any) *MockProjectInviterInviteUserToProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUserToProject", reflect.TypeOf((*MockProjectInviter)(nil).InviteUserToProject), arg0, arg1)
	return &MockProjectInviterInviteUserToProjectCall{Call: call}
}

// MockProjectInviterInviteUserToProjectCall wrap *gomock.Call
type MockProjectInviterInviteUserToProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectInviterInviteUserToProjectCall) Return(arg0 *admin.GroupInvitation, arg1 error) *MockProjectInviterInviteUserToProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectInviterInviteUserToProjectCall) Do(f func(string, *admin.GroupInvitationRequest) (*admin.GroupInvitation, error)) *MockProjectInviterInviteUserToProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectInviterInviteUserToProjectCall) DoAndReturn(f func(string, *admin.GroupInvitationRequest) (*admin.GroupInvitation, error)) *MockProjectInviterInviteUserToProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
