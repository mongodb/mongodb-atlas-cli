// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/invitations (interfaces: ProjectInvitationLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=invitations . ProjectInvitationLister
//

// Package invitations is a generated GoMock package.
package invitations

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectInvitationLister is a mock of ProjectInvitationLister interface.
type MockProjectInvitationLister struct {
	ctrl     *gomock.Controller
	recorder *MockProjectInvitationListerMockRecorder
	isgomock struct{}
}

// MockProjectInvitationListerMockRecorder is the mock recorder for MockProjectInvitationLister.
type MockProjectInvitationListerMockRecorder struct {
	mock *MockProjectInvitationLister
}

// NewMockProjectInvitationLister creates a new mock instance.
func NewMockProjectInvitationLister(ctrl *gomock.Controller) *MockProjectInvitationLister {
	mock := &MockProjectInvitationLister{ctrl: ctrl}
	mock.recorder = &MockProjectInvitationListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectInvitationLister) EXPECT() *MockProjectInvitationListerMockRecorder {
	return m.recorder
}

// ProjectInvitations mocks base method.
func (m *MockProjectInvitationLister) ProjectInvitations(arg0 *admin.ListProjectInvitationsApiParams) ([]admin.GroupInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectInvitations", arg0)
	ret0, _ := ret[0].([]admin.GroupInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectInvitations indicates an expected call of ProjectInvitations.
func (mr *MockProjectInvitationListerMockRecorder) ProjectInvitations(arg0 any) *MockProjectInvitationListerProjectInvitationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectInvitations", reflect.TypeOf((*MockProjectInvitationLister)(nil).ProjectInvitations), arg0)
	return &MockProjectInvitationListerProjectInvitationsCall{Call: call}
}

// MockProjectInvitationListerProjectInvitationsCall wrap *gomock.Call
type MockProjectInvitationListerProjectInvitationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectInvitationListerProjectInvitationsCall) Return(arg0 []admin.GroupInvitation, arg1 error) *MockProjectInvitationListerProjectInvitationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectInvitationListerProjectInvitationsCall) Do(f func(*admin.ListProjectInvitationsApiParams) ([]admin.GroupInvitation, error)) *MockProjectInvitationListerProjectInvitationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectInvitationListerProjectInvitationsCall) DoAndReturn(f func(*admin.ListProjectInvitationsApiParams) ([]admin.GroupInvitation, error)) *MockProjectInvitationListerProjectInvitationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
