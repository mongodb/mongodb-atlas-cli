// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/invitations (interfaces: ProjectInvitationUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=invitations . ProjectInvitationUpdater
//

// Package invitations is a generated GoMock package.
package invitations

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectInvitationUpdater is a mock of ProjectInvitationUpdater interface.
type MockProjectInvitationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockProjectInvitationUpdaterMockRecorder
	isgomock struct{}
}

// MockProjectInvitationUpdaterMockRecorder is the mock recorder for MockProjectInvitationUpdater.
type MockProjectInvitationUpdaterMockRecorder struct {
	mock *MockProjectInvitationUpdater
}

// NewMockProjectInvitationUpdater creates a new mock instance.
func NewMockProjectInvitationUpdater(ctrl *gomock.Controller) *MockProjectInvitationUpdater {
	mock := &MockProjectInvitationUpdater{ctrl: ctrl}
	mock.recorder = &MockProjectInvitationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectInvitationUpdater) EXPECT() *MockProjectInvitationUpdaterMockRecorder {
	return m.recorder
}

// UpdateProjectInvitation mocks base method.
func (m *MockProjectInvitationUpdater) UpdateProjectInvitation(arg0, arg1 string, arg2 *admin.GroupInvitationRequest) (*admin.GroupInvitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectInvitation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.GroupInvitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectInvitation indicates an expected call of UpdateProjectInvitation.
func (mr *MockProjectInvitationUpdaterMockRecorder) UpdateProjectInvitation(arg0, arg1, arg2 any) *MockProjectInvitationUpdaterUpdateProjectInvitationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectInvitation", reflect.TypeOf((*MockProjectInvitationUpdater)(nil).UpdateProjectInvitation), arg0, arg1, arg2)
	return &MockProjectInvitationUpdaterUpdateProjectInvitationCall{Call: call}
}

// MockProjectInvitationUpdaterUpdateProjectInvitationCall wrap *gomock.Call
type MockProjectInvitationUpdaterUpdateProjectInvitationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectInvitationUpdaterUpdateProjectInvitationCall) Return(arg0 *admin.GroupInvitation, arg1 error) *MockProjectInvitationUpdaterUpdateProjectInvitationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectInvitationUpdaterUpdateProjectInvitationCall) Do(f func(string, string, *admin.GroupInvitationRequest) (*admin.GroupInvitation, error)) *MockProjectInvitationUpdaterUpdateProjectInvitationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectInvitationUpdaterUpdateProjectInvitationCall) DoAndReturn(f func(string, string, *admin.GroupInvitationRequest) (*admin.GroupInvitation, error)) *MockProjectInvitationUpdaterUpdateProjectInvitationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
