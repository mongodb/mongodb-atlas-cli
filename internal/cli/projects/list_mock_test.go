// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects (interfaces: OrgProjectLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=projects . OrgProjectLister
//

// Package projects is a generated GoMock package.
package projects

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockOrgProjectLister is a mock of OrgProjectLister interface.
type MockOrgProjectLister struct {
	ctrl     *gomock.Controller
	recorder *MockOrgProjectListerMockRecorder
	isgomock struct{}
}

// MockOrgProjectListerMockRecorder is the mock recorder for MockOrgProjectLister.
type MockOrgProjectListerMockRecorder struct {
	mock *MockOrgProjectLister
}

// NewMockOrgProjectLister creates a new mock instance.
func NewMockOrgProjectLister(ctrl *gomock.Controller) *MockOrgProjectLister {
	mock := &MockOrgProjectLister{ctrl: ctrl}
	mock.recorder = &MockOrgProjectListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgProjectLister) EXPECT() *MockOrgProjectListerMockRecorder {
	return m.recorder
}

// GetOrgProjects mocks base method.
func (m *MockOrgProjectLister) GetOrgProjects(arg0 string, arg1 *store.ListOptions) (*admin.PaginatedAtlasGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgProjects", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedAtlasGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgProjects indicates an expected call of GetOrgProjects.
func (mr *MockOrgProjectListerMockRecorder) GetOrgProjects(arg0, arg1 any) *MockOrgProjectListerGetOrgProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgProjects", reflect.TypeOf((*MockOrgProjectLister)(nil).GetOrgProjects), arg0, arg1)
	return &MockOrgProjectListerGetOrgProjectsCall{Call: call}
}

// MockOrgProjectListerGetOrgProjectsCall wrap *gomock.Call
type MockOrgProjectListerGetOrgProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrgProjectListerGetOrgProjectsCall) Return(arg0 *admin.PaginatedAtlasGroup, arg1 error) *MockOrgProjectListerGetOrgProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrgProjectListerGetOrgProjectsCall) Do(f func(string, *store.ListOptions) (*admin.PaginatedAtlasGroup, error)) *MockOrgProjectListerGetOrgProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrgProjectListerGetOrgProjectsCall) DoAndReturn(f func(string, *store.ListOptions) (*admin.PaginatedAtlasGroup, error)) *MockOrgProjectListerGetOrgProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Projects mocks base method.
func (m *MockOrgProjectLister) Projects(arg0 *store.ListOptions) (*admin.PaginatedAtlasGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Projects", arg0)
	ret0, _ := ret[0].(*admin.PaginatedAtlasGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Projects indicates an expected call of Projects.
func (mr *MockOrgProjectListerMockRecorder) Projects(arg0 any) *MockOrgProjectListerProjectsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projects", reflect.TypeOf((*MockOrgProjectLister)(nil).Projects), arg0)
	return &MockOrgProjectListerProjectsCall{Call: call}
}

// MockOrgProjectListerProjectsCall wrap *gomock.Call
type MockOrgProjectListerProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrgProjectListerProjectsCall) Return(arg0 *admin.PaginatedAtlasGroup, arg1 error) *MockOrgProjectListerProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrgProjectListerProjectsCall) Do(f func(*store.ListOptions) (*admin.PaginatedAtlasGroup, error)) *MockOrgProjectListerProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrgProjectListerProjectsCall) DoAndReturn(f func(*store.ListOptions) (*admin.PaginatedAtlasGroup, error)) *MockOrgProjectListerProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
