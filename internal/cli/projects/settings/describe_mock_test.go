// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/settings (interfaces: ProjectSettingsDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=settings . ProjectSettingsDescriber
//

// Package settings is a generated GoMock package.
package settings

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectSettingsDescriber is a mock of ProjectSettingsDescriber interface.
type MockProjectSettingsDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockProjectSettingsDescriberMockRecorder
	isgomock struct{}
}

// MockProjectSettingsDescriberMockRecorder is the mock recorder for MockProjectSettingsDescriber.
type MockProjectSettingsDescriberMockRecorder struct {
	mock *MockProjectSettingsDescriber
}

// NewMockProjectSettingsDescriber creates a new mock instance.
func NewMockProjectSettingsDescriber(ctrl *gomock.Controller) *MockProjectSettingsDescriber {
	mock := &MockProjectSettingsDescriber{ctrl: ctrl}
	mock.recorder = &MockProjectSettingsDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectSettingsDescriber) EXPECT() *MockProjectSettingsDescriberMockRecorder {
	return m.recorder
}

// ProjectSettings mocks base method.
func (m *MockProjectSettingsDescriber) ProjectSettings(arg0 string) (*admin.GroupSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectSettings", arg0)
	ret0, _ := ret[0].(*admin.GroupSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectSettings indicates an expected call of ProjectSettings.
func (mr *MockProjectSettingsDescriberMockRecorder) ProjectSettings(arg0 any) *MockProjectSettingsDescriberProjectSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectSettings", reflect.TypeOf((*MockProjectSettingsDescriber)(nil).ProjectSettings), arg0)
	return &MockProjectSettingsDescriberProjectSettingsCall{Call: call}
}

// MockProjectSettingsDescriberProjectSettingsCall wrap *gomock.Call
type MockProjectSettingsDescriberProjectSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectSettingsDescriberProjectSettingsCall) Return(arg0 *admin.GroupSettings, arg1 error) *MockProjectSettingsDescriberProjectSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectSettingsDescriberProjectSettingsCall) Do(f func(string) (*admin.GroupSettings, error)) *MockProjectSettingsDescriberProjectSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectSettingsDescriberProjectSettingsCall) DoAndReturn(f func(string) (*admin.GroupSettings, error)) *MockProjectSettingsDescriberProjectSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
