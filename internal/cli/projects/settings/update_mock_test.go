// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/settings (interfaces: ProjectSettingsUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=settings . ProjectSettingsUpdater
//

// Package settings is a generated GoMock package.
package settings

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectSettingsUpdater is a mock of ProjectSettingsUpdater interface.
type MockProjectSettingsUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockProjectSettingsUpdaterMockRecorder
	isgomock struct{}
}

// MockProjectSettingsUpdaterMockRecorder is the mock recorder for MockProjectSettingsUpdater.
type MockProjectSettingsUpdaterMockRecorder struct {
	mock *MockProjectSettingsUpdater
}

// NewMockProjectSettingsUpdater creates a new mock instance.
func NewMockProjectSettingsUpdater(ctrl *gomock.Controller) *MockProjectSettingsUpdater {
	mock := &MockProjectSettingsUpdater{ctrl: ctrl}
	mock.recorder = &MockProjectSettingsUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectSettingsUpdater) EXPECT() *MockProjectSettingsUpdaterMockRecorder {
	return m.recorder
}

// UpdateProjectSettings mocks base method.
func (m *MockProjectSettingsUpdater) UpdateProjectSettings(arg0 string, arg1 *admin.GroupSettings) (*admin.GroupSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectSettings", arg0, arg1)
	ret0, _ := ret[0].(*admin.GroupSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectSettings indicates an expected call of UpdateProjectSettings.
func (mr *MockProjectSettingsUpdaterMockRecorder) UpdateProjectSettings(arg0, arg1 any) *MockProjectSettingsUpdaterUpdateProjectSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectSettings", reflect.TypeOf((*MockProjectSettingsUpdater)(nil).UpdateProjectSettings), arg0, arg1)
	return &MockProjectSettingsUpdaterUpdateProjectSettingsCall{Call: call}
}

// MockProjectSettingsUpdaterUpdateProjectSettingsCall wrap *gomock.Call
type MockProjectSettingsUpdaterUpdateProjectSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectSettingsUpdaterUpdateProjectSettingsCall) Return(arg0 *admin.GroupSettings, arg1 error) *MockProjectSettingsUpdaterUpdateProjectSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectSettingsUpdaterUpdateProjectSettingsCall) Do(f func(string, *admin.GroupSettings) (*admin.GroupSettings, error)) *MockProjectSettingsUpdaterUpdateProjectSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectSettingsUpdaterUpdateProjectSettingsCall) DoAndReturn(f func(string, *admin.GroupSettings) (*admin.GroupSettings, error)) *MockProjectSettingsUpdaterUpdateProjectSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
