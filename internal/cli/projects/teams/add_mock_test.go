// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/teams (interfaces: ProjectTeamAdder)
//
// Generated by this command:
//
//	mockgen -typed -destination=add_mock_test.go -package=teams . ProjectTeamAdder
//

// Package teams is a generated GoMock package.
package teams

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectTeamAdder is a mock of ProjectTeamAdder interface.
type MockProjectTeamAdder struct {
	ctrl     *gomock.Controller
	recorder *MockProjectTeamAdderMockRecorder
	isgomock struct{}
}

// MockProjectTeamAdderMockRecorder is the mock recorder for MockProjectTeamAdder.
type MockProjectTeamAdderMockRecorder struct {
	mock *MockProjectTeamAdder
}

// NewMockProjectTeamAdder creates a new mock instance.
func NewMockProjectTeamAdder(ctrl *gomock.Controller) *MockProjectTeamAdder {
	mock := &MockProjectTeamAdder{ctrl: ctrl}
	mock.recorder = &MockProjectTeamAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectTeamAdder) EXPECT() *MockProjectTeamAdderMockRecorder {
	return m.recorder
}

// AddTeamsToProject mocks base method.
func (m *MockProjectTeamAdder) AddTeamsToProject(arg0 string, arg1 []admin.TeamRole) (*admin.PaginatedTeamRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamsToProject", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedTeamRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTeamsToProject indicates an expected call of AddTeamsToProject.
func (mr *MockProjectTeamAdderMockRecorder) AddTeamsToProject(arg0, arg1 any) *MockProjectTeamAdderAddTeamsToProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamsToProject", reflect.TypeOf((*MockProjectTeamAdder)(nil).AddTeamsToProject), arg0, arg1)
	return &MockProjectTeamAdderAddTeamsToProjectCall{Call: call}
}

// MockProjectTeamAdderAddTeamsToProjectCall wrap *gomock.Call
type MockProjectTeamAdderAddTeamsToProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectTeamAdderAddTeamsToProjectCall) Return(arg0 *admin.PaginatedTeamRole, arg1 error) *MockProjectTeamAdderAddTeamsToProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectTeamAdderAddTeamsToProjectCall) Do(f func(string, []admin.TeamRole) (*admin.PaginatedTeamRole, error)) *MockProjectTeamAdderAddTeamsToProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectTeamAdderAddTeamsToProjectCall) DoAndReturn(f func(string, []admin.TeamRole) (*admin.PaginatedTeamRole, error)) *MockProjectTeamAdderAddTeamsToProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
