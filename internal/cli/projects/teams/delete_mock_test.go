// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/teams (interfaces: ProjectTeamDeleter)
//
// Generated by this command:
//
//	mockgen -typed -destination=delete_mock_test.go -package=teams . ProjectTeamDeleter
//

// Package teams is a generated GoMock package.
package teams

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProjectTeamDeleter is a mock of ProjectTeamDeleter interface.
type MockProjectTeamDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectTeamDeleterMockRecorder
	isgomock struct{}
}

// MockProjectTeamDeleterMockRecorder is the mock recorder for MockProjectTeamDeleter.
type MockProjectTeamDeleterMockRecorder struct {
	mock *MockProjectTeamDeleter
}

// NewMockProjectTeamDeleter creates a new mock instance.
func NewMockProjectTeamDeleter(ctrl *gomock.Controller) *MockProjectTeamDeleter {
	mock := &MockProjectTeamDeleter{ctrl: ctrl}
	mock.recorder = &MockProjectTeamDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectTeamDeleter) EXPECT() *MockProjectTeamDeleterMockRecorder {
	return m.recorder
}

// DeleteTeamFromProject mocks base method.
func (m *MockProjectTeamDeleter) DeleteTeamFromProject(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeamFromProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeamFromProject indicates an expected call of DeleteTeamFromProject.
func (mr *MockProjectTeamDeleterMockRecorder) DeleteTeamFromProject(arg0, arg1 any) *MockProjectTeamDeleterDeleteTeamFromProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeamFromProject", reflect.TypeOf((*MockProjectTeamDeleter)(nil).DeleteTeamFromProject), arg0, arg1)
	return &MockProjectTeamDeleterDeleteTeamFromProjectCall{Call: call}
}

// MockProjectTeamDeleterDeleteTeamFromProjectCall wrap *gomock.Call
type MockProjectTeamDeleterDeleteTeamFromProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectTeamDeleterDeleteTeamFromProjectCall) Return(arg0 error) *MockProjectTeamDeleterDeleteTeamFromProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectTeamDeleterDeleteTeamFromProjectCall) Do(f func(string, string) error) *MockProjectTeamDeleterDeleteTeamFromProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectTeamDeleterDeleteTeamFromProjectCall) DoAndReturn(f func(string, string) error) *MockProjectTeamDeleterDeleteTeamFromProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
