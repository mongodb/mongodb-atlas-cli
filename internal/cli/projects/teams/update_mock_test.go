// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/teams (interfaces: TeamRolesUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=teams . TeamRolesUpdater
//

// Package teams is a generated GoMock package.
package teams

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockTeamRolesUpdater is a mock of TeamRolesUpdater interface.
type MockTeamRolesUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRolesUpdaterMockRecorder
	isgomock struct{}
}

// MockTeamRolesUpdaterMockRecorder is the mock recorder for MockTeamRolesUpdater.
type MockTeamRolesUpdaterMockRecorder struct {
	mock *MockTeamRolesUpdater
}

// NewMockTeamRolesUpdater creates a new mock instance.
func NewMockTeamRolesUpdater(ctrl *gomock.Controller) *MockTeamRolesUpdater {
	mock := &MockTeamRolesUpdater{ctrl: ctrl}
	mock.recorder = &MockTeamRolesUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRolesUpdater) EXPECT() *MockTeamRolesUpdaterMockRecorder {
	return m.recorder
}

// UpdateProjectTeamRoles mocks base method.
func (m *MockTeamRolesUpdater) UpdateProjectTeamRoles(arg0, arg1 string, arg2 *admin.TeamRole) (*admin.PaginatedTeamRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectTeamRoles", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.PaginatedTeamRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectTeamRoles indicates an expected call of UpdateProjectTeamRoles.
func (mr *MockTeamRolesUpdaterMockRecorder) UpdateProjectTeamRoles(arg0, arg1, arg2 any) *MockTeamRolesUpdaterUpdateProjectTeamRolesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectTeamRoles", reflect.TypeOf((*MockTeamRolesUpdater)(nil).UpdateProjectTeamRoles), arg0, arg1, arg2)
	return &MockTeamRolesUpdaterUpdateProjectTeamRolesCall{Call: call}
}

// MockTeamRolesUpdaterUpdateProjectTeamRolesCall wrap *gomock.Call
type MockTeamRolesUpdaterUpdateProjectTeamRolesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTeamRolesUpdaterUpdateProjectTeamRolesCall) Return(arg0 *admin.PaginatedTeamRole, arg1 error) *MockTeamRolesUpdaterUpdateProjectTeamRolesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTeamRolesUpdaterUpdateProjectTeamRolesCall) Do(f func(string, string, *admin.TeamRole) (*admin.PaginatedTeamRole, error)) *MockTeamRolesUpdaterUpdateProjectTeamRolesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTeamRolesUpdaterUpdateProjectTeamRolesCall) DoAndReturn(f func(string, string, *admin.TeamRole) (*admin.PaginatedTeamRole, error)) *MockTeamRolesUpdaterUpdateProjectTeamRolesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
