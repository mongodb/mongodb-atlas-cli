// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects (interfaces: ProjectUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=projects . ProjectUpdater
//

// Package projects is a generated GoMock package.
package projects

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectUpdater is a mock of ProjectUpdater interface.
type MockProjectUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockProjectUpdaterMockRecorder
	isgomock struct{}
}

// MockProjectUpdaterMockRecorder is the mock recorder for MockProjectUpdater.
type MockProjectUpdaterMockRecorder struct {
	mock *MockProjectUpdater
}

// NewMockProjectUpdater creates a new mock instance.
func NewMockProjectUpdater(ctrl *gomock.Controller) *MockProjectUpdater {
	mock := &MockProjectUpdater{ctrl: ctrl}
	mock.recorder = &MockProjectUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectUpdater) EXPECT() *MockProjectUpdaterMockRecorder {
	return m.recorder
}

// UpdateProject mocks base method.
func (m *MockProjectUpdater) UpdateProject(arg0 *admin.UpdateProjectApiParams) (*admin.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0)
	ret0, _ := ret[0].(*admin.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectUpdaterMockRecorder) UpdateProject(arg0 any) *MockProjectUpdaterUpdateProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectUpdater)(nil).UpdateProject), arg0)
	return &MockProjectUpdaterUpdateProjectCall{Call: call}
}

// MockProjectUpdaterUpdateProjectCall wrap *gomock.Call
type MockProjectUpdaterUpdateProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectUpdaterUpdateProjectCall) Return(arg0 *admin.Group, arg1 error) *MockProjectUpdaterUpdateProjectCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectUpdaterUpdateProjectCall) Do(f func(*admin.UpdateProjectApiParams) (*admin.Group, error)) *MockProjectUpdaterUpdateProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectUpdaterUpdateProjectCall) DoAndReturn(f func(*admin.UpdateProjectApiParams) (*admin.Group, error)) *MockProjectUpdaterUpdateProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
