// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/users (interfaces: ProjectUserDeleter)
//
// Generated by this command:
//
//	mockgen -typed -destination=delete_mock_test.go -package=users . ProjectUserDeleter
//

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProjectUserDeleter is a mock of ProjectUserDeleter interface.
type MockProjectUserDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectUserDeleterMockRecorder
	isgomock struct{}
}

// MockProjectUserDeleterMockRecorder is the mock recorder for MockProjectUserDeleter.
type MockProjectUserDeleterMockRecorder struct {
	mock *MockProjectUserDeleter
}

// NewMockProjectUserDeleter creates a new mock instance.
func NewMockProjectUserDeleter(ctrl *gomock.Controller) *MockProjectUserDeleter {
	mock := &MockProjectUserDeleter{ctrl: ctrl}
	mock.recorder = &MockProjectUserDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectUserDeleter) EXPECT() *MockProjectUserDeleterMockRecorder {
	return m.recorder
}

// DeleteUserFromProject mocks base method.
func (m *MockProjectUserDeleter) DeleteUserFromProject(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromProject indicates an expected call of DeleteUserFromProject.
func (mr *MockProjectUserDeleterMockRecorder) DeleteUserFromProject(arg0, arg1 any) *MockProjectUserDeleterDeleteUserFromProjectCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromProject", reflect.TypeOf((*MockProjectUserDeleter)(nil).DeleteUserFromProject), arg0, arg1)
	return &MockProjectUserDeleterDeleteUserFromProjectCall{Call: call}
}

// MockProjectUserDeleterDeleteUserFromProjectCall wrap *gomock.Call
type MockProjectUserDeleterDeleteUserFromProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectUserDeleterDeleteUserFromProjectCall) Return(arg0 error) *MockProjectUserDeleterDeleteUserFromProjectCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectUserDeleterDeleteUserFromProjectCall) Do(f func(string, string) error) *MockProjectUserDeleterDeleteUserFromProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectUserDeleterDeleteUserFromProjectCall) DoAndReturn(f func(string, string) error) *MockProjectUserDeleterDeleteUserFromProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
