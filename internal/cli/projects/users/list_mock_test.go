// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/projects/users (interfaces: ProjectUsersLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=users . ProjectUsersLister
//

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312006/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectUsersLister is a mock of ProjectUsersLister interface.
type MockProjectUsersLister struct {
	ctrl     *gomock.Controller
	recorder *MockProjectUsersListerMockRecorder
	isgomock struct{}
}

// MockProjectUsersListerMockRecorder is the mock recorder for MockProjectUsersLister.
type MockProjectUsersListerMockRecorder struct {
	mock *MockProjectUsersLister
}

// NewMockProjectUsersLister creates a new mock instance.
func NewMockProjectUsersLister(ctrl *gomock.Controller) *MockProjectUsersLister {
	mock := &MockProjectUsersLister{ctrl: ctrl}
	mock.recorder = &MockProjectUsersListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectUsersLister) EXPECT() *MockProjectUsersListerMockRecorder {
	return m.recorder
}

// ProjectUsers mocks base method.
func (m *MockProjectUsersLister) ProjectUsers(arg0 string, arg1 *store.ListOptions) (*admin.PaginatedGroupUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectUsers", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedGroupUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectUsers indicates an expected call of ProjectUsers.
func (mr *MockProjectUsersListerMockRecorder) ProjectUsers(arg0, arg1 any) *MockProjectUsersListerProjectUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectUsers", reflect.TypeOf((*MockProjectUsersLister)(nil).ProjectUsers), arg0, arg1)
	return &MockProjectUsersListerProjectUsersCall{Call: call}
}

// MockProjectUsersListerProjectUsersCall wrap *gomock.Call
type MockProjectUsersListerProjectUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectUsersListerProjectUsersCall) Return(arg0 *admin.PaginatedGroupUser, arg1 error) *MockProjectUsersListerProjectUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectUsersListerProjectUsersCall) Do(f func(string, *store.ListOptions) (*admin.PaginatedGroupUser, error)) *MockProjectUsersListerProjectUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectUsersListerProjectUsersCall) DoAndReturn(f func(string, *store.ListOptions) (*admin.PaginatedGroupUser, error)) *MockProjectUsersListerProjectUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
