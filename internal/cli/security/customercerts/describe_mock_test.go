// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/security/customercerts (interfaces: X509CertificateConfDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=customercerts . X509CertificateConfDescriber
//

// Package customercerts is a generated GoMock package.
package customercerts

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockX509CertificateConfDescriber is a mock of X509CertificateConfDescriber interface.
type MockX509CertificateConfDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockX509CertificateConfDescriberMockRecorder
	isgomock struct{}
}

// MockX509CertificateConfDescriberMockRecorder is the mock recorder for MockX509CertificateConfDescriber.
type MockX509CertificateConfDescriberMockRecorder struct {
	mock *MockX509CertificateConfDescriber
}

// NewMockX509CertificateConfDescriber creates a new mock instance.
func NewMockX509CertificateConfDescriber(ctrl *gomock.Controller) *MockX509CertificateConfDescriber {
	mock := &MockX509CertificateConfDescriber{ctrl: ctrl}
	mock.recorder = &MockX509CertificateConfDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockX509CertificateConfDescriber) EXPECT() *MockX509CertificateConfDescriberMockRecorder {
	return m.recorder
}

// X509Configuration mocks base method.
func (m *MockX509CertificateConfDescriber) X509Configuration(arg0 string) (*admin.UserSecurity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "X509Configuration", arg0)
	ret0, _ := ret[0].(*admin.UserSecurity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// X509Configuration indicates an expected call of X509Configuration.
func (mr *MockX509CertificateConfDescriberMockRecorder) X509Configuration(arg0 any) *MockX509CertificateConfDescriberX509ConfigurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "X509Configuration", reflect.TypeOf((*MockX509CertificateConfDescriber)(nil).X509Configuration), arg0)
	return &MockX509CertificateConfDescriberX509ConfigurationCall{Call: call}
}

// MockX509CertificateConfDescriberX509ConfigurationCall wrap *gomock.Call
type MockX509CertificateConfDescriberX509ConfigurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockX509CertificateConfDescriberX509ConfigurationCall) Return(arg0 *admin.UserSecurity, arg1 error) *MockX509CertificateConfDescriberX509ConfigurationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockX509CertificateConfDescriberX509ConfigurationCall) Do(f func(string) (*admin.UserSecurity, error)) *MockX509CertificateConfDescriberX509ConfigurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockX509CertificateConfDescriberX509ConfigurationCall) DoAndReturn(f func(string) (*admin.UserSecurity, error)) *MockX509CertificateConfDescriberX509ConfigurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
