// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/security/customercerts (interfaces: X509CertificateConfDisabler)
//
// Generated by this command:
//
//	mockgen -typed -destination=disable_mock_test.go -package=customercerts . X509CertificateConfDisabler
//

// Package customercerts is a generated GoMock package.
package customercerts

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockX509CertificateConfDisabler is a mock of X509CertificateConfDisabler interface.
type MockX509CertificateConfDisabler struct {
	ctrl     *gomock.Controller
	recorder *MockX509CertificateConfDisablerMockRecorder
	isgomock struct{}
}

// MockX509CertificateConfDisablerMockRecorder is the mock recorder for MockX509CertificateConfDisabler.
type MockX509CertificateConfDisablerMockRecorder struct {
	mock *MockX509CertificateConfDisabler
}

// NewMockX509CertificateConfDisabler creates a new mock instance.
func NewMockX509CertificateConfDisabler(ctrl *gomock.Controller) *MockX509CertificateConfDisabler {
	mock := &MockX509CertificateConfDisabler{ctrl: ctrl}
	mock.recorder = &MockX509CertificateConfDisablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockX509CertificateConfDisabler) EXPECT() *MockX509CertificateConfDisablerMockRecorder {
	return m.recorder
}

// DisableX509Configuration mocks base method.
func (m *MockX509CertificateConfDisabler) DisableX509Configuration(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableX509Configuration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableX509Configuration indicates an expected call of DisableX509Configuration.
func (mr *MockX509CertificateConfDisablerMockRecorder) DisableX509Configuration(arg0 any) *MockX509CertificateConfDisablerDisableX509ConfigurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableX509Configuration", reflect.TypeOf((*MockX509CertificateConfDisabler)(nil).DisableX509Configuration), arg0)
	return &MockX509CertificateConfDisablerDisableX509ConfigurationCall{Call: call}
}

// MockX509CertificateConfDisablerDisableX509ConfigurationCall wrap *gomock.Call
type MockX509CertificateConfDisablerDisableX509ConfigurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockX509CertificateConfDisablerDisableX509ConfigurationCall) Return(arg0 error) *MockX509CertificateConfDisablerDisableX509ConfigurationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockX509CertificateConfDisablerDisableX509ConfigurationCall) Do(f func(string) error) *MockX509CertificateConfDisablerDisableX509ConfigurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockX509CertificateConfDisablerDisableX509ConfigurationCall) DoAndReturn(f func(string) error) *MockX509CertificateConfDisablerDisableX509ConfigurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
