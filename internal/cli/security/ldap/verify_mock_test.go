// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/security/ldap (interfaces: ConfigurationVerifier)
//
// Generated by this command:
//
//	mockgen -typed -destination=verify_mock_test.go -package=ldap . ConfigurationVerifier
//

// Package ldap is a generated GoMock package.
package ldap

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigurationVerifier is a mock of ConfigurationVerifier interface.
type MockConfigurationVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationVerifierMockRecorder
	isgomock struct{}
}

// MockConfigurationVerifierMockRecorder is the mock recorder for MockConfigurationVerifier.
type MockConfigurationVerifierMockRecorder struct {
	mock *MockConfigurationVerifier
}

// NewMockConfigurationVerifier creates a new mock instance.
func NewMockConfigurationVerifier(ctrl *gomock.Controller) *MockConfigurationVerifier {
	mock := &MockConfigurationVerifier{ctrl: ctrl}
	mock.recorder = &MockConfigurationVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationVerifier) EXPECT() *MockConfigurationVerifierMockRecorder {
	return m.recorder
}

// VerifyLDAPConfiguration mocks base method.
func (m *MockConfigurationVerifier) VerifyLDAPConfiguration(arg0 string, arg1 *admin.LDAPVerifyConnectivityJobRequestParams) (*admin.LDAPVerifyConnectivityJobRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyLDAPConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*admin.LDAPVerifyConnectivityJobRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyLDAPConfiguration indicates an expected call of VerifyLDAPConfiguration.
func (mr *MockConfigurationVerifierMockRecorder) VerifyLDAPConfiguration(arg0, arg1 any) *MockConfigurationVerifierVerifyLDAPConfigurationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyLDAPConfiguration", reflect.TypeOf((*MockConfigurationVerifier)(nil).VerifyLDAPConfiguration), arg0, arg1)
	return &MockConfigurationVerifierVerifyLDAPConfigurationCall{Call: call}
}

// MockConfigurationVerifierVerifyLDAPConfigurationCall wrap *gomock.Call
type MockConfigurationVerifierVerifyLDAPConfigurationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockConfigurationVerifierVerifyLDAPConfigurationCall) Return(arg0 *admin.LDAPVerifyConnectivityJobRequest, arg1 error) *MockConfigurationVerifierVerifyLDAPConfigurationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockConfigurationVerifierVerifyLDAPConfigurationCall) Do(f func(string, *admin.LDAPVerifyConnectivityJobRequestParams) (*admin.LDAPVerifyConnectivityJobRequest, error)) *MockConfigurationVerifierVerifyLDAPConfigurationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockConfigurationVerifierVerifyLDAPConfigurationCall) DoAndReturn(f func(string, *admin.LDAPVerifyConnectivityJobRequestParams) (*admin.LDAPVerifyConnectivityJobRequest, error)) *MockConfigurationVerifierVerifyLDAPConfigurationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
