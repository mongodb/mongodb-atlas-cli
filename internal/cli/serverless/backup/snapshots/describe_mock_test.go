// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/serverless/backup/snapshots (interfaces: ServerlessSnapshotsDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=snapshots . ServerlessSnapshotsDescriber
//

// Package snapshots is a generated GoMock package.
package snapshots

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312003/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockServerlessSnapshotsDescriber is a mock of ServerlessSnapshotsDescriber interface.
type MockServerlessSnapshotsDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockServerlessSnapshotsDescriberMockRecorder
	isgomock struct{}
}

// MockServerlessSnapshotsDescriberMockRecorder is the mock recorder for MockServerlessSnapshotsDescriber.
type MockServerlessSnapshotsDescriberMockRecorder struct {
	mock *MockServerlessSnapshotsDescriber
}

// NewMockServerlessSnapshotsDescriber creates a new mock instance.
func NewMockServerlessSnapshotsDescriber(ctrl *gomock.Controller) *MockServerlessSnapshotsDescriber {
	mock := &MockServerlessSnapshotsDescriber{ctrl: ctrl}
	mock.recorder = &MockServerlessSnapshotsDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerlessSnapshotsDescriber) EXPECT() *MockServerlessSnapshotsDescriberMockRecorder {
	return m.recorder
}

// ServerlessSnapshot mocks base method.
func (m *MockServerlessSnapshotsDescriber) ServerlessSnapshot(arg0, arg1, arg2 string) (*admin.ServerlessBackupSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerlessSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.ServerlessBackupSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerlessSnapshot indicates an expected call of ServerlessSnapshot.
func (mr *MockServerlessSnapshotsDescriberMockRecorder) ServerlessSnapshot(arg0, arg1, arg2 any) *MockServerlessSnapshotsDescriberServerlessSnapshotCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerlessSnapshot", reflect.TypeOf((*MockServerlessSnapshotsDescriber)(nil).ServerlessSnapshot), arg0, arg1, arg2)
	return &MockServerlessSnapshotsDescriberServerlessSnapshotCall{Call: call}
}

// MockServerlessSnapshotsDescriberServerlessSnapshotCall wrap *gomock.Call
type MockServerlessSnapshotsDescriberServerlessSnapshotCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerlessSnapshotsDescriberServerlessSnapshotCall) Return(arg0 *admin.ServerlessBackupSnapshot, arg1 error) *MockServerlessSnapshotsDescriberServerlessSnapshotCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerlessSnapshotsDescriberServerlessSnapshotCall) Do(f func(string, string, string) (*admin.ServerlessBackupSnapshot, error)) *MockServerlessSnapshotsDescriberServerlessSnapshotCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerlessSnapshotsDescriberServerlessSnapshotCall) DoAndReturn(f func(string, string, string) (*admin.ServerlessBackupSnapshot, error)) *MockServerlessSnapshotsDescriberServerlessSnapshotCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
