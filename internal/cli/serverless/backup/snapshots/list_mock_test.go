// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/serverless/backup/snapshots (interfaces: ServerlessSnapshotsLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=snapshots . ServerlessSnapshotsLister
//

// Package snapshots is a generated GoMock package.
package snapshots

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockServerlessSnapshotsLister is a mock of ServerlessSnapshotsLister interface.
type MockServerlessSnapshotsLister struct {
	ctrl     *gomock.Controller
	recorder *MockServerlessSnapshotsListerMockRecorder
	isgomock struct{}
}

// MockServerlessSnapshotsListerMockRecorder is the mock recorder for MockServerlessSnapshotsLister.
type MockServerlessSnapshotsListerMockRecorder struct {
	mock *MockServerlessSnapshotsLister
}

// NewMockServerlessSnapshotsLister creates a new mock instance.
func NewMockServerlessSnapshotsLister(ctrl *gomock.Controller) *MockServerlessSnapshotsLister {
	mock := &MockServerlessSnapshotsLister{ctrl: ctrl}
	mock.recorder = &MockServerlessSnapshotsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerlessSnapshotsLister) EXPECT() *MockServerlessSnapshotsListerMockRecorder {
	return m.recorder
}

// ServerlessSnapshots mocks base method.
func (m *MockServerlessSnapshotsLister) ServerlessSnapshots(arg0, arg1 string, arg2 *store.ListOptions) (*admin.PaginatedApiAtlasServerlessBackupSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerlessSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.PaginatedApiAtlasServerlessBackupSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerlessSnapshots indicates an expected call of ServerlessSnapshots.
func (mr *MockServerlessSnapshotsListerMockRecorder) ServerlessSnapshots(arg0, arg1, arg2 any) *MockServerlessSnapshotsListerServerlessSnapshotsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerlessSnapshots", reflect.TypeOf((*MockServerlessSnapshotsLister)(nil).ServerlessSnapshots), arg0, arg1, arg2)
	return &MockServerlessSnapshotsListerServerlessSnapshotsCall{Call: call}
}

// MockServerlessSnapshotsListerServerlessSnapshotsCall wrap *gomock.Call
type MockServerlessSnapshotsListerServerlessSnapshotsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServerlessSnapshotsListerServerlessSnapshotsCall) Return(arg0 *admin.PaginatedApiAtlasServerlessBackupSnapshot, arg1 error) *MockServerlessSnapshotsListerServerlessSnapshotsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServerlessSnapshotsListerServerlessSnapshotsCall) Do(f func(string, string, *store.ListOptions) (*admin.PaginatedApiAtlasServerlessBackupSnapshot, error)) *MockServerlessSnapshotsListerServerlessSnapshotsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServerlessSnapshotsListerServerlessSnapshotsCall) DoAndReturn(f func(string, string, *store.ListOptions) (*admin.PaginatedApiAtlasServerlessBackupSnapshot, error)) *MockServerlessSnapshotsListerServerlessSnapshotsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
