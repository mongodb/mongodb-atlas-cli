// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/setup (interfaces: AtlasClusterQuickStarter)
//
// Generated by this command:
//
//	mockgen -typed -destination=setup_mock_test.go -package=setup . AtlasClusterQuickStarter
//

// Package setup is a generated GoMock package.
package setup

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20240530005/admin"
	admin0 "go.mongodb.org/atlas-sdk/v20250312007/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockAtlasClusterQuickStarter is a mock of AtlasClusterQuickStarter interface.
type MockAtlasClusterQuickStarter struct {
	ctrl     *gomock.Controller
	recorder *MockAtlasClusterQuickStarterMockRecorder
	isgomock struct{}
}

// MockAtlasClusterQuickStarterMockRecorder is the mock recorder for MockAtlasClusterQuickStarter.
type MockAtlasClusterQuickStarterMockRecorder struct {
	mock *MockAtlasClusterQuickStarter
}

// NewMockAtlasClusterQuickStarter creates a new mock instance.
func NewMockAtlasClusterQuickStarter(ctrl *gomock.Controller) *MockAtlasClusterQuickStarter {
	mock := &MockAtlasClusterQuickStarter{ctrl: ctrl}
	mock.recorder = &MockAtlasClusterQuickStarterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtlasClusterQuickStarter) EXPECT() *MockAtlasClusterQuickStarterMockRecorder {
	return m.recorder
}

// AddSampleData mocks base method.
func (m *MockAtlasClusterQuickStarter) AddSampleData(arg0, arg1 string) (*admin0.SampleDatasetStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSampleData", arg0, arg1)
	ret0, _ := ret[0].(*admin0.SampleDatasetStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSampleData indicates an expected call of AddSampleData.
func (mr *MockAtlasClusterQuickStarterMockRecorder) AddSampleData(arg0, arg1 any) *MockAtlasClusterQuickStarterAddSampleDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSampleData", reflect.TypeOf((*MockAtlasClusterQuickStarter)(nil).AddSampleData), arg0, arg1)
	return &MockAtlasClusterQuickStarterAddSampleDataCall{Call: call}
}

// MockAtlasClusterQuickStarterAddSampleDataCall wrap *gomock.Call
type MockAtlasClusterQuickStarterAddSampleDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterQuickStarterAddSampleDataCall) Return(arg0 *admin0.SampleDatasetStatus, arg1 error) *MockAtlasClusterQuickStarterAddSampleDataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterQuickStarterAddSampleDataCall) Do(f func(string, string) (*admin0.SampleDatasetStatus, error)) *MockAtlasClusterQuickStarterAddSampleDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterQuickStarterAddSampleDataCall) DoAndReturn(f func(string, string) (*admin0.SampleDatasetStatus, error)) *MockAtlasClusterQuickStarterAddSampleDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudProviderRegions mocks base method.
func (m *MockAtlasClusterQuickStarter) CloudProviderRegions(arg0, arg1 string, arg2 []string) (*admin0.PaginatedApiAtlasProviderRegions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudProviderRegions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin0.PaginatedApiAtlasProviderRegions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudProviderRegions indicates an expected call of CloudProviderRegions.
func (mr *MockAtlasClusterQuickStarterMockRecorder) CloudProviderRegions(arg0, arg1, arg2 any) *MockAtlasClusterQuickStarterCloudProviderRegionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudProviderRegions", reflect.TypeOf((*MockAtlasClusterQuickStarter)(nil).CloudProviderRegions), arg0, arg1, arg2)
	return &MockAtlasClusterQuickStarterCloudProviderRegionsCall{Call: call}
}

// MockAtlasClusterQuickStarterCloudProviderRegionsCall wrap *gomock.Call
type MockAtlasClusterQuickStarterCloudProviderRegionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterQuickStarterCloudProviderRegionsCall) Return(arg0 *admin0.PaginatedApiAtlasProviderRegions, arg1 error) *MockAtlasClusterQuickStarterCloudProviderRegionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterQuickStarterCloudProviderRegionsCall) Do(f func(string, string, []string) (*admin0.PaginatedApiAtlasProviderRegions, error)) *MockAtlasClusterQuickStarterCloudProviderRegionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterQuickStarterCloudProviderRegionsCall) DoAndReturn(f func(string, string, []string) (*admin0.PaginatedApiAtlasProviderRegions, error)) *MockAtlasClusterQuickStarterCloudProviderRegionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateCluster mocks base method.
func (m *MockAtlasClusterQuickStarter) CreateCluster(v15 *admin.AdvancedClusterDescription) (*admin.AdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", v15)
	ret0, _ := ret[0].(*admin.AdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockAtlasClusterQuickStarterMockRecorder) CreateCluster(v15 any) *MockAtlasClusterQuickStarterCreateClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockAtlasClusterQuickStarter)(nil).CreateCluster), v15)
	return &MockAtlasClusterQuickStarterCreateClusterCall{Call: call}
}

// MockAtlasClusterQuickStarterCreateClusterCall wrap *gomock.Call
type MockAtlasClusterQuickStarterCreateClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterQuickStarterCreateClusterCall) Return(arg0 *admin.AdvancedClusterDescription, arg1 error) *MockAtlasClusterQuickStarterCreateClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterQuickStarterCreateClusterCall) Do(f func(*admin.AdvancedClusterDescription) (*admin.AdvancedClusterDescription, error)) *MockAtlasClusterQuickStarterCreateClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterQuickStarterCreateClusterCall) DoAndReturn(f func(*admin.AdvancedClusterDescription) (*admin.AdvancedClusterDescription, error)) *MockAtlasClusterQuickStarterCreateClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateClusterLatest mocks base method.
func (m *MockAtlasClusterQuickStarter) CreateClusterLatest(v15 *admin0.ClusterDescription20240805) (*admin0.ClusterDescription20240805, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterLatest", v15)
	ret0, _ := ret[0].(*admin0.ClusterDescription20240805)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterLatest indicates an expected call of CreateClusterLatest.
func (mr *MockAtlasClusterQuickStarterMockRecorder) CreateClusterLatest(v15 any) *MockAtlasClusterQuickStarterCreateClusterLatestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterLatest", reflect.TypeOf((*MockAtlasClusterQuickStarter)(nil).CreateClusterLatest), v15)
	return &MockAtlasClusterQuickStarterCreateClusterLatestCall{Call: call}
}

// MockAtlasClusterQuickStarterCreateClusterLatestCall wrap *gomock.Call
type MockAtlasClusterQuickStarterCreateClusterLatestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterQuickStarterCreateClusterLatestCall) Return(arg0 *admin0.ClusterDescription20240805, arg1 error) *MockAtlasClusterQuickStarterCreateClusterLatestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterQuickStarterCreateClusterLatestCall) Do(f func(*admin0.ClusterDescription20240805) (*admin0.ClusterDescription20240805, error)) *MockAtlasClusterQuickStarterCreateClusterLatestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterQuickStarterCreateClusterLatestCall) DoAndReturn(f func(*admin0.ClusterDescription20240805) (*admin0.ClusterDescription20240805, error)) *MockAtlasClusterQuickStarterCreateClusterLatestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateDatabaseUser mocks base method.
func (m *MockAtlasClusterQuickStarter) CreateDatabaseUser(arg0 *admin0.CloudDatabaseUser) (*admin0.CloudDatabaseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabaseUser", arg0)
	ret0, _ := ret[0].(*admin0.CloudDatabaseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabaseUser indicates an expected call of CreateDatabaseUser.
func (mr *MockAtlasClusterQuickStarterMockRecorder) CreateDatabaseUser(arg0 any) *MockAtlasClusterQuickStarterCreateDatabaseUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseUser", reflect.TypeOf((*MockAtlasClusterQuickStarter)(nil).CreateDatabaseUser), arg0)
	return &MockAtlasClusterQuickStarterCreateDatabaseUserCall{Call: call}
}

// MockAtlasClusterQuickStarterCreateDatabaseUserCall wrap *gomock.Call
type MockAtlasClusterQuickStarterCreateDatabaseUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterQuickStarterCreateDatabaseUserCall) Return(arg0 *admin0.CloudDatabaseUser, arg1 error) *MockAtlasClusterQuickStarterCreateDatabaseUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterQuickStarterCreateDatabaseUserCall) Do(f func(*admin0.CloudDatabaseUser) (*admin0.CloudDatabaseUser, error)) *MockAtlasClusterQuickStarterCreateDatabaseUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterQuickStarterCreateDatabaseUserCall) DoAndReturn(f func(*admin0.CloudDatabaseUser) (*admin0.CloudDatabaseUser, error)) *MockAtlasClusterQuickStarterCreateDatabaseUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateProjectIPAccessList mocks base method.
func (m *MockAtlasClusterQuickStarter) CreateProjectIPAccessList(arg0 []*admin0.NetworkPermissionEntry) (*admin0.PaginatedNetworkAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectIPAccessList", arg0)
	ret0, _ := ret[0].(*admin0.PaginatedNetworkAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectIPAccessList indicates an expected call of CreateProjectIPAccessList.
func (mr *MockAtlasClusterQuickStarterMockRecorder) CreateProjectIPAccessList(arg0 any) *MockAtlasClusterQuickStarterCreateProjectIPAccessListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectIPAccessList", reflect.TypeOf((*MockAtlasClusterQuickStarter)(nil).CreateProjectIPAccessList), arg0)
	return &MockAtlasClusterQuickStarterCreateProjectIPAccessListCall{Call: call}
}

// MockAtlasClusterQuickStarterCreateProjectIPAccessListCall wrap *gomock.Call
type MockAtlasClusterQuickStarterCreateProjectIPAccessListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterQuickStarterCreateProjectIPAccessListCall) Return(arg0 *admin0.PaginatedNetworkAccess, arg1 error) *MockAtlasClusterQuickStarterCreateProjectIPAccessListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterQuickStarterCreateProjectIPAccessListCall) Do(f func([]*admin0.NetworkPermissionEntry) (*admin0.PaginatedNetworkAccess, error)) *MockAtlasClusterQuickStarterCreateProjectIPAccessListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterQuickStarterCreateProjectIPAccessListCall) DoAndReturn(f func([]*admin0.NetworkPermissionEntry) (*admin0.PaginatedNetworkAccess, error)) *MockAtlasClusterQuickStarterCreateProjectIPAccessListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DatabaseUser mocks base method.
func (m *MockAtlasClusterQuickStarter) DatabaseUser(arg0, arg1, arg2 string) (*admin0.CloudDatabaseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin0.CloudDatabaseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatabaseUser indicates an expected call of DatabaseUser.
func (mr *MockAtlasClusterQuickStarterMockRecorder) DatabaseUser(arg0, arg1, arg2 any) *MockAtlasClusterQuickStarterDatabaseUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseUser", reflect.TypeOf((*MockAtlasClusterQuickStarter)(nil).DatabaseUser), arg0, arg1, arg2)
	return &MockAtlasClusterQuickStarterDatabaseUserCall{Call: call}
}

// MockAtlasClusterQuickStarterDatabaseUserCall wrap *gomock.Call
type MockAtlasClusterQuickStarterDatabaseUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterQuickStarterDatabaseUserCall) Return(arg0 *admin0.CloudDatabaseUser, arg1 error) *MockAtlasClusterQuickStarterDatabaseUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterQuickStarterDatabaseUserCall) Do(f func(string, string, string) (*admin0.CloudDatabaseUser, error)) *MockAtlasClusterQuickStarterDatabaseUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterQuickStarterDatabaseUserCall) DoAndReturn(f func(string, string, string) (*admin0.CloudDatabaseUser, error)) *MockAtlasClusterQuickStarterDatabaseUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LatestAtlasCluster mocks base method.
func (m *MockAtlasClusterQuickStarter) LatestAtlasCluster(arg0, arg1 string) (*admin0.ClusterDescription20240805, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestAtlasCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin0.ClusterDescription20240805)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestAtlasCluster indicates an expected call of LatestAtlasCluster.
func (mr *MockAtlasClusterQuickStarterMockRecorder) LatestAtlasCluster(arg0, arg1 any) *MockAtlasClusterQuickStarterLatestAtlasClusterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestAtlasCluster", reflect.TypeOf((*MockAtlasClusterQuickStarter)(nil).LatestAtlasCluster), arg0, arg1)
	return &MockAtlasClusterQuickStarterLatestAtlasClusterCall{Call: call}
}

// MockAtlasClusterQuickStarterLatestAtlasClusterCall wrap *gomock.Call
type MockAtlasClusterQuickStarterLatestAtlasClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterQuickStarterLatestAtlasClusterCall) Return(arg0 *admin0.ClusterDescription20240805, arg1 error) *MockAtlasClusterQuickStarterLatestAtlasClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterQuickStarterLatestAtlasClusterCall) Do(f func(string, string) (*admin0.ClusterDescription20240805, error)) *MockAtlasClusterQuickStarterLatestAtlasClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterQuickStarterLatestAtlasClusterCall) DoAndReturn(f func(string, string) (*admin0.ClusterDescription20240805, error)) *MockAtlasClusterQuickStarterLatestAtlasClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MDBVersions mocks base method.
func (m *MockAtlasClusterQuickStarter) MDBVersions(projectID string, opt *store.MDBVersionListOptions) (*admin0.PaginatedAvailableVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MDBVersions", projectID, opt)
	ret0, _ := ret[0].(*admin0.PaginatedAvailableVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MDBVersions indicates an expected call of MDBVersions.
func (mr *MockAtlasClusterQuickStarterMockRecorder) MDBVersions(projectID, opt any) *MockAtlasClusterQuickStarterMDBVersionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDBVersions", reflect.TypeOf((*MockAtlasClusterQuickStarter)(nil).MDBVersions), projectID, opt)
	return &MockAtlasClusterQuickStarterMDBVersionsCall{Call: call}
}

// MockAtlasClusterQuickStarterMDBVersionsCall wrap *gomock.Call
type MockAtlasClusterQuickStarterMDBVersionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterQuickStarterMDBVersionsCall) Return(arg0 *admin0.PaginatedAvailableVersion, arg1 error) *MockAtlasClusterQuickStarterMDBVersionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterQuickStarterMDBVersionsCall) Do(f func(string, *store.MDBVersionListOptions) (*admin0.PaginatedAvailableVersion, error)) *MockAtlasClusterQuickStarterMDBVersionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterQuickStarterMDBVersionsCall) DoAndReturn(f func(string, *store.MDBVersionListOptions) (*admin0.PaginatedAvailableVersion, error)) *MockAtlasClusterQuickStarterMDBVersionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SampleDataStatus mocks base method.
func (m *MockAtlasClusterQuickStarter) SampleDataStatus(arg0, arg1 string) (*admin0.SampleDatasetStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SampleDataStatus", arg0, arg1)
	ret0, _ := ret[0].(*admin0.SampleDatasetStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SampleDataStatus indicates an expected call of SampleDataStatus.
func (mr *MockAtlasClusterQuickStarterMockRecorder) SampleDataStatus(arg0, arg1 any) *MockAtlasClusterQuickStarterSampleDataStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SampleDataStatus", reflect.TypeOf((*MockAtlasClusterQuickStarter)(nil).SampleDataStatus), arg0, arg1)
	return &MockAtlasClusterQuickStarterSampleDataStatusCall{Call: call}
}

// MockAtlasClusterQuickStarterSampleDataStatusCall wrap *gomock.Call
type MockAtlasClusterQuickStarterSampleDataStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAtlasClusterQuickStarterSampleDataStatusCall) Return(arg0 *admin0.SampleDatasetStatus, arg1 error) *MockAtlasClusterQuickStarterSampleDataStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAtlasClusterQuickStarterSampleDataStatusCall) Do(f func(string, string) (*admin0.SampleDatasetStatus, error)) *MockAtlasClusterQuickStarterSampleDataStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAtlasClusterQuickStarterSampleDataStatusCall) DoAndReturn(f func(string, string) (*admin0.SampleDatasetStatus, error)) *MockAtlasClusterQuickStarterSampleDataStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
