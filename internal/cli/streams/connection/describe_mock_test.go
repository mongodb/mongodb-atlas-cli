// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/streams/connection (interfaces: StreamsConnectionDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=connection . StreamsConnectionDescriber
//

// Package connection is a generated GoMock package.
package connection

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamsConnectionDescriber is a mock of StreamsConnectionDescriber interface.
type MockStreamsConnectionDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsConnectionDescriberMockRecorder
	isgomock struct{}
}

// MockStreamsConnectionDescriberMockRecorder is the mock recorder for MockStreamsConnectionDescriber.
type MockStreamsConnectionDescriberMockRecorder struct {
	mock *MockStreamsConnectionDescriber
}

// NewMockStreamsConnectionDescriber creates a new mock instance.
func NewMockStreamsConnectionDescriber(ctrl *gomock.Controller) *MockStreamsConnectionDescriber {
	mock := &MockStreamsConnectionDescriber{ctrl: ctrl}
	mock.recorder = &MockStreamsConnectionDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsConnectionDescriber) EXPECT() *MockStreamsConnectionDescriberMockRecorder {
	return m.recorder
}

// StreamConnection mocks base method.
func (m *MockStreamsConnectionDescriber) StreamConnection(arg0, arg1, arg2 string) (*admin.StreamsConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamConnection", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.StreamsConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamConnection indicates an expected call of StreamConnection.
func (mr *MockStreamsConnectionDescriberMockRecorder) StreamConnection(arg0, arg1, arg2 any) *MockStreamsConnectionDescriberStreamConnectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamConnection", reflect.TypeOf((*MockStreamsConnectionDescriber)(nil).StreamConnection), arg0, arg1, arg2)
	return &MockStreamsConnectionDescriberStreamConnectionCall{Call: call}
}

// MockStreamsConnectionDescriberStreamConnectionCall wrap *gomock.Call
type MockStreamsConnectionDescriberStreamConnectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamsConnectionDescriberStreamConnectionCall) Return(arg0 *admin.StreamsConnection, arg1 error) *MockStreamsConnectionDescriberStreamConnectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamsConnectionDescriberStreamConnectionCall) Do(f func(string, string, string) (*admin.StreamsConnection, error)) *MockStreamsConnectionDescriberStreamConnectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamsConnectionDescriberStreamConnectionCall) DoAndReturn(f func(string, string, string) (*admin.StreamsConnection, error)) *MockStreamsConnectionDescriberStreamConnectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
