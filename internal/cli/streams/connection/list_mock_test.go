// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/streams/connection (interfaces: StreamsConnectionLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=connection . StreamsConnectionLister
//

// Package connection is a generated GoMock package.
package connection

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamsConnectionLister is a mock of StreamsConnectionLister interface.
type MockStreamsConnectionLister struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsConnectionListerMockRecorder
	isgomock struct{}
}

// MockStreamsConnectionListerMockRecorder is the mock recorder for MockStreamsConnectionLister.
type MockStreamsConnectionListerMockRecorder struct {
	mock *MockStreamsConnectionLister
}

// NewMockStreamsConnectionLister creates a new mock instance.
func NewMockStreamsConnectionLister(ctrl *gomock.Controller) *MockStreamsConnectionLister {
	mock := &MockStreamsConnectionLister{ctrl: ctrl}
	mock.recorder = &MockStreamsConnectionListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsConnectionLister) EXPECT() *MockStreamsConnectionListerMockRecorder {
	return m.recorder
}

// StreamsConnections mocks base method.
func (m *MockStreamsConnectionLister) StreamsConnections(arg0, arg1 string) (*admin.PaginatedApiStreamsConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamsConnections", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedApiStreamsConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamsConnections indicates an expected call of StreamsConnections.
func (mr *MockStreamsConnectionListerMockRecorder) StreamsConnections(arg0, arg1 any) *MockStreamsConnectionListerStreamsConnectionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamsConnections", reflect.TypeOf((*MockStreamsConnectionLister)(nil).StreamsConnections), arg0, arg1)
	return &MockStreamsConnectionListerStreamsConnectionsCall{Call: call}
}

// MockStreamsConnectionListerStreamsConnectionsCall wrap *gomock.Call
type MockStreamsConnectionListerStreamsConnectionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamsConnectionListerStreamsConnectionsCall) Return(arg0 *admin.PaginatedApiStreamsConnection, arg1 error) *MockStreamsConnectionListerStreamsConnectionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamsConnectionListerStreamsConnectionsCall) Do(f func(string, string) (*admin.PaginatedApiStreamsConnection, error)) *MockStreamsConnectionListerStreamsConnectionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamsConnectionListerStreamsConnectionsCall) DoAndReturn(f func(string, string) (*admin.PaginatedApiStreamsConnection, error)) *MockStreamsConnectionListerStreamsConnectionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
