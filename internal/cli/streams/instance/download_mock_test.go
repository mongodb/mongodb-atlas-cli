// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/streams/instance (interfaces: StreamsDownloader)
//
// Generated by this command:
//
//	mockgen -typed -destination=download_mock_test.go -package=instance . StreamsDownloader
//

// Package instance is a generated GoMock package.
package instance

import (
	io "io"
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamsDownloader is a mock of StreamsDownloader interface.
type MockStreamsDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsDownloaderMockRecorder
	isgomock struct{}
}

// MockStreamsDownloaderMockRecorder is the mock recorder for MockStreamsDownloader.
type MockStreamsDownloaderMockRecorder struct {
	mock *MockStreamsDownloader
}

// NewMockStreamsDownloader creates a new mock instance.
func NewMockStreamsDownloader(ctrl *gomock.Controller) *MockStreamsDownloader {
	mock := &MockStreamsDownloader{ctrl: ctrl}
	mock.recorder = &MockStreamsDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsDownloader) EXPECT() *MockStreamsDownloaderMockRecorder {
	return m.recorder
}

// DownloadAuditLog mocks base method.
func (m *MockStreamsDownloader) DownloadAuditLog(arg0 *admin.DownloadStreamTenantAuditLogsApiParams) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAuditLog", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAuditLog indicates an expected call of DownloadAuditLog.
func (mr *MockStreamsDownloaderMockRecorder) DownloadAuditLog(arg0 any) *MockStreamsDownloaderDownloadAuditLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAuditLog", reflect.TypeOf((*MockStreamsDownloader)(nil).DownloadAuditLog), arg0)
	return &MockStreamsDownloaderDownloadAuditLogCall{Call: call}
}

// MockStreamsDownloaderDownloadAuditLogCall wrap *gomock.Call
type MockStreamsDownloaderDownloadAuditLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamsDownloaderDownloadAuditLogCall) Return(arg0 io.ReadCloser, arg1 error) *MockStreamsDownloaderDownloadAuditLogCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamsDownloaderDownloadAuditLogCall) Do(f func(*admin.DownloadStreamTenantAuditLogsApiParams) (io.ReadCloser, error)) *MockStreamsDownloaderDownloadAuditLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamsDownloaderDownloadAuditLogCall) DoAndReturn(f func(*admin.DownloadStreamTenantAuditLogsApiParams) (io.ReadCloser, error)) *MockStreamsDownloaderDownloadAuditLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
