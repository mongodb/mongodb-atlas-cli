// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/streams/instance (interfaces: StreamsLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=instance . StreamsLister
//

// Package instance is a generated GoMock package.
package instance

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamsLister is a mock of StreamsLister interface.
type MockStreamsLister struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsListerMockRecorder
	isgomock struct{}
}

// MockStreamsListerMockRecorder is the mock recorder for MockStreamsLister.
type MockStreamsListerMockRecorder struct {
	mock *MockStreamsLister
}

// NewMockStreamsLister creates a new mock instance.
func NewMockStreamsLister(ctrl *gomock.Controller) *MockStreamsLister {
	mock := &MockStreamsLister{ctrl: ctrl}
	mock.recorder = &MockStreamsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsLister) EXPECT() *MockStreamsListerMockRecorder {
	return m.recorder
}

// ProjectStreams mocks base method.
func (m *MockStreamsLister) ProjectStreams(arg0 *admin.ListStreamWorkspacesApiParams) (*admin.PaginatedApiStreamsTenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectStreams", arg0)
	ret0, _ := ret[0].(*admin.PaginatedApiStreamsTenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectStreams indicates an expected call of ProjectStreams.
func (mr *MockStreamsListerMockRecorder) ProjectStreams(arg0 any) *MockStreamsListerProjectStreamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectStreams", reflect.TypeOf((*MockStreamsLister)(nil).ProjectStreams), arg0)
	return &MockStreamsListerProjectStreamsCall{Call: call}
}

// MockStreamsListerProjectStreamsCall wrap *gomock.Call
type MockStreamsListerProjectStreamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamsListerProjectStreamsCall) Return(arg0 *admin.PaginatedApiStreamsTenant, arg1 error) *MockStreamsListerProjectStreamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamsListerProjectStreamsCall) Do(f func(*admin.ListStreamWorkspacesApiParams) (*admin.PaginatedApiStreamsTenant, error)) *MockStreamsListerProjectStreamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamsListerProjectStreamsCall) DoAndReturn(f func(*admin.ListStreamWorkspacesApiParams) (*admin.PaginatedApiStreamsTenant, error)) *MockStreamsListerProjectStreamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
