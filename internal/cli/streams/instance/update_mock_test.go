// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/streams/instance (interfaces: StreamsUpdater)
//
// Generated by this command:
//
//	mockgen -typed -destination=update_mock_test.go -package=instance . StreamsUpdater
//

// Package instance is a generated GoMock package.
package instance

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamsUpdater is a mock of StreamsUpdater interface.
type MockStreamsUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsUpdaterMockRecorder
	isgomock struct{}
}

// MockStreamsUpdaterMockRecorder is the mock recorder for MockStreamsUpdater.
type MockStreamsUpdaterMockRecorder struct {
	mock *MockStreamsUpdater
}

// NewMockStreamsUpdater creates a new mock instance.
func NewMockStreamsUpdater(ctrl *gomock.Controller) *MockStreamsUpdater {
	mock := &MockStreamsUpdater{ctrl: ctrl}
	mock.recorder = &MockStreamsUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsUpdater) EXPECT() *MockStreamsUpdaterMockRecorder {
	return m.recorder
}

// UpdateStream mocks base method.
func (m *MockStreamsUpdater) UpdateStream(arg0, arg1 string, arg2 *admin.StreamsDataProcessRegion) (*admin.StreamsTenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.StreamsTenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStream indicates an expected call of UpdateStream.
func (mr *MockStreamsUpdaterMockRecorder) UpdateStream(arg0, arg1, arg2 any) *MockStreamsUpdaterUpdateStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockStreamsUpdater)(nil).UpdateStream), arg0, arg1, arg2)
	return &MockStreamsUpdaterUpdateStreamCall{Call: call}
}

// MockStreamsUpdaterUpdateStreamCall wrap *gomock.Call
type MockStreamsUpdaterUpdateStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamsUpdaterUpdateStreamCall) Return(arg0 *admin.StreamsTenant, arg1 error) *MockStreamsUpdaterUpdateStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamsUpdaterUpdateStreamCall) Do(f func(string, string, *admin.StreamsDataProcessRegion) (*admin.StreamsTenant, error)) *MockStreamsUpdaterUpdateStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamsUpdaterUpdateStreamCall) DoAndReturn(f func(string, string, *admin.StreamsDataProcessRegion) (*admin.StreamsTenant, error)) *MockStreamsUpdaterUpdateStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
