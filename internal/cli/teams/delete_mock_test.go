// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/teams (interfaces: TeamDeleter)
//
// Generated by this command:
//
//	mockgen -typed -destination=delete_mock_test.go -package=teams . TeamDeleter
//

// Package teams is a generated GoMock package.
package teams

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTeamDeleter is a mock of TeamDeleter interface.
type MockTeamDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockTeamDeleterMockRecorder
	isgomock struct{}
}

// MockTeamDeleterMockRecorder is the mock recorder for MockTeamDeleter.
type MockTeamDeleterMockRecorder struct {
	mock *MockTeamDeleter
}

// NewMockTeamDeleter creates a new mock instance.
func NewMockTeamDeleter(ctrl *gomock.Controller) *MockTeamDeleter {
	mock := &MockTeamDeleter{ctrl: ctrl}
	mock.recorder = &MockTeamDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamDeleter) EXPECT() *MockTeamDeleterMockRecorder {
	return m.recorder
}

// DeleteTeam mocks base method.
func (m *MockTeamDeleter) DeleteTeam(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockTeamDeleterMockRecorder) DeleteTeam(arg0, arg1 any) *MockTeamDeleterDeleteTeamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockTeamDeleter)(nil).DeleteTeam), arg0, arg1)
	return &MockTeamDeleterDeleteTeamCall{Call: call}
}

// MockTeamDeleterDeleteTeamCall wrap *gomock.Call
type MockTeamDeleterDeleteTeamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTeamDeleterDeleteTeamCall) Return(arg0 error) *MockTeamDeleterDeleteTeamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTeamDeleterDeleteTeamCall) Do(f func(string, string) error) *MockTeamDeleterDeleteTeamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTeamDeleterDeleteTeamCall) DoAndReturn(f func(string, string) error) *MockTeamDeleterDeleteTeamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
