// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/teams (interfaces: TeamDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=teams . TeamDescriber
//

// Package teams is a generated GoMock package.
package teams

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockTeamDescriber is a mock of TeamDescriber interface.
type MockTeamDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockTeamDescriberMockRecorder
	isgomock struct{}
}

// MockTeamDescriberMockRecorder is the mock recorder for MockTeamDescriber.
type MockTeamDescriberMockRecorder struct {
	mock *MockTeamDescriber
}

// NewMockTeamDescriber creates a new mock instance.
func NewMockTeamDescriber(ctrl *gomock.Controller) *MockTeamDescriber {
	mock := &MockTeamDescriber{ctrl: ctrl}
	mock.recorder = &MockTeamDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamDescriber) EXPECT() *MockTeamDescriberMockRecorder {
	return m.recorder
}

// TeamByID mocks base method.
func (m *MockTeamDescriber) TeamByID(arg0, arg1 string) (*admin.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamByID", arg0, arg1)
	ret0, _ := ret[0].(*admin.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamByID indicates an expected call of TeamByID.
func (mr *MockTeamDescriberMockRecorder) TeamByID(arg0, arg1 any) *MockTeamDescriberTeamByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamByID", reflect.TypeOf((*MockTeamDescriber)(nil).TeamByID), arg0, arg1)
	return &MockTeamDescriberTeamByIDCall{Call: call}
}

// MockTeamDescriberTeamByIDCall wrap *gomock.Call
type MockTeamDescriberTeamByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTeamDescriberTeamByIDCall) Return(arg0 *admin.TeamResponse, arg1 error) *MockTeamDescriberTeamByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTeamDescriberTeamByIDCall) Do(f func(string, string) (*admin.TeamResponse, error)) *MockTeamDescriberTeamByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTeamDescriberTeamByIDCall) DoAndReturn(f func(string, string) (*admin.TeamResponse, error)) *MockTeamDescriberTeamByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TeamByName mocks base method.
func (m *MockTeamDescriber) TeamByName(arg0, arg1 string) (*admin.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamByName", arg0, arg1)
	ret0, _ := ret[0].(*admin.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamByName indicates an expected call of TeamByName.
func (mr *MockTeamDescriberMockRecorder) TeamByName(arg0, arg1 any) *MockTeamDescriberTeamByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamByName", reflect.TypeOf((*MockTeamDescriber)(nil).TeamByName), arg0, arg1)
	return &MockTeamDescriberTeamByNameCall{Call: call}
}

// MockTeamDescriberTeamByNameCall wrap *gomock.Call
type MockTeamDescriberTeamByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTeamDescriberTeamByNameCall) Return(arg0 *admin.TeamResponse, arg1 error) *MockTeamDescriberTeamByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTeamDescriberTeamByNameCall) Do(f func(string, string) (*admin.TeamResponse, error)) *MockTeamDescriberTeamByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTeamDescriberTeamByNameCall) DoAndReturn(f func(string, string) (*admin.TeamResponse, error)) *MockTeamDescriberTeamByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
