// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/teams (interfaces: TeamLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=teams . TeamLister
//

// Package teams is a generated GoMock package.
package teams

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockTeamLister is a mock of TeamLister interface.
type MockTeamLister struct {
	ctrl     *gomock.Controller
	recorder *MockTeamListerMockRecorder
	isgomock struct{}
}

// MockTeamListerMockRecorder is the mock recorder for MockTeamLister.
type MockTeamListerMockRecorder struct {
	mock *MockTeamLister
}

// NewMockTeamLister creates a new mock instance.
func NewMockTeamLister(ctrl *gomock.Controller) *MockTeamLister {
	mock := &MockTeamLister{ctrl: ctrl}
	mock.recorder = &MockTeamListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamLister) EXPECT() *MockTeamListerMockRecorder {
	return m.recorder
}

// Teams mocks base method.
func (m *MockTeamLister) Teams(arg0 string, arg1 *store.ListOptions) (*admin.PaginatedTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teams", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teams indicates an expected call of Teams.
func (mr *MockTeamListerMockRecorder) Teams(arg0, arg1 any) *MockTeamListerTeamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teams", reflect.TypeOf((*MockTeamLister)(nil).Teams), arg0, arg1)
	return &MockTeamListerTeamsCall{Call: call}
}

// MockTeamListerTeamsCall wrap *gomock.Call
type MockTeamListerTeamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTeamListerTeamsCall) Return(arg0 *admin.PaginatedTeam, arg1 error) *MockTeamListerTeamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTeamListerTeamsCall) Do(f func(string, *store.ListOptions) (*admin.PaginatedTeam, error)) *MockTeamListerTeamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTeamListerTeamsCall) DoAndReturn(f func(string, *store.ListOptions) (*admin.PaginatedTeam, error)) *MockTeamListerTeamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
