// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/teams (interfaces: TeamRenamer)
//
// Generated by this command:
//
//	mockgen -typed -destination=rename_mock_test.go -package=teams . TeamRenamer
//

// Package teams is a generated GoMock package.
package teams

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockTeamRenamer is a mock of TeamRenamer interface.
type MockTeamRenamer struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRenamerMockRecorder
	isgomock struct{}
}

// MockTeamRenamerMockRecorder is the mock recorder for MockTeamRenamer.
type MockTeamRenamerMockRecorder struct {
	mock *MockTeamRenamer
}

// NewMockTeamRenamer creates a new mock instance.
func NewMockTeamRenamer(ctrl *gomock.Controller) *MockTeamRenamer {
	mock := &MockTeamRenamer{ctrl: ctrl}
	mock.recorder = &MockTeamRenamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRenamer) EXPECT() *MockTeamRenamerMockRecorder {
	return m.recorder
}

// RenameTeam mocks base method.
func (m *MockTeamRenamer) RenameTeam(arg0, arg1 string, arg2 *admin.TeamUpdate) (*admin.TeamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameTeam", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.TeamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameTeam indicates an expected call of RenameTeam.
func (mr *MockTeamRenamerMockRecorder) RenameTeam(arg0, arg1, arg2 any) *MockTeamRenamerRenameTeamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameTeam", reflect.TypeOf((*MockTeamRenamer)(nil).RenameTeam), arg0, arg1, arg2)
	return &MockTeamRenamerRenameTeamCall{Call: call}
}

// MockTeamRenamerRenameTeamCall wrap *gomock.Call
type MockTeamRenamerRenameTeamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTeamRenamerRenameTeamCall) Return(arg0 *admin.TeamResponse, arg1 error) *MockTeamRenamerRenameTeamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTeamRenamerRenameTeamCall) Do(f func(string, string, *admin.TeamUpdate) (*admin.TeamResponse, error)) *MockTeamRenamerRenameTeamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTeamRenamerRenameTeamCall) DoAndReturn(f func(string, string, *admin.TeamUpdate) (*admin.TeamResponse, error)) *MockTeamRenamerRenameTeamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
