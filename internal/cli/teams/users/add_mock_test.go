// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/teams/users (interfaces: TeamAdder)
//
// Generated by this command:
//
//	mockgen -typed -destination=add_mock_test.go -package=users . TeamAdder
//

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312007/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockTeamAdder is a mock of TeamAdder interface.
type MockTeamAdder struct {
	ctrl     *gomock.Controller
	recorder *MockTeamAdderMockRecorder
	isgomock struct{}
}

// MockTeamAdderMockRecorder is the mock recorder for MockTeamAdder.
type MockTeamAdderMockRecorder struct {
	mock *MockTeamAdder
}

// NewMockTeamAdder creates a new mock instance.
func NewMockTeamAdder(ctrl *gomock.Controller) *MockTeamAdder {
	mock := &MockTeamAdder{ctrl: ctrl}
	mock.recorder = &MockTeamAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamAdder) EXPECT() *MockTeamAdderMockRecorder {
	return m.recorder
}

// AddUsersToTeam mocks base method.
func (m *MockTeamAdder) AddUsersToTeam(arg0, arg1 string, arg2 []admin.AddUserToTeam) (*admin.PaginatedApiAppUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUsersToTeam", arg0, arg1, arg2)
	ret0, _ := ret[0].(*admin.PaginatedApiAppUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUsersToTeam indicates an expected call of AddUsersToTeam.
func (mr *MockTeamAdderMockRecorder) AddUsersToTeam(arg0, arg1, arg2 any) *MockTeamAdderAddUsersToTeamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersToTeam", reflect.TypeOf((*MockTeamAdder)(nil).AddUsersToTeam), arg0, arg1, arg2)
	return &MockTeamAdderAddUsersToTeamCall{Call: call}
}

// MockTeamAdderAddUsersToTeamCall wrap *gomock.Call
type MockTeamAdderAddUsersToTeamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTeamAdderAddUsersToTeamCall) Return(arg0 *admin.PaginatedApiAppUser, arg1 error) *MockTeamAdderAddUsersToTeamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTeamAdderAddUsersToTeamCall) Do(f func(string, string, []admin.AddUserToTeam) (*admin.PaginatedApiAppUser, error)) *MockTeamAdderAddUsersToTeamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTeamAdderAddUsersToTeamCall) DoAndReturn(f func(string, string, []admin.AddUserToTeam) (*admin.PaginatedApiAppUser, error)) *MockTeamAdderAddUsersToTeamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
