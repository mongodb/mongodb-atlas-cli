// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/teams/users (interfaces: TeamUserRemover)
//
// Generated by this command:
//
//	mockgen -typed -destination=delete_mock_test.go -package=users . TeamUserRemover
//

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTeamUserRemover is a mock of TeamUserRemover interface.
type MockTeamUserRemover struct {
	ctrl     *gomock.Controller
	recorder *MockTeamUserRemoverMockRecorder
	isgomock struct{}
}

// MockTeamUserRemoverMockRecorder is the mock recorder for MockTeamUserRemover.
type MockTeamUserRemoverMockRecorder struct {
	mock *MockTeamUserRemover
}

// NewMockTeamUserRemover creates a new mock instance.
func NewMockTeamUserRemover(ctrl *gomock.Controller) *MockTeamUserRemover {
	mock := &MockTeamUserRemover{ctrl: ctrl}
	mock.recorder = &MockTeamUserRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamUserRemover) EXPECT() *MockTeamUserRemoverMockRecorder {
	return m.recorder
}

// RemoveUserFromTeam mocks base method.
func (m *MockTeamUserRemover) RemoveUserFromTeam(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromTeam", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromTeam indicates an expected call of RemoveUserFromTeam.
func (mr *MockTeamUserRemoverMockRecorder) RemoveUserFromTeam(arg0, arg1, arg2 any) *MockTeamUserRemoverRemoveUserFromTeamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromTeam", reflect.TypeOf((*MockTeamUserRemover)(nil).RemoveUserFromTeam), arg0, arg1, arg2)
	return &MockTeamUserRemoverRemoveUserFromTeamCall{Call: call}
}

// MockTeamUserRemoverRemoveUserFromTeamCall wrap *gomock.Call
type MockTeamUserRemoverRemoveUserFromTeamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTeamUserRemoverRemoveUserFromTeamCall) Return(arg0 error) *MockTeamUserRemoverRemoveUserFromTeamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTeamUserRemoverRemoveUserFromTeamCall) Do(f func(string, string, string) error) *MockTeamUserRemoverRemoveUserFromTeamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTeamUserRemoverRemoveUserFromTeamCall) DoAndReturn(f func(string, string, string) error) *MockTeamUserRemoverRemoveUserFromTeamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
