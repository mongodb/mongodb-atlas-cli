// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/teams/users (interfaces: TeamUserLister)
//
// Generated by this command:
//
//	mockgen -typed -destination=list_mock_test.go -package=users . TeamUserLister
//

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312008/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockTeamUserLister is a mock of TeamUserLister interface.
type MockTeamUserLister struct {
	ctrl     *gomock.Controller
	recorder *MockTeamUserListerMockRecorder
	isgomock struct{}
}

// MockTeamUserListerMockRecorder is the mock recorder for MockTeamUserLister.
type MockTeamUserListerMockRecorder struct {
	mock *MockTeamUserLister
}

// NewMockTeamUserLister creates a new mock instance.
func NewMockTeamUserLister(ctrl *gomock.Controller) *MockTeamUserLister {
	mock := &MockTeamUserLister{ctrl: ctrl}
	mock.recorder = &MockTeamUserListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamUserLister) EXPECT() *MockTeamUserListerMockRecorder {
	return m.recorder
}

// TeamUsers mocks base method.
func (m *MockTeamUserLister) TeamUsers(arg0, arg1 string) (*admin.PaginatedOrgUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeamUsers", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedOrgUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeamUsers indicates an expected call of TeamUsers.
func (mr *MockTeamUserListerMockRecorder) TeamUsers(arg0, arg1 any) *MockTeamUserListerTeamUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeamUsers", reflect.TypeOf((*MockTeamUserLister)(nil).TeamUsers), arg0, arg1)
	return &MockTeamUserListerTeamUsersCall{Call: call}
}

// MockTeamUserListerTeamUsersCall wrap *gomock.Call
type MockTeamUserListerTeamUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTeamUserListerTeamUsersCall) Return(arg0 *admin.PaginatedOrgUser, arg1 error) *MockTeamUserListerTeamUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTeamUserListerTeamUsersCall) Do(f func(string, string) (*admin.PaginatedOrgUser, error)) *MockTeamUserListerTeamUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTeamUserListerTeamUsersCall) DoAndReturn(f func(string, string) (*admin.PaginatedOrgUser, error)) *MockTeamUserListerTeamUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
