// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli/users (interfaces: UserDescriber)
//
// Generated by this command:
//
//	mockgen -typed -destination=describe_mock_test.go -package=users . UserDescriber
//

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312005/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockUserDescriber is a mock of UserDescriber interface.
type MockUserDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockUserDescriberMockRecorder
	isgomock struct{}
}

// MockUserDescriberMockRecorder is the mock recorder for MockUserDescriber.
type MockUserDescriberMockRecorder struct {
	mock *MockUserDescriber
}

// NewMockUserDescriber creates a new mock instance.
func NewMockUserDescriber(ctrl *gomock.Controller) *MockUserDescriber {
	mock := &MockUserDescriber{ctrl: ctrl}
	mock.recorder = &MockUserDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDescriber) EXPECT() *MockUserDescriberMockRecorder {
	return m.recorder
}

// UserByID mocks base method.
func (m *MockUserDescriber) UserByID(arg0 string) (*admin.CloudAppUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByID", arg0)
	ret0, _ := ret[0].(*admin.CloudAppUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByID indicates an expected call of UserByID.
func (mr *MockUserDescriberMockRecorder) UserByID(arg0 any) *MockUserDescriberUserByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByID", reflect.TypeOf((*MockUserDescriber)(nil).UserByID), arg0)
	return &MockUserDescriberUserByIDCall{Call: call}
}

// MockUserDescriberUserByIDCall wrap *gomock.Call
type MockUserDescriberUserByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserDescriberUserByIDCall) Return(arg0 *admin.CloudAppUser, arg1 error) *MockUserDescriberUserByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserDescriberUserByIDCall) Do(f func(string) (*admin.CloudAppUser, error)) *MockUserDescriberUserByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserDescriberUserByIDCall) DoAndReturn(f func(string) (*admin.CloudAppUser, error)) *MockUserDescriberUserByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UserByName mocks base method.
func (m *MockUserDescriber) UserByName(arg0 string) (*admin.CloudAppUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByName", arg0)
	ret0, _ := ret[0].(*admin.CloudAppUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByName indicates an expected call of UserByName.
func (mr *MockUserDescriberMockRecorder) UserByName(arg0 any) *MockUserDescriberUserByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByName", reflect.TypeOf((*MockUserDescriber)(nil).UserByName), arg0)
	return &MockUserDescriberUserByNameCall{Call: call}
}

// MockUserDescriberUserByNameCall wrap *gomock.Call
type MockUserDescriberUserByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserDescriberUserByNameCall) Return(arg0 *admin.CloudAppUser, arg1 error) *MockUserDescriberUserByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserDescriberUserByNameCall) Do(f func(string) (*admin.CloudAppUser, error)) *MockUserDescriberUserByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserDescriberUserByNameCall) DoAndReturn(f func(string) (*admin.CloudAppUser, error)) *MockUserDescriberUserByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
