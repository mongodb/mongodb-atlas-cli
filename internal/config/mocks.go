// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/config (interfaces: ConfigStore)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go -package=config github.com/mongodb/mongodb-atlas-cli/atlascli/internal/config ConfigStore
//

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigStore is a mock of ConfigStore interface.
type MockConfigStore struct {
	ctrl     *gomock.Controller
	recorder *MockConfigStoreMockRecorder
	isgomock struct{}
}

// MockConfigStoreMockRecorder is the mock recorder for MockConfigStore.
type MockConfigStoreMockRecorder struct {
	mock *MockConfigStore
}

// NewMockConfigStore creates a new mock instance.
func NewMockConfigStore(ctrl *gomock.Controller) *MockConfigStore {
	mock := &MockConfigStore{ctrl: ctrl}
	mock.recorder = &MockConfigStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigStore) EXPECT() *MockConfigStoreMockRecorder {
	return m.recorder
}

// DeleteProfile mocks base method.
func (m *MockConfigStore) DeleteProfile(profileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", profileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockConfigStoreMockRecorder) DeleteProfile(profileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockConfigStore)(nil).DeleteProfile), profileName)
}

// GetGlobalValue mocks base method.
func (m *MockConfigStore) GetGlobalValue(propertyName string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalValue", propertyName)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetGlobalValue indicates an expected call of GetGlobalValue.
func (mr *MockConfigStoreMockRecorder) GetGlobalValue(propertyName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalValue", reflect.TypeOf((*MockConfigStore)(nil).GetGlobalValue), propertyName)
}

// GetHierarchicalValue mocks base method.
func (m *MockConfigStore) GetHierarchicalValue(profileName, propertyName string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHierarchicalValue", profileName, propertyName)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetHierarchicalValue indicates an expected call of GetHierarchicalValue.
func (mr *MockConfigStoreMockRecorder) GetHierarchicalValue(profileName, propertyName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHierarchicalValue", reflect.TypeOf((*MockConfigStore)(nil).GetHierarchicalValue), profileName, propertyName)
}

// GetProfileNames mocks base method.
func (m *MockConfigStore) GetProfileNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetProfileNames indicates an expected call of GetProfileNames.
func (mr *MockConfigStoreMockRecorder) GetProfileNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileNames", reflect.TypeOf((*MockConfigStore)(nil).GetProfileNames))
}

// GetProfileValue mocks base method.
func (m *MockConfigStore) GetProfileValue(profileName, propertyName string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileValue", profileName, propertyName)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetProfileValue indicates an expected call of GetProfileValue.
func (mr *MockConfigStoreMockRecorder) GetProfileValue(profileName, propertyName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileValue", reflect.TypeOf((*MockConfigStore)(nil).GetProfileValue), profileName, propertyName)
}

// IsSetGlobal mocks base method.
func (m *MockConfigStore) IsSetGlobal(propertyName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSetGlobal", propertyName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSetGlobal indicates an expected call of IsSetGlobal.
func (mr *MockConfigStoreMockRecorder) IsSetGlobal(propertyName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSetGlobal", reflect.TypeOf((*MockConfigStore)(nil).IsSetGlobal), propertyName)
}

// RenameProfile mocks base method.
func (m *MockConfigStore) RenameProfile(oldProfileName, newProfileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProfile", oldProfileName, newProfileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameProfile indicates an expected call of RenameProfile.
func (mr *MockConfigStoreMockRecorder) RenameProfile(oldProfileName, newProfileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProfile", reflect.TypeOf((*MockConfigStore)(nil).RenameProfile), oldProfileName, newProfileName)
}

// Save mocks base method.
func (m *MockConfigStore) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockConfigStoreMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockConfigStore)(nil).Save))
}

// SetGlobalValue mocks base method.
func (m *MockConfigStore) SetGlobalValue(propertyName string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGlobalValue", propertyName, value)
}

// SetGlobalValue indicates an expected call of SetGlobalValue.
func (mr *MockConfigStoreMockRecorder) SetGlobalValue(propertyName, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobalValue", reflect.TypeOf((*MockConfigStore)(nil).SetGlobalValue), propertyName, value)
}

// SetProfileValue mocks base method.
func (m *MockConfigStore) SetProfileValue(profileName, propertyName string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProfileValue", profileName, propertyName, value)
}

// SetProfileValue indicates an expected call of SetProfileValue.
func (mr *MockConfigStoreMockRecorder) SetProfileValue(profileName, propertyName, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfileValue", reflect.TypeOf((*MockConfigStore)(nil).SetProfileValue), profileName, propertyName, value)
}
