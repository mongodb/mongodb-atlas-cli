// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/internal/store/atlas (interfaces: CompliancePolicyDescriber,CompliancePolicy,EnableEncryptionAtRestStore,CompliancePolicyCopyProtectionEnabler,CompliancePolicyCopyProtectionDisabler)

// Package atlas is a generated GoMock package.
package atlas

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	admin "go.mongodb.org/atlas-sdk/v20230201004/admin"
)

// MockCompliancePolicyDescriber is a mock of CompliancePolicyDescriber interface.
type MockCompliancePolicyDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockCompliancePolicyDescriberMockRecorder
}

// MockCompliancePolicyDescriberMockRecorder is the mock recorder for MockCompliancePolicyDescriber.
type MockCompliancePolicyDescriberMockRecorder struct {
	mock *MockCompliancePolicyDescriber
}

// NewMockCompliancePolicyDescriber creates a new mock instance.
func NewMockCompliancePolicyDescriber(ctrl *gomock.Controller) *MockCompliancePolicyDescriber {
	mock := &MockCompliancePolicyDescriber{ctrl: ctrl}
	mock.recorder = &MockCompliancePolicyDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompliancePolicyDescriber) EXPECT() *MockCompliancePolicyDescriberMockRecorder {
	return m.recorder
}

// DescribeCompliancePolicy mocks base method.
func (m *MockCompliancePolicyDescriber) DescribeCompliancePolicy(arg0 string) (*admin.DataProtectionSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCompliancePolicy", arg0)
	ret0, _ := ret[0].(*admin.DataProtectionSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCompliancePolicy indicates an expected call of DescribeCompliancePolicy.
func (mr *MockCompliancePolicyDescriberMockRecorder) DescribeCompliancePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCompliancePolicy", reflect.TypeOf((*MockCompliancePolicyDescriber)(nil).DescribeCompliancePolicy), arg0)
}

// MockCompliancePolicy is a mock of CompliancePolicy interface.
type MockCompliancePolicy struct {
	ctrl     *gomock.Controller
	recorder *MockCompliancePolicyMockRecorder
}

// MockCompliancePolicyMockRecorder is the mock recorder for MockCompliancePolicy.
type MockCompliancePolicyMockRecorder struct {
	mock *MockCompliancePolicy
}

// NewMockCompliancePolicy creates a new mock instance.
func NewMockCompliancePolicy(ctrl *gomock.Controller) *MockCompliancePolicy {
	mock := &MockCompliancePolicy{ctrl: ctrl}
	mock.recorder = &MockCompliancePolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompliancePolicy) EXPECT() *MockCompliancePolicyMockRecorder {
	return m.recorder
}

// DescribeCompliancePolicy mocks base method.
func (m *MockCompliancePolicy) DescribeCompliancePolicy(arg0 string) (*admin.DataProtectionSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCompliancePolicy", arg0)
	ret0, _ := ret[0].(*admin.DataProtectionSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCompliancePolicy indicates an expected call of DescribeCompliancePolicy.
func (mr *MockCompliancePolicyMockRecorder) DescribeCompliancePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCompliancePolicy", reflect.TypeOf((*MockCompliancePolicy)(nil).DescribeCompliancePolicy), arg0)
}

// UpdateCompliancePolicy mocks base method.
func (m *MockCompliancePolicy) UpdateCompliancePolicy(arg0 string, arg1 *admin.DataProtectionSettings) (*admin.DataProtectionSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompliancePolicy", arg0, arg1)
	ret0, _ := ret[0].(*admin.DataProtectionSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompliancePolicy indicates an expected call of UpdateCompliancePolicy.
func (mr *MockCompliancePolicyMockRecorder) UpdateCompliancePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompliancePolicy", reflect.TypeOf((*MockCompliancePolicy)(nil).UpdateCompliancePolicy), arg0, arg1)
}

// MockEnableEncryptionAtRestStore is a mock of EnableEncryptionAtRestStore interface.
type MockEnableEncryptionAtRestStore struct {
	ctrl     *gomock.Controller
	recorder *MockEnableEncryptionAtRestStoreMockRecorder
}

// MockEnableEncryptionAtRestStoreMockRecorder is the mock recorder for MockEnableEncryptionAtRestStore.
type MockEnableEncryptionAtRestStoreMockRecorder struct {
	mock *MockEnableEncryptionAtRestStore
}

// NewMockEnableEncryptionAtRestStore creates a new mock instance.
func NewMockEnableEncryptionAtRestStore(ctrl *gomock.Controller) *MockEnableEncryptionAtRestStore {
	mock := &MockEnableEncryptionAtRestStore{ctrl: ctrl}
	mock.recorder = &MockEnableEncryptionAtRestStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnableEncryptionAtRestStore) EXPECT() *MockEnableEncryptionAtRestStoreMockRecorder {
	return m.recorder
}

// DescribeCompliancePolicy mocks base method.
func (m *MockEnableEncryptionAtRestStore) DescribeCompliancePolicy(arg0 string) (*admin.DataProtectionSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCompliancePolicy", arg0)
	ret0, _ := ret[0].(*admin.DataProtectionSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCompliancePolicy indicates an expected call of DescribeCompliancePolicy.
func (mr *MockEnableEncryptionAtRestStoreMockRecorder) DescribeCompliancePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCompliancePolicy", reflect.TypeOf((*MockEnableEncryptionAtRestStore)(nil).DescribeCompliancePolicy), arg0)
}

// EnableEncryptionAtRest mocks base method.
func (m *MockEnableEncryptionAtRestStore) EnableEncryptionAtRest(arg0 string) (*admin.DataProtectionSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableEncryptionAtRest", arg0)
	ret0, _ := ret[0].(*admin.DataProtectionSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableEncryptionAtRest indicates an expected call of EnableEncryptionAtRest.
func (mr *MockEnableEncryptionAtRestStoreMockRecorder) EnableEncryptionAtRest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableEncryptionAtRest", reflect.TypeOf((*MockEnableEncryptionAtRestStore)(nil).EnableEncryptionAtRest), arg0)
}

// MockCompliancePolicyCopyProtectionEnabler is a mock of CompliancePolicyCopyProtectionEnabler interface.
type MockCompliancePolicyCopyProtectionEnabler struct {
	ctrl     *gomock.Controller
	recorder *MockCompliancePolicyCopyProtectionEnablerMockRecorder
}

// MockCompliancePolicyCopyProtectionEnablerMockRecorder is the mock recorder for MockCompliancePolicyCopyProtectionEnabler.
type MockCompliancePolicyCopyProtectionEnablerMockRecorder struct {
	mock *MockCompliancePolicyCopyProtectionEnabler
}

// NewMockCompliancePolicyCopyProtectionEnabler creates a new mock instance.
func NewMockCompliancePolicyCopyProtectionEnabler(ctrl *gomock.Controller) *MockCompliancePolicyCopyProtectionEnabler {
	mock := &MockCompliancePolicyCopyProtectionEnabler{ctrl: ctrl}
	mock.recorder = &MockCompliancePolicyCopyProtectionEnablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompliancePolicyCopyProtectionEnabler) EXPECT() *MockCompliancePolicyCopyProtectionEnablerMockRecorder {
	return m.recorder
}

// DescribeCompliancePolicy mocks base method.
func (m *MockCompliancePolicyCopyProtectionEnabler) DescribeCompliancePolicy(arg0 string) (*admin.DataProtectionSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCompliancePolicy", arg0)
	ret0, _ := ret[0].(*admin.DataProtectionSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCompliancePolicy indicates an expected call of DescribeCompliancePolicy.
func (mr *MockCompliancePolicyCopyProtectionEnablerMockRecorder) DescribeCompliancePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCompliancePolicy", reflect.TypeOf((*MockCompliancePolicyCopyProtectionEnabler)(nil).DescribeCompliancePolicy), arg0)
}

// EnableCopyProtection mocks base method.
func (m *MockCompliancePolicyCopyProtectionEnabler) EnableCopyProtection(arg0 string) (*admin.DataProtectionSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCopyProtection", arg0)
	ret0, _ := ret[0].(*admin.DataProtectionSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableCopyProtection indicates an expected call of EnableCopyProtection.
func (mr *MockCompliancePolicyCopyProtectionEnablerMockRecorder) EnableCopyProtection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCopyProtection", reflect.TypeOf((*MockCompliancePolicyCopyProtectionEnabler)(nil).EnableCopyProtection), arg0)
}

// MockCompliancePolicyCopyProtectionDisabler is a mock of CompliancePolicyCopyProtectionDisabler interface.
type MockCompliancePolicyCopyProtectionDisabler struct {
	ctrl     *gomock.Controller
	recorder *MockCompliancePolicyCopyProtectionDisablerMockRecorder
}

// MockCompliancePolicyCopyProtectionDisablerMockRecorder is the mock recorder for MockCompliancePolicyCopyProtectionDisabler.
type MockCompliancePolicyCopyProtectionDisablerMockRecorder struct {
	mock *MockCompliancePolicyCopyProtectionDisabler
}

// NewMockCompliancePolicyCopyProtectionDisabler creates a new mock instance.
func NewMockCompliancePolicyCopyProtectionDisabler(ctrl *gomock.Controller) *MockCompliancePolicyCopyProtectionDisabler {
	mock := &MockCompliancePolicyCopyProtectionDisabler{ctrl: ctrl}
	mock.recorder = &MockCompliancePolicyCopyProtectionDisablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompliancePolicyCopyProtectionDisabler) EXPECT() *MockCompliancePolicyCopyProtectionDisablerMockRecorder {
	return m.recorder
}

// DescribeCompliancePolicy mocks base method.
func (m *MockCompliancePolicyCopyProtectionDisabler) DescribeCompliancePolicy(arg0 string) (*admin.DataProtectionSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeCompliancePolicy", arg0)
	ret0, _ := ret[0].(*admin.DataProtectionSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCompliancePolicy indicates an expected call of DescribeCompliancePolicy.
func (mr *MockCompliancePolicyCopyProtectionDisablerMockRecorder) DescribeCompliancePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCompliancePolicy", reflect.TypeOf((*MockCompliancePolicyCopyProtectionDisabler)(nil).DescribeCompliancePolicy), arg0)
}

// DisableCopyProtection mocks base method.
func (m *MockCompliancePolicyCopyProtectionDisabler) DisableCopyProtection(arg0 string) (*admin.DataProtectionSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableCopyProtection", arg0)
	ret0, _ := ret[0].(*admin.DataProtectionSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableCopyProtection indicates an expected call of DisableCopyProtection.
func (mr *MockCompliancePolicyCopyProtectionDisablerMockRecorder) DisableCopyProtection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableCopyProtection", reflect.TypeOf((*MockCompliancePolicyCopyProtectionDisabler)(nil).DisableCopyProtection), arg0)
}
