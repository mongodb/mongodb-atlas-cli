// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: CloudProviderAccessRoleCreator)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	reflect "reflect"
)

// MockCloudProviderAccessRoleCreator is a mock of CloudProviderAccessRoleCreator interface
type MockCloudProviderAccessRoleCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCloudProviderAccessRoleCreatorMockRecorder
}

// MockCloudProviderAccessRoleCreatorMockRecorder is the mock recorder for MockCloudProviderAccessRoleCreator
type MockCloudProviderAccessRoleCreatorMockRecorder struct {
	mock *MockCloudProviderAccessRoleCreator
}

// NewMockCloudProviderAccessRoleCreator creates a new mock instance
func NewMockCloudProviderAccessRoleCreator(ctrl *gomock.Controller) *MockCloudProviderAccessRoleCreator {
	mock := &MockCloudProviderAccessRoleCreator{ctrl: ctrl}
	mock.recorder = &MockCloudProviderAccessRoleCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudProviderAccessRoleCreator) EXPECT() *MockCloudProviderAccessRoleCreatorMockRecorder {
	return m.recorder
}

// CreateCloudProviderAccessRole mocks base method
func (m *MockCloudProviderAccessRoleCreator) CreateCloudProviderAccessRole(arg0, arg1 string) (*mongodbatlas.AWSIAMRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCloudProviderAccessRole", arg0, arg1)
	ret0, _ := ret[0].(*mongodbatlas.AWSIAMRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCloudProviderAccessRole indicates an expected call of CreateCloudProviderAccessRole
func (mr *MockCloudProviderAccessRoleCreatorMockRecorder) CreateCloudProviderAccessRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCloudProviderAccessRole", reflect.TypeOf((*MockCloudProviderAccessRoleCreator)(nil).CreateCloudProviderAccessRole), arg0, arg1)
}
