// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/alert_configuration.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "github.com/mongodb/go-client-mongodb-atlas/mongodbatlas"
	reflect "reflect"
)

// MockAlertConfigurationLister is a mock of AlertConfigurationLister interface
type MockAlertConfigurationLister struct {
	ctrl     *gomock.Controller
	recorder *MockAlertConfigurationListerMockRecorder
}

// MockAlertConfigurationListerMockRecorder is the mock recorder for MockAlertConfigurationLister
type MockAlertConfigurationListerMockRecorder struct {
	mock *MockAlertConfigurationLister
}

// NewMockAlertConfigurationLister creates a new mock instance
func NewMockAlertConfigurationLister(ctrl *gomock.Controller) *MockAlertConfigurationLister {
	mock := &MockAlertConfigurationLister{ctrl: ctrl}
	mock.recorder = &MockAlertConfigurationListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlertConfigurationLister) EXPECT() *MockAlertConfigurationListerMockRecorder {
	return m.recorder
}

// AlertConfigurations mocks base method
func (m *MockAlertConfigurationLister) AlertConfigurations(arg0 string, arg1 *mongodbatlas.ListOptions) ([]mongodbatlas.AlertConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlertConfigurations", arg0, arg1)
	ret0, _ := ret[0].([]mongodbatlas.AlertConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlertConfigurations indicates an expected call of AlertConfigurations
func (mr *MockAlertConfigurationListerMockRecorder) AlertConfigurations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertConfigurations", reflect.TypeOf((*MockAlertConfigurationLister)(nil).AlertConfigurations), arg0, arg1)
}

// MockAlertConfigurationCreator is a mock of AlertConfigurationCreator interface
type MockAlertConfigurationCreator struct {
	ctrl     *gomock.Controller
	recorder *MockAlertConfigurationCreatorMockRecorder
}

// MockAlertConfigurationCreatorMockRecorder is the mock recorder for MockAlertConfigurationCreator
type MockAlertConfigurationCreatorMockRecorder struct {
	mock *MockAlertConfigurationCreator
}

// NewMockAlertConfigurationCreator creates a new mock instance
func NewMockAlertConfigurationCreator(ctrl *gomock.Controller) *MockAlertConfigurationCreator {
	mock := &MockAlertConfigurationCreator{ctrl: ctrl}
	mock.recorder = &MockAlertConfigurationCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlertConfigurationCreator) EXPECT() *MockAlertConfigurationCreatorMockRecorder {
	return m.recorder
}

// CreateAlertConfiguration mocks base method
func (m *MockAlertConfigurationCreator) CreateAlertConfiguration(arg0 *mongodbatlas.AlertConfiguration) (*mongodbatlas.AlertConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertConfiguration", arg0)
	ret0, _ := ret[0].(*mongodbatlas.AlertConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlertConfiguration indicates an expected call of CreateAlertConfiguration
func (mr *MockAlertConfigurationCreatorMockRecorder) CreateAlertConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertConfiguration", reflect.TypeOf((*MockAlertConfigurationCreator)(nil).CreateAlertConfiguration), arg0)
}

// MockAlertConfigurationDeleter is a mock of AlertConfigurationDeleter interface
type MockAlertConfigurationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockAlertConfigurationDeleterMockRecorder
}

// MockAlertConfigurationDeleterMockRecorder is the mock recorder for MockAlertConfigurationDeleter
type MockAlertConfigurationDeleterMockRecorder struct {
	mock *MockAlertConfigurationDeleter
}

// NewMockAlertConfigurationDeleter creates a new mock instance
func NewMockAlertConfigurationDeleter(ctrl *gomock.Controller) *MockAlertConfigurationDeleter {
	mock := &MockAlertConfigurationDeleter{ctrl: ctrl}
	mock.recorder = &MockAlertConfigurationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlertConfigurationDeleter) EXPECT() *MockAlertConfigurationDeleterMockRecorder {
	return m.recorder
}

// DeleteAlertConfiguration mocks base method
func (m *MockAlertConfigurationDeleter) DeleteAlertConfiguration(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlertConfiguration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlertConfiguration indicates an expected call of DeleteAlertConfiguration
func (mr *MockAlertConfigurationDeleterMockRecorder) DeleteAlertConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertConfiguration", reflect.TypeOf((*MockAlertConfigurationDeleter)(nil).DeleteAlertConfiguration), arg0, arg1)
}

// MockMatcherFieldsLister is a mock of MatcherFieldsLister interface
type MockMatcherFieldsLister struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherFieldsListerMockRecorder
}

// MockMatcherFieldsListerMockRecorder is the mock recorder for MockMatcherFieldsLister
type MockMatcherFieldsListerMockRecorder struct {
	mock *MockMatcherFieldsLister
}

// NewMockMatcherFieldsLister creates a new mock instance
func NewMockMatcherFieldsLister(ctrl *gomock.Controller) *MockMatcherFieldsLister {
	mock := &MockMatcherFieldsLister{ctrl: ctrl}
	mock.recorder = &MockMatcherFieldsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatcherFieldsLister) EXPECT() *MockMatcherFieldsListerMockRecorder {
	return m.recorder
}

// MatcherFields mocks base method
func (m *MockMatcherFieldsLister) MatcherFields() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatcherFields")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatcherFields indicates an expected call of MatcherFields
func (mr *MockMatcherFieldsListerMockRecorder) MatcherFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatcherFields", reflect.TypeOf((*MockMatcherFieldsLister)(nil).MatcherFields))
}

// MockAlertConfigurationStore is a mock of AlertConfigurationStore interface
type MockAlertConfigurationStore struct {
	ctrl     *gomock.Controller
	recorder *MockAlertConfigurationStoreMockRecorder
}

// MockAlertConfigurationStoreMockRecorder is the mock recorder for MockAlertConfigurationStore
type MockAlertConfigurationStoreMockRecorder struct {
	mock *MockAlertConfigurationStore
}

// NewMockAlertConfigurationStore creates a new mock instance
func NewMockAlertConfigurationStore(ctrl *gomock.Controller) *MockAlertConfigurationStore {
	mock := &MockAlertConfigurationStore{ctrl: ctrl}
	mock.recorder = &MockAlertConfigurationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlertConfigurationStore) EXPECT() *MockAlertConfigurationStoreMockRecorder {
	return m.recorder
}

// AlertConfigurations mocks base method
func (m *MockAlertConfigurationStore) AlertConfigurations(arg0 string, arg1 *mongodbatlas.ListOptions) ([]mongodbatlas.AlertConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlertConfigurations", arg0, arg1)
	ret0, _ := ret[0].([]mongodbatlas.AlertConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlertConfigurations indicates an expected call of AlertConfigurations
func (mr *MockAlertConfigurationStoreMockRecorder) AlertConfigurations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertConfigurations", reflect.TypeOf((*MockAlertConfigurationStore)(nil).AlertConfigurations), arg0, arg1)
}

// CreateAlertConfiguration mocks base method
func (m *MockAlertConfigurationStore) CreateAlertConfiguration(arg0 *mongodbatlas.AlertConfiguration) (*mongodbatlas.AlertConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertConfiguration", arg0)
	ret0, _ := ret[0].(*mongodbatlas.AlertConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlertConfiguration indicates an expected call of CreateAlertConfiguration
func (mr *MockAlertConfigurationStoreMockRecorder) CreateAlertConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertConfiguration", reflect.TypeOf((*MockAlertConfigurationStore)(nil).CreateAlertConfiguration), arg0)
}

// DeleteAlertConfiguration mocks base method
func (m *MockAlertConfigurationStore) DeleteAlertConfiguration(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlertConfiguration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlertConfiguration indicates an expected call of DeleteAlertConfiguration
func (mr *MockAlertConfigurationStoreMockRecorder) DeleteAlertConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertConfiguration", reflect.TypeOf((*MockAlertConfigurationStore)(nil).DeleteAlertConfiguration), arg0, arg1)
}

// MatcherFields mocks base method
func (m *MockAlertConfigurationStore) MatcherFields() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatcherFields")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatcherFields indicates an expected call of MatcherFields
func (mr *MockAlertConfigurationStoreMockRecorder) MatcherFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatcherFields", reflect.TypeOf((*MockAlertConfigurationStore)(nil).MatcherFields))
}
