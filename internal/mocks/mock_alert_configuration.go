// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store (interfaces: MatcherFieldsLister,AlertConfigurationEnabler,AlertConfigurationDisabler)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_alert_configuration.go -package=mocks github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store MatcherFieldsLister,AlertConfigurationEnabler,AlertConfigurationDisabler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockMatcherFieldsLister is a mock of MatcherFieldsLister interface.
type MockMatcherFieldsLister struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherFieldsListerMockRecorder
	isgomock struct{}
}

// MockMatcherFieldsListerMockRecorder is the mock recorder for MockMatcherFieldsLister.
type MockMatcherFieldsListerMockRecorder struct {
	mock *MockMatcherFieldsLister
}

// NewMockMatcherFieldsLister creates a new mock instance.
func NewMockMatcherFieldsLister(ctrl *gomock.Controller) *MockMatcherFieldsLister {
	mock := &MockMatcherFieldsLister{ctrl: ctrl}
	mock.recorder = &MockMatcherFieldsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatcherFieldsLister) EXPECT() *MockMatcherFieldsListerMockRecorder {
	return m.recorder
}

// MatcherFields mocks base method.
func (m *MockMatcherFieldsLister) MatcherFields() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatcherFields")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatcherFields indicates an expected call of MatcherFields.
func (mr *MockMatcherFieldsListerMockRecorder) MatcherFields() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatcherFields", reflect.TypeOf((*MockMatcherFieldsLister)(nil).MatcherFields))
}

// MockAlertConfigurationEnabler is a mock of AlertConfigurationEnabler interface.
type MockAlertConfigurationEnabler struct {
	ctrl     *gomock.Controller
	recorder *MockAlertConfigurationEnablerMockRecorder
	isgomock struct{}
}

// MockAlertConfigurationEnablerMockRecorder is the mock recorder for MockAlertConfigurationEnabler.
type MockAlertConfigurationEnablerMockRecorder struct {
	mock *MockAlertConfigurationEnabler
}

// NewMockAlertConfigurationEnabler creates a new mock instance.
func NewMockAlertConfigurationEnabler(ctrl *gomock.Controller) *MockAlertConfigurationEnabler {
	mock := &MockAlertConfigurationEnabler{ctrl: ctrl}
	mock.recorder = &MockAlertConfigurationEnablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertConfigurationEnabler) EXPECT() *MockAlertConfigurationEnablerMockRecorder {
	return m.recorder
}

// EnableAlertConfiguration mocks base method.
func (m *MockAlertConfigurationEnabler) EnableAlertConfiguration(arg0, arg1 string) (*admin.GroupAlertsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAlertConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*admin.GroupAlertsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAlertConfiguration indicates an expected call of EnableAlertConfiguration.
func (mr *MockAlertConfigurationEnablerMockRecorder) EnableAlertConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAlertConfiguration", reflect.TypeOf((*MockAlertConfigurationEnabler)(nil).EnableAlertConfiguration), arg0, arg1)
}

// MockAlertConfigurationDisabler is a mock of AlertConfigurationDisabler interface.
type MockAlertConfigurationDisabler struct {
	ctrl     *gomock.Controller
	recorder *MockAlertConfigurationDisablerMockRecorder
	isgomock struct{}
}

// MockAlertConfigurationDisablerMockRecorder is the mock recorder for MockAlertConfigurationDisabler.
type MockAlertConfigurationDisablerMockRecorder struct {
	mock *MockAlertConfigurationDisabler
}

// NewMockAlertConfigurationDisabler creates a new mock instance.
func NewMockAlertConfigurationDisabler(ctrl *gomock.Controller) *MockAlertConfigurationDisabler {
	mock := &MockAlertConfigurationDisabler{ctrl: ctrl}
	mock.recorder = &MockAlertConfigurationDisablerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertConfigurationDisabler) EXPECT() *MockAlertConfigurationDisablerMockRecorder {
	return m.recorder
}

// DisableAlertConfiguration mocks base method.
func (m *MockAlertConfigurationDisabler) DisableAlertConfiguration(arg0, arg1 string) (*admin.GroupAlertsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAlertConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*admin.GroupAlertsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAlertConfiguration indicates an expected call of DisableAlertConfiguration.
func (mr *MockAlertConfigurationDisablerMockRecorder) DisableAlertConfiguration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAlertConfiguration", reflect.TypeOf((*MockAlertConfigurationDisabler)(nil).DisableAlertConfiguration), arg0, arg1)
}
