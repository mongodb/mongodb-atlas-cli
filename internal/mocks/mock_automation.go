// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: AutomationGetter,AutomationUpdater,AutomationStatusGetter,AutomationPatcher,CloudManagerClustersLister,CloudManagerClustersDescriber,CloudManagerClustersDeleter)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	opsmngr "go.mongodb.org/ops-manager/opsmngr"
	reflect "reflect"
)

// MockAutomationGetter is a mock of AutomationGetter interface
type MockAutomationGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAutomationGetterMockRecorder
}

// MockAutomationGetterMockRecorder is the mock recorder for MockAutomationGetter
type MockAutomationGetterMockRecorder struct {
	mock *MockAutomationGetter
}

// NewMockAutomationGetter creates a new mock instance
func NewMockAutomationGetter(ctrl *gomock.Controller) *MockAutomationGetter {
	mock := &MockAutomationGetter{ctrl: ctrl}
	mock.recorder = &MockAutomationGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAutomationGetter) EXPECT() *MockAutomationGetterMockRecorder {
	return m.recorder
}

// GetAutomationConfig mocks base method
func (m *MockAutomationGetter) GetAutomationConfig(arg0 string) (*opsmngr.AutomationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomationConfig", arg0)
	ret0, _ := ret[0].(*opsmngr.AutomationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomationConfig indicates an expected call of GetAutomationConfig
func (mr *MockAutomationGetterMockRecorder) GetAutomationConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomationConfig", reflect.TypeOf((*MockAutomationGetter)(nil).GetAutomationConfig), arg0)
}

// MockAutomationUpdater is a mock of AutomationUpdater interface
type MockAutomationUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockAutomationUpdaterMockRecorder
}

// MockAutomationUpdaterMockRecorder is the mock recorder for MockAutomationUpdater
type MockAutomationUpdaterMockRecorder struct {
	mock *MockAutomationUpdater
}

// NewMockAutomationUpdater creates a new mock instance
func NewMockAutomationUpdater(ctrl *gomock.Controller) *MockAutomationUpdater {
	mock := &MockAutomationUpdater{ctrl: ctrl}
	mock.recorder = &MockAutomationUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAutomationUpdater) EXPECT() *MockAutomationUpdaterMockRecorder {
	return m.recorder
}

// UpdateAutomationConfig mocks base method
func (m *MockAutomationUpdater) UpdateAutomationConfig(arg0 string, arg1 *opsmngr.AutomationConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAutomationConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAutomationConfig indicates an expected call of UpdateAutomationConfig
func (mr *MockAutomationUpdaterMockRecorder) UpdateAutomationConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutomationConfig", reflect.TypeOf((*MockAutomationUpdater)(nil).UpdateAutomationConfig), arg0, arg1)
}

// MockAutomationStatusGetter is a mock of AutomationStatusGetter interface
type MockAutomationStatusGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAutomationStatusGetterMockRecorder
}

// MockAutomationStatusGetterMockRecorder is the mock recorder for MockAutomationStatusGetter
type MockAutomationStatusGetterMockRecorder struct {
	mock *MockAutomationStatusGetter
}

// NewMockAutomationStatusGetter creates a new mock instance
func NewMockAutomationStatusGetter(ctrl *gomock.Controller) *MockAutomationStatusGetter {
	mock := &MockAutomationStatusGetter{ctrl: ctrl}
	mock.recorder = &MockAutomationStatusGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAutomationStatusGetter) EXPECT() *MockAutomationStatusGetterMockRecorder {
	return m.recorder
}

// GetAutomationStatus mocks base method
func (m *MockAutomationStatusGetter) GetAutomationStatus(arg0 string) (*opsmngr.AutomationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomationStatus", arg0)
	ret0, _ := ret[0].(*opsmngr.AutomationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomationStatus indicates an expected call of GetAutomationStatus
func (mr *MockAutomationStatusGetterMockRecorder) GetAutomationStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomationStatus", reflect.TypeOf((*MockAutomationStatusGetter)(nil).GetAutomationStatus), arg0)
}

// MockAutomationPatcher is a mock of AutomationPatcher interface
type MockAutomationPatcher struct {
	ctrl     *gomock.Controller
	recorder *MockAutomationPatcherMockRecorder
}

// MockAutomationPatcherMockRecorder is the mock recorder for MockAutomationPatcher
type MockAutomationPatcherMockRecorder struct {
	mock *MockAutomationPatcher
}

// NewMockAutomationPatcher creates a new mock instance
func NewMockAutomationPatcher(ctrl *gomock.Controller) *MockAutomationPatcher {
	mock := &MockAutomationPatcher{ctrl: ctrl}
	mock.recorder = &MockAutomationPatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAutomationPatcher) EXPECT() *MockAutomationPatcherMockRecorder {
	return m.recorder
}

// GetAutomationConfig mocks base method
func (m *MockAutomationPatcher) GetAutomationConfig(arg0 string) (*opsmngr.AutomationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomationConfig", arg0)
	ret0, _ := ret[0].(*opsmngr.AutomationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomationConfig indicates an expected call of GetAutomationConfig
func (mr *MockAutomationPatcherMockRecorder) GetAutomationConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomationConfig", reflect.TypeOf((*MockAutomationPatcher)(nil).GetAutomationConfig), arg0)
}

// UpdateAutomationConfig mocks base method
func (m *MockAutomationPatcher) UpdateAutomationConfig(arg0 string, arg1 *opsmngr.AutomationConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAutomationConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAutomationConfig indicates an expected call of UpdateAutomationConfig
func (mr *MockAutomationPatcherMockRecorder) UpdateAutomationConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutomationConfig", reflect.TypeOf((*MockAutomationPatcher)(nil).UpdateAutomationConfig), arg0, arg1)
}

// MockCloudManagerClustersLister is a mock of CloudManagerClustersLister interface
type MockCloudManagerClustersLister struct {
	ctrl     *gomock.Controller
	recorder *MockCloudManagerClustersListerMockRecorder
}

// MockCloudManagerClustersListerMockRecorder is the mock recorder for MockCloudManagerClustersLister
type MockCloudManagerClustersListerMockRecorder struct {
	mock *MockCloudManagerClustersLister
}

// NewMockCloudManagerClustersLister creates a new mock instance
func NewMockCloudManagerClustersLister(ctrl *gomock.Controller) *MockCloudManagerClustersLister {
	mock := &MockCloudManagerClustersLister{ctrl: ctrl}
	mock.recorder = &MockCloudManagerClustersListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudManagerClustersLister) EXPECT() *MockCloudManagerClustersListerMockRecorder {
	return m.recorder
}

// GetAutomationConfig mocks base method
func (m *MockCloudManagerClustersLister) GetAutomationConfig(arg0 string) (*opsmngr.AutomationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomationConfig", arg0)
	ret0, _ := ret[0].(*opsmngr.AutomationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomationConfig indicates an expected call of GetAutomationConfig
func (mr *MockCloudManagerClustersListerMockRecorder) GetAutomationConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomationConfig", reflect.TypeOf((*MockCloudManagerClustersLister)(nil).GetAutomationConfig), arg0)
}

// ListAllProjectClusters mocks base method
func (m *MockCloudManagerClustersLister) ListAllProjectClusters() (*opsmngr.AllClustersProjects, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllProjectClusters")
	ret0, _ := ret[0].(*opsmngr.AllClustersProjects)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllProjectClusters indicates an expected call of ListAllProjectClusters
func (mr *MockCloudManagerClustersListerMockRecorder) ListAllProjectClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllProjectClusters", reflect.TypeOf((*MockCloudManagerClustersLister)(nil).ListAllProjectClusters))
}

// ProjectClusters mocks base method
func (m *MockCloudManagerClustersLister) ProjectClusters(arg0 string, arg1 *mongodbatlas.ListOptions) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectClusters", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectClusters indicates an expected call of ProjectClusters
func (mr *MockCloudManagerClustersListerMockRecorder) ProjectClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectClusters", reflect.TypeOf((*MockCloudManagerClustersLister)(nil).ProjectClusters), arg0, arg1)
}

// MockCloudManagerClustersDescriber is a mock of CloudManagerClustersDescriber interface
type MockCloudManagerClustersDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockCloudManagerClustersDescriberMockRecorder
}

// MockCloudManagerClustersDescriberMockRecorder is the mock recorder for MockCloudManagerClustersDescriber
type MockCloudManagerClustersDescriberMockRecorder struct {
	mock *MockCloudManagerClustersDescriber
}

// NewMockCloudManagerClustersDescriber creates a new mock instance
func NewMockCloudManagerClustersDescriber(ctrl *gomock.Controller) *MockCloudManagerClustersDescriber {
	mock := &MockCloudManagerClustersDescriber{ctrl: ctrl}
	mock.recorder = &MockCloudManagerClustersDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudManagerClustersDescriber) EXPECT() *MockCloudManagerClustersDescriberMockRecorder {
	return m.recorder
}

// GetAutomationConfig mocks base method
func (m *MockCloudManagerClustersDescriber) GetAutomationConfig(arg0 string) (*opsmngr.AutomationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomationConfig", arg0)
	ret0, _ := ret[0].(*opsmngr.AutomationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomationConfig indicates an expected call of GetAutomationConfig
func (mr *MockCloudManagerClustersDescriberMockRecorder) GetAutomationConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomationConfig", reflect.TypeOf((*MockCloudManagerClustersDescriber)(nil).GetAutomationConfig), arg0)
}

// OpsManagerCluster mocks base method
func (m *MockCloudManagerClustersDescriber) OpsManagerCluster(arg0, arg1 string) (*opsmngr.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsManagerCluster", arg0, arg1)
	ret0, _ := ret[0].(*opsmngr.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpsManagerCluster indicates an expected call of OpsManagerCluster
func (mr *MockCloudManagerClustersDescriberMockRecorder) OpsManagerCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsManagerCluster", reflect.TypeOf((*MockCloudManagerClustersDescriber)(nil).OpsManagerCluster), arg0, arg1)
}

// MockCloudManagerClustersDeleter is a mock of CloudManagerClustersDeleter interface
type MockCloudManagerClustersDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockCloudManagerClustersDeleterMockRecorder
}

// MockCloudManagerClustersDeleterMockRecorder is the mock recorder for MockCloudManagerClustersDeleter
type MockCloudManagerClustersDeleterMockRecorder struct {
	mock *MockCloudManagerClustersDeleter
}

// NewMockCloudManagerClustersDeleter creates a new mock instance
func NewMockCloudManagerClustersDeleter(ctrl *gomock.Controller) *MockCloudManagerClustersDeleter {
	mock := &MockCloudManagerClustersDeleter{ctrl: ctrl}
	mock.recorder = &MockCloudManagerClustersDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudManagerClustersDeleter) EXPECT() *MockCloudManagerClustersDeleterMockRecorder {
	return m.recorder
}

// GetAutomationConfig mocks base method
func (m *MockCloudManagerClustersDeleter) GetAutomationConfig(arg0 string) (*opsmngr.AutomationConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomationConfig", arg0)
	ret0, _ := ret[0].(*opsmngr.AutomationConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomationConfig indicates an expected call of GetAutomationConfig
func (mr *MockCloudManagerClustersDeleterMockRecorder) GetAutomationConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomationConfig", reflect.TypeOf((*MockCloudManagerClustersDeleter)(nil).GetAutomationConfig), arg0)
}

// GetAutomationStatus mocks base method
func (m *MockCloudManagerClustersDeleter) GetAutomationStatus(arg0 string) (*opsmngr.AutomationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutomationStatus", arg0)
	ret0, _ := ret[0].(*opsmngr.AutomationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutomationStatus indicates an expected call of GetAutomationStatus
func (mr *MockCloudManagerClustersDeleterMockRecorder) GetAutomationStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutomationStatus", reflect.TypeOf((*MockCloudManagerClustersDeleter)(nil).GetAutomationStatus), arg0)
}

// HostByHostname mocks base method
func (m *MockCloudManagerClustersDeleter) HostByHostname(arg0, arg1 string, arg2 int) (*opsmngr.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostByHostname", arg0, arg1, arg2)
	ret0, _ := ret[0].(*opsmngr.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostByHostname indicates an expected call of HostByHostname
func (mr *MockCloudManagerClustersDeleterMockRecorder) HostByHostname(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostByHostname", reflect.TypeOf((*MockCloudManagerClustersDeleter)(nil).HostByHostname), arg0, arg1, arg2)
}

// StopMonitoring mocks base method
func (m *MockCloudManagerClustersDeleter) StopMonitoring(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopMonitoring", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopMonitoring indicates an expected call of StopMonitoring
func (mr *MockCloudManagerClustersDeleterMockRecorder) StopMonitoring(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopMonitoring", reflect.TypeOf((*MockCloudManagerClustersDeleter)(nil).StopMonitoring), arg0, arg1)
}

// UpdateAutomationConfig mocks base method
func (m *MockCloudManagerClustersDeleter) UpdateAutomationConfig(arg0 string, arg1 *opsmngr.AutomationConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAutomationConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAutomationConfig indicates an expected call of UpdateAutomationConfig
func (mr *MockCloudManagerClustersDeleterMockRecorder) UpdateAutomationConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutomationConfig", reflect.TypeOf((*MockCloudManagerClustersDeleter)(nil).UpdateAutomationConfig), arg0, arg1)
}
