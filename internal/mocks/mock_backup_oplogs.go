// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: OplogsLister,OplogsDescriber)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	opsmngr "go.mongodb.org/ops-manager/opsmngr"
	reflect "reflect"
)

// MockOplogsLister is a mock of OplogsLister interface
type MockOplogsLister struct {
	ctrl     *gomock.Controller
	recorder *MockOplogsListerMockRecorder
}

// MockOplogsListerMockRecorder is the mock recorder for MockOplogsLister
type MockOplogsListerMockRecorder struct {
	mock *MockOplogsLister
}

// NewMockOplogsLister creates a new mock instance
func NewMockOplogsLister(ctrl *gomock.Controller) *MockOplogsLister {
	mock := &MockOplogsLister{ctrl: ctrl}
	mock.recorder = &MockOplogsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOplogsLister) EXPECT() *MockOplogsListerMockRecorder {
	return m.recorder
}

// ListOplogs mocks base method
func (m *MockOplogsLister) ListOplogs(arg0 *mongodbatlas.ListOptions) (*opsmngr.BackupStores, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOplogs", arg0)
	ret0, _ := ret[0].(*opsmngr.BackupStores)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOplogs indicates an expected call of ListOplogs
func (mr *MockOplogsListerMockRecorder) ListOplogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOplogs", reflect.TypeOf((*MockOplogsLister)(nil).ListOplogs), arg0)
}

// MockOplogsDescriber is a mock of OplogsDescriber interface
type MockOplogsDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockOplogsDescriberMockRecorder
}

// MockOplogsDescriberMockRecorder is the mock recorder for MockOplogsDescriber
type MockOplogsDescriberMockRecorder struct {
	mock *MockOplogsDescriber
}

// NewMockOplogsDescriber creates a new mock instance
func NewMockOplogsDescriber(ctrl *gomock.Controller) *MockOplogsDescriber {
	mock := &MockOplogsDescriber{ctrl: ctrl}
	mock.recorder = &MockOplogsDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOplogsDescriber) EXPECT() *MockOplogsDescriberMockRecorder {
	return m.recorder
}

// GetOplog mocks base method
func (m *MockOplogsDescriber) GetOplog(arg0 string) (*opsmngr.BackupStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOplog", arg0)
	ret0, _ := ret[0].(*opsmngr.BackupStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOplog indicates an expected call of GetOplog
func (mr *MockOplogsDescriberMockRecorder) GetOplog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOplog", reflect.TypeOf((*MockOplogsDescriber)(nil).GetOplog), arg0)
}
