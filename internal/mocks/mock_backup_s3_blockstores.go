// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: S3BlockstoresLister,S3BlockstoresDeleter,S3BlockstoresCreator,S3BlockstoresUpdater,S3BlockstoresDescriber)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	opsmngr "go.mongodb.org/ops-manager/opsmngr"
)

// MockS3BlockstoresLister is a mock of S3BlockstoresLister interface.
type MockS3BlockstoresLister struct {
	ctrl     *gomock.Controller
	recorder *MockS3BlockstoresListerMockRecorder
}

// MockS3BlockstoresListerMockRecorder is the mock recorder for MockS3BlockstoresLister.
type MockS3BlockstoresListerMockRecorder struct {
	mock *MockS3BlockstoresLister
}

// NewMockS3BlockstoresLister creates a new mock instance.
func NewMockS3BlockstoresLister(ctrl *gomock.Controller) *MockS3BlockstoresLister {
	mock := &MockS3BlockstoresLister{ctrl: ctrl}
	mock.recorder = &MockS3BlockstoresListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3BlockstoresLister) EXPECT() *MockS3BlockstoresListerMockRecorder {
	return m.recorder
}

// ListS3Blockstores mocks base method.
func (m *MockS3BlockstoresLister) ListS3Blockstores(arg0 *mongodbatlas.ListOptions) (*opsmngr.S3Blockstores, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListS3Blockstores", arg0)
	ret0, _ := ret[0].(*opsmngr.S3Blockstores)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListS3Blockstores indicates an expected call of ListS3Blockstores.
func (mr *MockS3BlockstoresListerMockRecorder) ListS3Blockstores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListS3Blockstores", reflect.TypeOf((*MockS3BlockstoresLister)(nil).ListS3Blockstores), arg0)
}

// MockS3BlockstoresDeleter is a mock of S3BlockstoresDeleter interface.
type MockS3BlockstoresDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockS3BlockstoresDeleterMockRecorder
}

// MockS3BlockstoresDeleterMockRecorder is the mock recorder for MockS3BlockstoresDeleter.
type MockS3BlockstoresDeleterMockRecorder struct {
	mock *MockS3BlockstoresDeleter
}

// NewMockS3BlockstoresDeleter creates a new mock instance.
func NewMockS3BlockstoresDeleter(ctrl *gomock.Controller) *MockS3BlockstoresDeleter {
	mock := &MockS3BlockstoresDeleter{ctrl: ctrl}
	mock.recorder = &MockS3BlockstoresDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3BlockstoresDeleter) EXPECT() *MockS3BlockstoresDeleterMockRecorder {
	return m.recorder
}

// DeleteS3Blockstore mocks base method.
func (m *MockS3BlockstoresDeleter) DeleteS3Blockstore(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteS3Blockstore", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteS3Blockstore indicates an expected call of DeleteS3Blockstore.
func (mr *MockS3BlockstoresDeleterMockRecorder) DeleteS3Blockstore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteS3Blockstore", reflect.TypeOf((*MockS3BlockstoresDeleter)(nil).DeleteS3Blockstore), arg0)
}

// MockS3BlockstoresCreator is a mock of S3BlockstoresCreator interface.
type MockS3BlockstoresCreator struct {
	ctrl     *gomock.Controller
	recorder *MockS3BlockstoresCreatorMockRecorder
}

// MockS3BlockstoresCreatorMockRecorder is the mock recorder for MockS3BlockstoresCreator.
type MockS3BlockstoresCreatorMockRecorder struct {
	mock *MockS3BlockstoresCreator
}

// NewMockS3BlockstoresCreator creates a new mock instance.
func NewMockS3BlockstoresCreator(ctrl *gomock.Controller) *MockS3BlockstoresCreator {
	mock := &MockS3BlockstoresCreator{ctrl: ctrl}
	mock.recorder = &MockS3BlockstoresCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3BlockstoresCreator) EXPECT() *MockS3BlockstoresCreatorMockRecorder {
	return m.recorder
}

// CreateS3Blockstores mocks base method.
func (m *MockS3BlockstoresCreator) CreateS3Blockstores(arg0 *opsmngr.S3Blockstore) (*opsmngr.S3Blockstore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateS3Blockstores", arg0)
	ret0, _ := ret[0].(*opsmngr.S3Blockstore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateS3Blockstores indicates an expected call of CreateS3Blockstores.
func (mr *MockS3BlockstoresCreatorMockRecorder) CreateS3Blockstores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateS3Blockstores", reflect.TypeOf((*MockS3BlockstoresCreator)(nil).CreateS3Blockstores), arg0)
}

// MockS3BlockstoresUpdater is a mock of S3BlockstoresUpdater interface.
type MockS3BlockstoresUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockS3BlockstoresUpdaterMockRecorder
}

// MockS3BlockstoresUpdaterMockRecorder is the mock recorder for MockS3BlockstoresUpdater.
type MockS3BlockstoresUpdaterMockRecorder struct {
	mock *MockS3BlockstoresUpdater
}

// NewMockS3BlockstoresUpdater creates a new mock instance.
func NewMockS3BlockstoresUpdater(ctrl *gomock.Controller) *MockS3BlockstoresUpdater {
	mock := &MockS3BlockstoresUpdater{ctrl: ctrl}
	mock.recorder = &MockS3BlockstoresUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3BlockstoresUpdater) EXPECT() *MockS3BlockstoresUpdaterMockRecorder {
	return m.recorder
}

// UpdateS3Blockstores mocks base method.
func (m *MockS3BlockstoresUpdater) UpdateS3Blockstores(arg0 string, arg1 *opsmngr.S3Blockstore) (*opsmngr.S3Blockstore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateS3Blockstores", arg0, arg1)
	ret0, _ := ret[0].(*opsmngr.S3Blockstore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateS3Blockstores indicates an expected call of UpdateS3Blockstores.
func (mr *MockS3BlockstoresUpdaterMockRecorder) UpdateS3Blockstores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateS3Blockstores", reflect.TypeOf((*MockS3BlockstoresUpdater)(nil).UpdateS3Blockstores), arg0, arg1)
}

// MockS3BlockstoresDescriber is a mock of S3BlockstoresDescriber interface.
type MockS3BlockstoresDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockS3BlockstoresDescriberMockRecorder
}

// MockS3BlockstoresDescriberMockRecorder is the mock recorder for MockS3BlockstoresDescriber.
type MockS3BlockstoresDescriberMockRecorder struct {
	mock *MockS3BlockstoresDescriber
}

// NewMockS3BlockstoresDescriber creates a new mock instance.
func NewMockS3BlockstoresDescriber(ctrl *gomock.Controller) *MockS3BlockstoresDescriber {
	mock := &MockS3BlockstoresDescriber{ctrl: ctrl}
	mock.recorder = &MockS3BlockstoresDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3BlockstoresDescriber) EXPECT() *MockS3BlockstoresDescriberMockRecorder {
	return m.recorder
}

// GetS3Blockstore mocks base method.
func (m *MockS3BlockstoresDescriber) GetS3Blockstore(arg0 string) (*opsmngr.S3Blockstore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3Blockstore", arg0)
	ret0, _ := ret[0].(*opsmngr.S3Blockstore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetS3Blockstore indicates an expected call of GetS3Blockstore.
func (mr *MockS3BlockstoresDescriberMockRecorder) GetS3Blockstore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3Blockstore", reflect.TypeOf((*MockS3BlockstoresDescriber)(nil).GetS3Blockstore), arg0)
}
