// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/homebrew (interfaces: PathStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPathStore is a mock of PathStore interface.
type MockPathStore struct {
	ctrl     *gomock.Controller
	recorder *MockPathStoreMockRecorder
}

// MockPathStoreMockRecorder is the mock recorder for MockPathStore.
type MockPathStoreMockRecorder struct {
	mock *MockPathStore
}

// NewMockPathStore creates a new mock instance.
func NewMockPathStore(ctrl *gomock.Controller) *MockPathStore {
	mock := &MockPathStore{ctrl: ctrl}
	mock.recorder = &MockPathStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathStore) EXPECT() *MockPathStoreMockRecorder {
	return m.recorder
}

// LoadBrewPath mocks base method.
func (m *MockPathStore) LoadBrewPath() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBrewPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadBrewPath indicates an expected call of LoadBrewPath.
func (mr *MockPathStoreMockRecorder) LoadBrewPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBrewPath", reflect.TypeOf((*MockPathStore)(nil).LoadBrewPath))
}

// SaveBrewPath mocks base method.
func (m *MockPathStore) SaveBrewPath(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBrewPath", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBrewPath indicates an expected call of SaveBrewPath.
func (mr *MockPathStoreMockRecorder) SaveBrewPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBrewPath", reflect.TypeOf((*MockPathStore)(nil).SaveBrewPath), arg0, arg1)
}
