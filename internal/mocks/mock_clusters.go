// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store (interfaces: ClusterLister,ClusterDescriber,ClusterCreator,ClusterDeleter,ClusterPauser,ClusterStarter,ClusterDescriberStarter)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_clusters.go -package=mocks github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store ClusterLister,ClusterDescriber,ClusterCreator,ClusterDeleter,ClusterPauser,ClusterStarter,ClusterDescriberStarter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20240530005/admin"
	admin0 "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockClusterLister is a mock of ClusterLister interface.
type MockClusterLister struct {
	ctrl     *gomock.Controller
	recorder *MockClusterListerMockRecorder
	isgomock struct{}
}

// MockClusterListerMockRecorder is the mock recorder for MockClusterLister.
type MockClusterListerMockRecorder struct {
	mock *MockClusterLister
}

// NewMockClusterLister creates a new mock instance.
func NewMockClusterLister(ctrl *gomock.Controller) *MockClusterLister {
	mock := &MockClusterLister{ctrl: ctrl}
	mock.recorder = &MockClusterListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterLister) EXPECT() *MockClusterListerMockRecorder {
	return m.recorder
}

// ListFlexClusters mocks base method.
func (m *MockClusterLister) ListFlexClusters(arg0 *admin0.ListFlexClustersApiParams) (*admin0.PaginatedFlexClusters20241113, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlexClusters", arg0)
	ret0, _ := ret[0].(*admin0.PaginatedFlexClusters20241113)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlexClusters indicates an expected call of ListFlexClusters.
func (mr *MockClusterListerMockRecorder) ListFlexClusters(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlexClusters", reflect.TypeOf((*MockClusterLister)(nil).ListFlexClusters), arg0)
}

// ProjectClusters mocks base method.
func (m *MockClusterLister) ProjectClusters(arg0 string, arg1 *store.ListOptions) (*admin.PaginatedAdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectClusters", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedAdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectClusters indicates an expected call of ProjectClusters.
func (mr *MockClusterListerMockRecorder) ProjectClusters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectClusters", reflect.TypeOf((*MockClusterLister)(nil).ProjectClusters), arg0, arg1)
}

// MockClusterDescriber is a mock of ClusterDescriber interface.
type MockClusterDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockClusterDescriberMockRecorder
	isgomock struct{}
}

// MockClusterDescriberMockRecorder is the mock recorder for MockClusterDescriber.
type MockClusterDescriberMockRecorder struct {
	mock *MockClusterDescriber
}

// NewMockClusterDescriber creates a new mock instance.
func NewMockClusterDescriber(ctrl *gomock.Controller) *MockClusterDescriber {
	mock := &MockClusterDescriber{ctrl: ctrl}
	mock.recorder = &MockClusterDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterDescriber) EXPECT() *MockClusterDescriberMockRecorder {
	return m.recorder
}

// AtlasCluster mocks base method.
func (m *MockClusterDescriber) AtlasCluster(arg0, arg1 string) (*admin.AdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtlasCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin.AdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtlasCluster indicates an expected call of AtlasCluster.
func (mr *MockClusterDescriberMockRecorder) AtlasCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtlasCluster", reflect.TypeOf((*MockClusterDescriber)(nil).AtlasCluster), arg0, arg1)
}

// FlexCluster mocks base method.
func (m *MockClusterDescriber) FlexCluster(arg0, arg1 string) (*admin0.FlexClusterDescription20241113, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin0.FlexClusterDescription20241113)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexCluster indicates an expected call of FlexCluster.
func (mr *MockClusterDescriberMockRecorder) FlexCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexCluster", reflect.TypeOf((*MockClusterDescriber)(nil).FlexCluster), arg0, arg1)
}

// MockClusterCreator is a mock of ClusterCreator interface.
type MockClusterCreator struct {
	ctrl     *gomock.Controller
	recorder *MockClusterCreatorMockRecorder
	isgomock struct{}
}

// MockClusterCreatorMockRecorder is the mock recorder for MockClusterCreator.
type MockClusterCreatorMockRecorder struct {
	mock *MockClusterCreator
}

// NewMockClusterCreator creates a new mock instance.
func NewMockClusterCreator(ctrl *gomock.Controller) *MockClusterCreator {
	mock := &MockClusterCreator{ctrl: ctrl}
	mock.recorder = &MockClusterCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterCreator) EXPECT() *MockClusterCreatorMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockClusterCreator) CreateCluster(v15 *admin.AdvancedClusterDescription) (*admin.AdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", v15)
	ret0, _ := ret[0].(*admin.AdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClusterCreatorMockRecorder) CreateCluster(v15 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClusterCreator)(nil).CreateCluster), v15)
}

// CreateFlexCluster mocks base method.
func (m *MockClusterCreator) CreateFlexCluster(arg0 string, arg1 *admin0.FlexClusterDescriptionCreate20241113) (*admin0.FlexClusterDescription20241113, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlexCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin0.FlexClusterDescription20241113)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFlexCluster indicates an expected call of CreateFlexCluster.
func (mr *MockClusterCreatorMockRecorder) CreateFlexCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlexCluster", reflect.TypeOf((*MockClusterCreator)(nil).CreateFlexCluster), arg0, arg1)
}

// MockClusterDeleter is a mock of ClusterDeleter interface.
type MockClusterDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockClusterDeleterMockRecorder
	isgomock struct{}
}

// MockClusterDeleterMockRecorder is the mock recorder for MockClusterDeleter.
type MockClusterDeleterMockRecorder struct {
	mock *MockClusterDeleter
}

// NewMockClusterDeleter creates a new mock instance.
func NewMockClusterDeleter(ctrl *gomock.Controller) *MockClusterDeleter {
	mock := &MockClusterDeleter{ctrl: ctrl}
	mock.recorder = &MockClusterDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterDeleter) EXPECT() *MockClusterDeleterMockRecorder {
	return m.recorder
}

// DeleteCluster mocks base method.
func (m *MockClusterDeleter) DeleteCluster(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClusterDeleterMockRecorder) DeleteCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterDeleter)(nil).DeleteCluster), arg0, arg1)
}

// DeleteFlexCluster mocks base method.
func (m *MockClusterDeleter) DeleteFlexCluster(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlexCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFlexCluster indicates an expected call of DeleteFlexCluster.
func (mr *MockClusterDeleterMockRecorder) DeleteFlexCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlexCluster", reflect.TypeOf((*MockClusterDeleter)(nil).DeleteFlexCluster), arg0, arg1)
}

// MockClusterPauser is a mock of ClusterPauser interface.
type MockClusterPauser struct {
	ctrl     *gomock.Controller
	recorder *MockClusterPauserMockRecorder
	isgomock struct{}
}

// MockClusterPauserMockRecorder is the mock recorder for MockClusterPauser.
type MockClusterPauserMockRecorder struct {
	mock *MockClusterPauser
}

// NewMockClusterPauser creates a new mock instance.
func NewMockClusterPauser(ctrl *gomock.Controller) *MockClusterPauser {
	mock := &MockClusterPauser{ctrl: ctrl}
	mock.recorder = &MockClusterPauserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterPauser) EXPECT() *MockClusterPauserMockRecorder {
	return m.recorder
}

// PauseCluster mocks base method.
func (m *MockClusterPauser) PauseCluster(arg0, arg1 string) (*admin.AdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin.AdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseCluster indicates an expected call of PauseCluster.
func (mr *MockClusterPauserMockRecorder) PauseCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseCluster", reflect.TypeOf((*MockClusterPauser)(nil).PauseCluster), arg0, arg1)
}

// MockClusterStarter is a mock of ClusterStarter interface.
type MockClusterStarter struct {
	ctrl     *gomock.Controller
	recorder *MockClusterStarterMockRecorder
	isgomock struct{}
}

// MockClusterStarterMockRecorder is the mock recorder for MockClusterStarter.
type MockClusterStarterMockRecorder struct {
	mock *MockClusterStarter
}

// NewMockClusterStarter creates a new mock instance.
func NewMockClusterStarter(ctrl *gomock.Controller) *MockClusterStarter {
	mock := &MockClusterStarter{ctrl: ctrl}
	mock.recorder = &MockClusterStarterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterStarter) EXPECT() *MockClusterStarterMockRecorder {
	return m.recorder
}

// StartCluster mocks base method.
func (m *MockClusterStarter) StartCluster(arg0, arg1 string) (*admin.AdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin.AdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCluster indicates an expected call of StartCluster.
func (mr *MockClusterStarterMockRecorder) StartCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCluster", reflect.TypeOf((*MockClusterStarter)(nil).StartCluster), arg0, arg1)
}

// MockClusterDescriberStarter is a mock of ClusterDescriberStarter interface.
type MockClusterDescriberStarter struct {
	ctrl     *gomock.Controller
	recorder *MockClusterDescriberStarterMockRecorder
	isgomock struct{}
}

// MockClusterDescriberStarterMockRecorder is the mock recorder for MockClusterDescriberStarter.
type MockClusterDescriberStarterMockRecorder struct {
	mock *MockClusterDescriberStarter
}

// NewMockClusterDescriberStarter creates a new mock instance.
func NewMockClusterDescriberStarter(ctrl *gomock.Controller) *MockClusterDescriberStarter {
	mock := &MockClusterDescriberStarter{ctrl: ctrl}
	mock.recorder = &MockClusterDescriberStarterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterDescriberStarter) EXPECT() *MockClusterDescriberStarterMockRecorder {
	return m.recorder
}

// AtlasCluster mocks base method.
func (m *MockClusterDescriberStarter) AtlasCluster(arg0, arg1 string) (*admin.AdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtlasCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin.AdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtlasCluster indicates an expected call of AtlasCluster.
func (mr *MockClusterDescriberStarterMockRecorder) AtlasCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtlasCluster", reflect.TypeOf((*MockClusterDescriberStarter)(nil).AtlasCluster), arg0, arg1)
}

// FlexCluster mocks base method.
func (m *MockClusterDescriberStarter) FlexCluster(arg0, arg1 string) (*admin0.FlexClusterDescription20241113, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlexCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin0.FlexClusterDescription20241113)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlexCluster indicates an expected call of FlexCluster.
func (mr *MockClusterDescriberStarterMockRecorder) FlexCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlexCluster", reflect.TypeOf((*MockClusterDescriberStarter)(nil).FlexCluster), arg0, arg1)
}

// StartCluster mocks base method.
func (m *MockClusterDescriberStarter) StartCluster(arg0, arg1 string) (*admin.AdvancedClusterDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCluster", arg0, arg1)
	ret0, _ := ret[0].(*admin.AdvancedClusterDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCluster indicates an expected call of StartCluster.
func (mr *MockClusterDescriberStarterMockRecorder) StartCluster(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCluster", reflect.TypeOf((*MockClusterDescriberStarter)(nil).StartCluster), arg0, arg1)
}
