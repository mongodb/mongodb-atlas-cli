// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store (interfaces: ConnectedOrgConfigsUpdater,ConnectedOrgConfigsDescriber,ConnectedOrgConfigsDeleter,ConnectedOrgConfigsLister)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_connected_orgs_store.go -package=mocks github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store ConnectedOrgConfigsUpdater,ConnectedOrgConfigsDescriber,ConnectedOrgConfigsDeleter,ConnectedOrgConfigsLister
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockConnectedOrgConfigsUpdater is a mock of ConnectedOrgConfigsUpdater interface.
type MockConnectedOrgConfigsUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockConnectedOrgConfigsUpdaterMockRecorder
	isgomock struct{}
}

// MockConnectedOrgConfigsUpdaterMockRecorder is the mock recorder for MockConnectedOrgConfigsUpdater.
type MockConnectedOrgConfigsUpdaterMockRecorder struct {
	mock *MockConnectedOrgConfigsUpdater
}

// NewMockConnectedOrgConfigsUpdater creates a new mock instance.
func NewMockConnectedOrgConfigsUpdater(ctrl *gomock.Controller) *MockConnectedOrgConfigsUpdater {
	mock := &MockConnectedOrgConfigsUpdater{ctrl: ctrl}
	mock.recorder = &MockConnectedOrgConfigsUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectedOrgConfigsUpdater) EXPECT() *MockConnectedOrgConfigsUpdaterMockRecorder {
	return m.recorder
}

// UpdateConnectedOrgConfig mocks base method.
func (m *MockConnectedOrgConfigsUpdater) UpdateConnectedOrgConfig(opts *admin.UpdateConnectedOrgConfigApiParams) (*admin.ConnectedOrgConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectedOrgConfig", opts)
	ret0, _ := ret[0].(*admin.ConnectedOrgConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectedOrgConfig indicates an expected call of UpdateConnectedOrgConfig.
func (mr *MockConnectedOrgConfigsUpdaterMockRecorder) UpdateConnectedOrgConfig(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectedOrgConfig", reflect.TypeOf((*MockConnectedOrgConfigsUpdater)(nil).UpdateConnectedOrgConfig), opts)
}

// MockConnectedOrgConfigsDescriber is a mock of ConnectedOrgConfigsDescriber interface.
type MockConnectedOrgConfigsDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockConnectedOrgConfigsDescriberMockRecorder
	isgomock struct{}
}

// MockConnectedOrgConfigsDescriberMockRecorder is the mock recorder for MockConnectedOrgConfigsDescriber.
type MockConnectedOrgConfigsDescriberMockRecorder struct {
	mock *MockConnectedOrgConfigsDescriber
}

// NewMockConnectedOrgConfigsDescriber creates a new mock instance.
func NewMockConnectedOrgConfigsDescriber(ctrl *gomock.Controller) *MockConnectedOrgConfigsDescriber {
	mock := &MockConnectedOrgConfigsDescriber{ctrl: ctrl}
	mock.recorder = &MockConnectedOrgConfigsDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectedOrgConfigsDescriber) EXPECT() *MockConnectedOrgConfigsDescriberMockRecorder {
	return m.recorder
}

// GetConnectedOrgConfig mocks base method.
func (m *MockConnectedOrgConfigsDescriber) GetConnectedOrgConfig(opts *admin.GetConnectedOrgConfigApiParams) (*admin.ConnectedOrgConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedOrgConfig", opts)
	ret0, _ := ret[0].(*admin.ConnectedOrgConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectedOrgConfig indicates an expected call of GetConnectedOrgConfig.
func (mr *MockConnectedOrgConfigsDescriberMockRecorder) GetConnectedOrgConfig(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedOrgConfig", reflect.TypeOf((*MockConnectedOrgConfigsDescriber)(nil).GetConnectedOrgConfig), opts)
}

// MockConnectedOrgConfigsDeleter is a mock of ConnectedOrgConfigsDeleter interface.
type MockConnectedOrgConfigsDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockConnectedOrgConfigsDeleterMockRecorder
	isgomock struct{}
}

// MockConnectedOrgConfigsDeleterMockRecorder is the mock recorder for MockConnectedOrgConfigsDeleter.
type MockConnectedOrgConfigsDeleterMockRecorder struct {
	mock *MockConnectedOrgConfigsDeleter
}

// NewMockConnectedOrgConfigsDeleter creates a new mock instance.
func NewMockConnectedOrgConfigsDeleter(ctrl *gomock.Controller) *MockConnectedOrgConfigsDeleter {
	mock := &MockConnectedOrgConfigsDeleter{ctrl: ctrl}
	mock.recorder = &MockConnectedOrgConfigsDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectedOrgConfigsDeleter) EXPECT() *MockConnectedOrgConfigsDeleterMockRecorder {
	return m.recorder
}

// DeleteConnectedOrgConfig mocks base method.
func (m *MockConnectedOrgConfigsDeleter) DeleteConnectedOrgConfig(federationSettingsID, orgID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectedOrgConfig", federationSettingsID, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConnectedOrgConfig indicates an expected call of DeleteConnectedOrgConfig.
func (mr *MockConnectedOrgConfigsDeleterMockRecorder) DeleteConnectedOrgConfig(federationSettingsID, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectedOrgConfig", reflect.TypeOf((*MockConnectedOrgConfigsDeleter)(nil).DeleteConnectedOrgConfig), federationSettingsID, orgID)
}

// MockConnectedOrgConfigsLister is a mock of ConnectedOrgConfigsLister interface.
type MockConnectedOrgConfigsLister struct {
	ctrl     *gomock.Controller
	recorder *MockConnectedOrgConfigsListerMockRecorder
	isgomock struct{}
}

// MockConnectedOrgConfigsListerMockRecorder is the mock recorder for MockConnectedOrgConfigsLister.
type MockConnectedOrgConfigsListerMockRecorder struct {
	mock *MockConnectedOrgConfigsLister
}

// NewMockConnectedOrgConfigsLister creates a new mock instance.
func NewMockConnectedOrgConfigsLister(ctrl *gomock.Controller) *MockConnectedOrgConfigsLister {
	mock := &MockConnectedOrgConfigsLister{ctrl: ctrl}
	mock.recorder = &MockConnectedOrgConfigsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectedOrgConfigsLister) EXPECT() *MockConnectedOrgConfigsListerMockRecorder {
	return m.recorder
}

// ListConnectedOrgConfigs mocks base method.
func (m *MockConnectedOrgConfigsLister) ListConnectedOrgConfigs(opts *admin.ListConnectedOrgConfigsApiParams) (*admin.PaginatedConnectedOrgConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectedOrgConfigs", opts)
	ret0, _ := ret[0].(*admin.PaginatedConnectedOrgConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectedOrgConfigs indicates an expected call of ListConnectedOrgConfigs.
func (mr *MockConnectedOrgConfigsListerMockRecorder) ListConnectedOrgConfigs(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectedOrgConfigs", reflect.TypeOf((*MockConnectedOrgConfigsLister)(nil).ListConnectedOrgConfigs), opts)
}
