// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/continuous_snapshots.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "github.com/mongodb/go-client-mongodb-atlas/mongodbatlas"
	reflect "reflect"
)

// MockSnapshotsLister is a mock of SnapshotsLister interface
type MockSnapshotsLister struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotsListerMockRecorder
}

// MockSnapshotsListerMockRecorder is the mock recorder for MockSnapshotsLister
type MockSnapshotsListerMockRecorder struct {
	mock *MockSnapshotsLister
}

// NewMockSnapshotsLister creates a new mock instance
func NewMockSnapshotsLister(ctrl *gomock.Controller) *MockSnapshotsLister {
	mock := &MockSnapshotsLister{ctrl: ctrl}
	mock.recorder = &MockSnapshotsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshotsLister) EXPECT() *MockSnapshotsListerMockRecorder {
	return m.recorder
}

// ContinuousSnapshots mocks base method
func (m *MockSnapshotsLister) ContinuousSnapshots(arg0, arg1 string, arg2 *mongodbatlas.ListOptions) (*mongodbatlas.ContinuousSnapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContinuousSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongodbatlas.ContinuousSnapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContinuousSnapshots indicates an expected call of ContinuousSnapshots
func (mr *MockSnapshotsListerMockRecorder) ContinuousSnapshots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContinuousSnapshots", reflect.TypeOf((*MockSnapshotsLister)(nil).ContinuousSnapshots), arg0, arg1, arg2)
}

// MockSnapshotDescriber is a mock of SnapshotDescriber interface
type MockSnapshotDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotDescriberMockRecorder
}

// MockSnapshotDescriberMockRecorder is the mock recorder for MockSnapshotDescriber
type MockSnapshotDescriberMockRecorder struct {
	mock *MockSnapshotDescriber
}

// NewMockSnapshotDescriber creates a new mock instance
func NewMockSnapshotDescriber(ctrl *gomock.Controller) *MockSnapshotDescriber {
	mock := &MockSnapshotDescriber{ctrl: ctrl}
	mock.recorder = &MockSnapshotDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshotDescriber) EXPECT() *MockSnapshotDescriberMockRecorder {
	return m.recorder
}

// ContinuousSnapshot mocks base method
func (m *MockSnapshotDescriber) ContinuousSnapshot(arg0, arg1, arg2 string) (*mongodbatlas.ContinuousSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContinuousSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongodbatlas.ContinuousSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContinuousSnapshot indicates an expected call of ContinuousSnapshot
func (mr *MockSnapshotDescriberMockRecorder) ContinuousSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContinuousSnapshot", reflect.TypeOf((*MockSnapshotDescriber)(nil).ContinuousSnapshot), arg0, arg1, arg2)
}

// MockSnapshotsStore is a mock of SnapshotsStore interface
type MockSnapshotsStore struct {
	ctrl     *gomock.Controller
	recorder *MockSnapshotsStoreMockRecorder
}

// MockSnapshotsStoreMockRecorder is the mock recorder for MockSnapshotsStore
type MockSnapshotsStoreMockRecorder struct {
	mock *MockSnapshotsStore
}

// NewMockSnapshotsStore creates a new mock instance
func NewMockSnapshotsStore(ctrl *gomock.Controller) *MockSnapshotsStore {
	mock := &MockSnapshotsStore{ctrl: ctrl}
	mock.recorder = &MockSnapshotsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSnapshotsStore) EXPECT() *MockSnapshotsStoreMockRecorder {
	return m.recorder
}

// ContinuousSnapshots mocks base method
func (m *MockSnapshotsStore) ContinuousSnapshots(arg0, arg1 string, arg2 *mongodbatlas.ListOptions) (*mongodbatlas.ContinuousSnapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContinuousSnapshots", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongodbatlas.ContinuousSnapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContinuousSnapshots indicates an expected call of ContinuousSnapshots
func (mr *MockSnapshotsStoreMockRecorder) ContinuousSnapshots(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContinuousSnapshots", reflect.TypeOf((*MockSnapshotsStore)(nil).ContinuousSnapshots), arg0, arg1, arg2)
}

// ContinuousSnapshot mocks base method
func (m *MockSnapshotsStore) ContinuousSnapshot(arg0, arg1, arg2 string) (*mongodbatlas.ContinuousSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContinuousSnapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongodbatlas.ContinuousSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContinuousSnapshot indicates an expected call of ContinuousSnapshot
func (mr *MockSnapshotsStoreMockRecorder) ContinuousSnapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContinuousSnapshot", reflect.TypeOf((*MockSnapshotsStore)(nil).ContinuousSnapshot), arg0, arg1, arg2)
}
