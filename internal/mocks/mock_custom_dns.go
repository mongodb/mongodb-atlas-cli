// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: CustomDNSUpdater)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	reflect "reflect"
)

// MockCustomDNSUpdater is a mock of CustomDNSUpdater interface
type MockCustomDNSUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockCustomDNSUpdaterMockRecorder
}

// MockCustomDNSUpdaterMockRecorder is the mock recorder for MockCustomDNSUpdater
type MockCustomDNSUpdaterMockRecorder struct {
	mock *MockCustomDNSUpdater
}

// NewMockCustomDNSUpdater creates a new mock instance
func NewMockCustomDNSUpdater(ctrl *gomock.Controller) *MockCustomDNSUpdater {
	mock := &MockCustomDNSUpdater{ctrl: ctrl}
	mock.recorder = &MockCustomDNSUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomDNSUpdater) EXPECT() *MockCustomDNSUpdaterMockRecorder {
	return m.recorder
}

// UpdateCustomDNS mocks base method
func (m *MockCustomDNSUpdater) UpdateCustomDNS(arg0 string, arg1 *mongodbatlas.AWSCustomDNSSetting) (*mongodbatlas.AWSCustomDNSSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomDNS", arg0, arg1)
	ret0, _ := ret[0].(*mongodbatlas.AWSCustomDNSSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomDNS indicates an expected call of UpdateCustomDNS
func (mr *MockCustomDNSUpdaterMockRecorder) UpdateCustomDNS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomDNS", reflect.TypeOf((*MockCustomDNSUpdater)(nil).UpdateCustomDNS), arg0, arg1)
}
