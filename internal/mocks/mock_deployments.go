// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: HostLister,HostDescriber,HostDatabaseLister,HostDisksLister,HostByHostnameDescriber)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	opsmngr "go.mongodb.org/ops-manager/opsmngr"
	reflect "reflect"
)

// MockHostLister is a mock of HostLister interface
type MockHostLister struct {
	ctrl     *gomock.Controller
	recorder *MockHostListerMockRecorder
}

// MockHostListerMockRecorder is the mock recorder for MockHostLister
type MockHostListerMockRecorder struct {
	mock *MockHostLister
}

// NewMockHostLister creates a new mock instance
func NewMockHostLister(ctrl *gomock.Controller) *MockHostLister {
	mock := &MockHostLister{ctrl: ctrl}
	mock.recorder = &MockHostListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostLister) EXPECT() *MockHostListerMockRecorder {
	return m.recorder
}

// Hosts mocks base method
func (m *MockHostLister) Hosts(arg0 string, arg1 *opsmngr.HostListOptions) (*opsmngr.Hosts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hosts", arg0, arg1)
	ret0, _ := ret[0].(*opsmngr.Hosts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hosts indicates an expected call of Hosts
func (mr *MockHostListerMockRecorder) Hosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hosts", reflect.TypeOf((*MockHostLister)(nil).Hosts), arg0, arg1)
}

// MockHostDescriber is a mock of HostDescriber interface
type MockHostDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockHostDescriberMockRecorder
}

// MockHostDescriberMockRecorder is the mock recorder for MockHostDescriber
type MockHostDescriberMockRecorder struct {
	mock *MockHostDescriber
}

// NewMockHostDescriber creates a new mock instance
func NewMockHostDescriber(ctrl *gomock.Controller) *MockHostDescriber {
	mock := &MockHostDescriber{ctrl: ctrl}
	mock.recorder = &MockHostDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostDescriber) EXPECT() *MockHostDescriberMockRecorder {
	return m.recorder
}

// Host mocks base method
func (m *MockHostDescriber) Host(arg0, arg1 string) (*opsmngr.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host", arg0, arg1)
	ret0, _ := ret[0].(*opsmngr.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Host indicates an expected call of Host
func (mr *MockHostDescriberMockRecorder) Host(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockHostDescriber)(nil).Host), arg0, arg1)
}

// MockHostDatabaseLister is a mock of HostDatabaseLister interface
type MockHostDatabaseLister struct {
	ctrl     *gomock.Controller
	recorder *MockHostDatabaseListerMockRecorder
}

// MockHostDatabaseListerMockRecorder is the mock recorder for MockHostDatabaseLister
type MockHostDatabaseListerMockRecorder struct {
	mock *MockHostDatabaseLister
}

// NewMockHostDatabaseLister creates a new mock instance
func NewMockHostDatabaseLister(ctrl *gomock.Controller) *MockHostDatabaseLister {
	mock := &MockHostDatabaseLister{ctrl: ctrl}
	mock.recorder = &MockHostDatabaseListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostDatabaseLister) EXPECT() *MockHostDatabaseListerMockRecorder {
	return m.recorder
}

// HostDatabases mocks base method
func (m *MockHostDatabaseLister) HostDatabases(arg0, arg1 string, arg2 *mongodbatlas.ListOptions) (*mongodbatlas.ProcessDatabasesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostDatabases", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongodbatlas.ProcessDatabasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostDatabases indicates an expected call of HostDatabases
func (mr *MockHostDatabaseListerMockRecorder) HostDatabases(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostDatabases", reflect.TypeOf((*MockHostDatabaseLister)(nil).HostDatabases), arg0, arg1, arg2)
}

// MockHostDisksLister is a mock of HostDisksLister interface
type MockHostDisksLister struct {
	ctrl     *gomock.Controller
	recorder *MockHostDisksListerMockRecorder
}

// MockHostDisksListerMockRecorder is the mock recorder for MockHostDisksLister
type MockHostDisksListerMockRecorder struct {
	mock *MockHostDisksLister
}

// NewMockHostDisksLister creates a new mock instance
func NewMockHostDisksLister(ctrl *gomock.Controller) *MockHostDisksLister {
	mock := &MockHostDisksLister{ctrl: ctrl}
	mock.recorder = &MockHostDisksListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostDisksLister) EXPECT() *MockHostDisksListerMockRecorder {
	return m.recorder
}

// HostDisks mocks base method
func (m *MockHostDisksLister) HostDisks(arg0, arg1 string, arg2 *mongodbatlas.ListOptions) (*mongodbatlas.ProcessDisksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostDisks", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongodbatlas.ProcessDisksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostDisks indicates an expected call of HostDisks
func (mr *MockHostDisksListerMockRecorder) HostDisks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostDisks", reflect.TypeOf((*MockHostDisksLister)(nil).HostDisks), arg0, arg1, arg2)
}

// MockHostByHostnameDescriber is a mock of HostByHostnameDescriber interface
type MockHostByHostnameDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockHostByHostnameDescriberMockRecorder
}

// MockHostByHostnameDescriberMockRecorder is the mock recorder for MockHostByHostnameDescriber
type MockHostByHostnameDescriberMockRecorder struct {
	mock *MockHostByHostnameDescriber
}

// NewMockHostByHostnameDescriber creates a new mock instance
func NewMockHostByHostnameDescriber(ctrl *gomock.Controller) *MockHostByHostnameDescriber {
	mock := &MockHostByHostnameDescriber{ctrl: ctrl}
	mock.recorder = &MockHostByHostnameDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostByHostnameDescriber) EXPECT() *MockHostByHostnameDescriberMockRecorder {
	return m.recorder
}

// HostByHostname mocks base method
func (m *MockHostByHostnameDescriber) HostByHostname(arg0, arg1 string, arg2 int) (*opsmngr.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostByHostname", arg0, arg1, arg2)
	ret0, _ := ret[0].(*opsmngr.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostByHostname indicates an expected call of HostByHostname
func (mr *MockHostByHostnameDescriberMockRecorder) HostByHostname(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostByHostname", reflect.TypeOf((*MockHostByHostnameDescriber)(nil).HostByHostname), arg0, arg1, arg2)
}
