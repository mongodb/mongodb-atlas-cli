// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/events.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "github.com/mongodb/go-client-mongodb-atlas/mongodbatlas"
	reflect "reflect"
)

// MockOrganizationEventLister is a mock of OrganizationEventLister interface
type MockOrganizationEventLister struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationEventListerMockRecorder
}

// MockOrganizationEventListerMockRecorder is the mock recorder for MockOrganizationEventLister
type MockOrganizationEventListerMockRecorder struct {
	mock *MockOrganizationEventLister
}

// NewMockOrganizationEventLister creates a new mock instance
func NewMockOrganizationEventLister(ctrl *gomock.Controller) *MockOrganizationEventLister {
	mock := &MockOrganizationEventLister{ctrl: ctrl}
	mock.recorder = &MockOrganizationEventListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrganizationEventLister) EXPECT() *MockOrganizationEventListerMockRecorder {
	return m.recorder
}

// OrganizationEvents mocks base method
func (m *MockOrganizationEventLister) OrganizationEvents(arg0 string, arg1 *mongodbatlas.EventListOptions) (*mongodbatlas.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationEvents", arg0, arg1)
	ret0, _ := ret[0].(*mongodbatlas.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationEvents indicates an expected call of OrganizationEvents
func (mr *MockOrganizationEventListerMockRecorder) OrganizationEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationEvents", reflect.TypeOf((*MockOrganizationEventLister)(nil).OrganizationEvents), arg0, arg1)
}

// MockProjectEventLister is a mock of ProjectEventLister interface
type MockProjectEventLister struct {
	ctrl     *gomock.Controller
	recorder *MockProjectEventListerMockRecorder
}

// MockProjectEventListerMockRecorder is the mock recorder for MockProjectEventLister
type MockProjectEventListerMockRecorder struct {
	mock *MockProjectEventLister
}

// NewMockProjectEventLister creates a new mock instance
func NewMockProjectEventLister(ctrl *gomock.Controller) *MockProjectEventLister {
	mock := &MockProjectEventLister{ctrl: ctrl}
	mock.recorder = &MockProjectEventListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectEventLister) EXPECT() *MockProjectEventListerMockRecorder {
	return m.recorder
}

// ProjectEvents mocks base method
func (m *MockProjectEventLister) ProjectEvents(arg0 string, arg1 *mongodbatlas.ListOptions) (*mongodbatlas.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectEvents", arg0, arg1)
	ret0, _ := ret[0].(*mongodbatlas.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectEvents indicates an expected call of ProjectEvents
func (mr *MockProjectEventListerMockRecorder) ProjectEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectEvents", reflect.TypeOf((*MockProjectEventLister)(nil).ProjectEvents), arg0, arg1)
}

// MockEventsStore is a mock of EventsStore interface
type MockEventsStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventsStoreMockRecorder
}

// MockEventsStoreMockRecorder is the mock recorder for MockEventsStore
type MockEventsStoreMockRecorder struct {
	mock *MockEventsStore
}

// NewMockEventsStore creates a new mock instance
func NewMockEventsStore(ctrl *gomock.Controller) *MockEventsStore {
	mock := &MockEventsStore{ctrl: ctrl}
	mock.recorder = &MockEventsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventsStore) EXPECT() *MockEventsStoreMockRecorder {
	return m.recorder
}

// OrganizationEvents mocks base method
func (m *MockEventsStore) OrganizationEvents(arg0 string, arg1 *mongodbatlas.EventListOptions) (*mongodbatlas.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationEvents", arg0, arg1)
	ret0, _ := ret[0].(*mongodbatlas.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationEvents indicates an expected call of OrganizationEvents
func (mr *MockEventsStoreMockRecorder) OrganizationEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationEvents", reflect.TypeOf((*MockEventsStore)(nil).OrganizationEvents), arg0, arg1)
}

// ProjectEvents mocks base method
func (m *MockEventsStore) ProjectEvents(arg0 string, arg1 *mongodbatlas.ListOptions) (*mongodbatlas.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectEvents", arg0, arg1)
	ret0, _ := ret[0].(*mongodbatlas.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectEvents indicates an expected call of ProjectEvents
func (mr *MockEventsStoreMockRecorder) ProjectEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectEvents", reflect.TypeOf((*MockEventsStore)(nil).ProjectEvents), arg0, arg1)
}
