// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: FeatureControlPoliciesLister,FeatureControlPoliciesUpdater)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	opsmngr "go.mongodb.org/ops-manager/opsmngr"
)

// MockFeatureControlPoliciesLister is a mock of FeatureControlPoliciesLister interface.
type MockFeatureControlPoliciesLister struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureControlPoliciesListerMockRecorder
}

// MockFeatureControlPoliciesListerMockRecorder is the mock recorder for MockFeatureControlPoliciesLister.
type MockFeatureControlPoliciesListerMockRecorder struct {
	mock *MockFeatureControlPoliciesLister
}

// NewMockFeatureControlPoliciesLister creates a new mock instance.
func NewMockFeatureControlPoliciesLister(ctrl *gomock.Controller) *MockFeatureControlPoliciesLister {
	mock := &MockFeatureControlPoliciesLister{ctrl: ctrl}
	mock.recorder = &MockFeatureControlPoliciesListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureControlPoliciesLister) EXPECT() *MockFeatureControlPoliciesListerMockRecorder {
	return m.recorder
}

// FeatureControlPolicies mocks base method.
func (m *MockFeatureControlPoliciesLister) FeatureControlPolicies(arg0 string, arg1 *mongodbatlas.ListOptions) (*opsmngr.FeaturePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureControlPolicies", arg0, arg1)
	ret0, _ := ret[0].(*opsmngr.FeaturePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeatureControlPolicies indicates an expected call of FeatureControlPolicies.
func (mr *MockFeatureControlPoliciesListerMockRecorder) FeatureControlPolicies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureControlPolicies", reflect.TypeOf((*MockFeatureControlPoliciesLister)(nil).FeatureControlPolicies), arg0, arg1)
}

// MockFeatureControlPoliciesUpdater is a mock of FeatureControlPoliciesUpdater interface.
type MockFeatureControlPoliciesUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureControlPoliciesUpdaterMockRecorder
}

// MockFeatureControlPoliciesUpdaterMockRecorder is the mock recorder for MockFeatureControlPoliciesUpdater.
type MockFeatureControlPoliciesUpdaterMockRecorder struct {
	mock *MockFeatureControlPoliciesUpdater
}

// NewMockFeatureControlPoliciesUpdater creates a new mock instance.
func NewMockFeatureControlPoliciesUpdater(ctrl *gomock.Controller) *MockFeatureControlPoliciesUpdater {
	mock := &MockFeatureControlPoliciesUpdater{ctrl: ctrl}
	mock.recorder = &MockFeatureControlPoliciesUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureControlPoliciesUpdater) EXPECT() *MockFeatureControlPoliciesUpdaterMockRecorder {
	return m.recorder
}

// UpdateFeatureControlPolicy mocks base method.
func (m *MockFeatureControlPoliciesUpdater) UpdateFeatureControlPolicy(arg0 string, arg1 *opsmngr.FeaturePolicy) (*opsmngr.FeaturePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeatureControlPolicy", arg0, arg1)
	ret0, _ := ret[0].(*opsmngr.FeaturePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeatureControlPolicy indicates an expected call of UpdateFeatureControlPolicy.
func (mr *MockFeatureControlPoliciesUpdaterMockRecorder) UpdateFeatureControlPolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeatureControlPolicy", reflect.TypeOf((*MockFeatureControlPoliciesUpdater)(nil).UpdateFeatureControlPolicy), arg0, arg1)
}
