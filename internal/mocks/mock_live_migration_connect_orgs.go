// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: OrganizationsConnector)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	opsmngr "go.mongodb.org/ops-manager/opsmngr"
)

// MockOrganizationsConnector is a mock of OrganizationsConnector interface.
type MockOrganizationsConnector struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsConnectorMockRecorder
}

// MockOrganizationsConnectorMockRecorder is the mock recorder for MockOrganizationsConnector.
type MockOrganizationsConnectorMockRecorder struct {
	mock *MockOrganizationsConnector
}

// NewMockOrganizationsConnector creates a new mock instance.
func NewMockOrganizationsConnector(ctrl *gomock.Controller) *MockOrganizationsConnector {
	mock := &MockOrganizationsConnector{ctrl: ctrl}
	mock.recorder = &MockOrganizationsConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsConnector) EXPECT() *MockOrganizationsConnectorMockRecorder {
	return m.recorder
}

// ConnectOrganizations mocks base method.
func (m *MockOrganizationsConnector) ConnectOrganizations(arg0 string, arg1 *mongodbatlas.LinkToken) (*opsmngr.ConnectionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectOrganizations", arg0, arg1)
	ret0, _ := ret[0].(*opsmngr.ConnectionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectOrganizations indicates an expected call of ConnectOrganizations.
func (mr *MockOrganizationsConnectorMockRecorder) ConnectOrganizations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectOrganizations", reflect.TypeOf((*MockOrganizationsConnector)(nil).ConnectOrganizations), arg0, arg1)
}
