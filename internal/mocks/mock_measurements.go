// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: HostMeasurementLister,HostDiskMeasurementsLister)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	reflect "reflect"
)

// MockHostMeasurementLister is a mock of HostMeasurementLister interface
type MockHostMeasurementLister struct {
	ctrl     *gomock.Controller
	recorder *MockHostMeasurementListerMockRecorder
}

// MockHostMeasurementListerMockRecorder is the mock recorder for MockHostMeasurementLister
type MockHostMeasurementListerMockRecorder struct {
	mock *MockHostMeasurementLister
}

// NewMockHostMeasurementLister creates a new mock instance
func NewMockHostMeasurementLister(ctrl *gomock.Controller) *MockHostMeasurementLister {
	mock := &MockHostMeasurementLister{ctrl: ctrl}
	mock.recorder = &MockHostMeasurementListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostMeasurementLister) EXPECT() *MockHostMeasurementListerMockRecorder {
	return m.recorder
}

// HostMeasurements mocks base method
func (m *MockHostMeasurementLister) HostMeasurements(arg0, arg1 string, arg2 *mongodbatlas.ProcessMeasurementListOptions) (*mongodbatlas.ProcessMeasurements, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostMeasurements", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongodbatlas.ProcessMeasurements)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostMeasurements indicates an expected call of HostMeasurements
func (mr *MockHostMeasurementListerMockRecorder) HostMeasurements(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostMeasurements", reflect.TypeOf((*MockHostMeasurementLister)(nil).HostMeasurements), arg0, arg1, arg2)
}

// MockHostDiskMeasurementsLister is a mock of HostDiskMeasurementsLister interface
type MockHostDiskMeasurementsLister struct {
	ctrl     *gomock.Controller
	recorder *MockHostDiskMeasurementsListerMockRecorder
}

// MockHostDiskMeasurementsListerMockRecorder is the mock recorder for MockHostDiskMeasurementsLister
type MockHostDiskMeasurementsListerMockRecorder struct {
	mock *MockHostDiskMeasurementsLister
}

// NewMockHostDiskMeasurementsLister creates a new mock instance
func NewMockHostDiskMeasurementsLister(ctrl *gomock.Controller) *MockHostDiskMeasurementsLister {
	mock := &MockHostDiskMeasurementsLister{ctrl: ctrl}
	mock.recorder = &MockHostDiskMeasurementsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostDiskMeasurementsLister) EXPECT() *MockHostDiskMeasurementsListerMockRecorder {
	return m.recorder
}

// HostDiskMeasurements mocks base method
func (m *MockHostDiskMeasurementsLister) HostDiskMeasurements(arg0, arg1, arg2 string, arg3 *mongodbatlas.ProcessMeasurementListOptions) (*mongodbatlas.ProcessDiskMeasurements, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostDiskMeasurements", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*mongodbatlas.ProcessDiskMeasurements)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostDiskMeasurements indicates an expected call of HostDiskMeasurements
func (mr *MockHostDiskMeasurementsListerMockRecorder) HostDiskMeasurements(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostDiskMeasurements", reflect.TypeOf((*MockHostDiskMeasurementsLister)(nil).HostDiskMeasurements), arg0, arg1, arg2, arg3)
}
