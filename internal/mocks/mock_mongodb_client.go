// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/internal/mongodbclient (interfaces: MongoDBClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMongoDBClient is a mock of MongoDBClient interface.
type MockMongoDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBClientMockRecorder
}

// MockMongoDBClientMockRecorder is the mock recorder for MockMongoDBClient.
type MockMongoDBClientMockRecorder struct {
	mock *MockMongoDBClient
}

// NewMockMongoDBClient creates a new mock instance.
func NewMockMongoDBClient(ctrl *gomock.Controller) *MockMongoDBClient {
	mock := &MockMongoDBClient{ctrl: ctrl}
	mock.recorder = &MockMongoDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDBClient) EXPECT() *MockMongoDBClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMongoDBClient) Connect(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockMongoDBClientMockRecorder) Connect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMongoDBClient)(nil).Connect), arg0, arg1, arg2)
}

// Disconnect mocks base method.
func (m *MockMongoDBClient) Disconnect(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect", arg0)
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMongoDBClientMockRecorder) Disconnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMongoDBClient)(nil).Disconnect), arg0)
}

// InsertOne mocks base method.
func (m *MockMongoDBClient) InsertOne(arg0 context.Context, arg1, arg2 string, arg3 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockMongoDBClientMockRecorder) InsertOne(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockMongoDBClient)(nil).InsertOne), arg0, arg1, arg2, arg3)
}

// RunCommand mocks base method.
func (m *MockMongoDBClient) RunCommand(arg0 context.Context, arg1 string, arg2 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockMongoDBClientMockRecorder) RunCommand(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockMongoDBClient)(nil).RunCommand), arg0, arg1, arg2)
}
