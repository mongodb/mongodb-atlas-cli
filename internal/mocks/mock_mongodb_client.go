// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/mongodbclient (interfaces: MongoDBClient,Database,Collection)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_mongodb_client.go -package=mocks github.com/mongodb/mongodb-atlas-cli/atlascli/internal/mongodbclient MongoDBClient,Database,Collection
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mongodbclient "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/mongodbclient"
	mongo "go.mongodb.org/mongo-driver/mongo"
	gomock "go.uber.org/mock/gomock"
)

// MockMongoDBClient is a mock of MongoDBClient interface.
type MockMongoDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDBClientMockRecorder
	isgomock struct{}
}

// MockMongoDBClientMockRecorder is the mock recorder for MockMongoDBClient.
type MockMongoDBClientMockRecorder struct {
	mock *MockMongoDBClient
}

// NewMockMongoDBClient creates a new mock instance.
func NewMockMongoDBClient(ctrl *gomock.Controller) *MockMongoDBClient {
	mock := &MockMongoDBClient{ctrl: ctrl}
	mock.recorder = &MockMongoDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDBClient) EXPECT() *MockMongoDBClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMongoDBClient) Connect(ctx context.Context, connectionString string, waitSeconds int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, connectionString, waitSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockMongoDBClientMockRecorder) Connect(ctx, connectionString, waitSeconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMongoDBClient)(nil).Connect), ctx, connectionString, waitSeconds)
}

// Database mocks base method.
func (m *MockMongoDBClient) Database(db string) mongodbclient.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database", db)
	ret0, _ := ret[0].(mongodbclient.Database)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockMongoDBClientMockRecorder) Database(db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockMongoDBClient)(nil).Database), db)
}

// Disconnect mocks base method.
func (m *MockMongoDBClient) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMongoDBClientMockRecorder) Disconnect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMongoDBClient)(nil).Disconnect), ctx)
}

// SearchIndex mocks base method.
func (m *MockMongoDBClient) SearchIndex(ctx context.Context, id string) (*mongodbclient.SearchIndexDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIndex", ctx, id)
	ret0, _ := ret[0].(*mongodbclient.SearchIndexDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIndex indicates an expected call of SearchIndex.
func (mr *MockMongoDBClientMockRecorder) SearchIndex(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIndex", reflect.TypeOf((*MockMongoDBClient)(nil).SearchIndex), ctx, id)
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockDatabase) Collection(arg0 string) mongodbclient.Collection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", arg0)
	ret0, _ := ret[0].(mongodbclient.Collection)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockDatabaseMockRecorder) Collection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDatabase)(nil).Collection), arg0)
}

// RunCommand mocks base method.
func (m *MockDatabase) RunCommand(ctx context.Context, runCommand any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", ctx, runCommand)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockDatabaseMockRecorder) RunCommand(ctx, runCommand any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockDatabase)(nil).RunCommand), ctx, runCommand)
}

// SearchIndex mocks base method.
func (m *MockDatabase) SearchIndex(ctx context.Context, id string) (*mongodbclient.SearchIndexDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIndex", ctx, id)
	ret0, _ := ret[0].(*mongodbclient.SearchIndexDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIndex indicates an expected call of SearchIndex.
func (mr *MockDatabaseMockRecorder) SearchIndex(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIndex", reflect.TypeOf((*MockDatabase)(nil).SearchIndex), ctx, id)
}

// MockCollection is a mock of Collection interface.
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionMockRecorder
	isgomock struct{}
}

// MockCollectionMockRecorder is the mock recorder for MockCollection.
type MockCollectionMockRecorder struct {
	mock *MockCollection
}

// NewMockCollection creates a new mock instance.
func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &MockCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollection) EXPECT() *MockCollectionMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockCollection) Aggregate(ctx context.Context, pipeline any) (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, pipeline)
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockCollectionMockRecorder) Aggregate(ctx, pipeline any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockCollection)(nil).Aggregate), ctx, pipeline)
}

// CreateSearchIndex mocks base method.
func (m *MockCollection) CreateSearchIndex(ctx context.Context, name, indexType string, definition any) (*mongodbclient.SearchIndexDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSearchIndex", ctx, name, indexType, definition)
	ret0, _ := ret[0].(*mongodbclient.SearchIndexDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSearchIndex indicates an expected call of CreateSearchIndex.
func (mr *MockCollectionMockRecorder) CreateSearchIndex(ctx, name, indexType, definition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSearchIndex", reflect.TypeOf((*MockCollection)(nil).CreateSearchIndex), ctx, name, indexType, definition)
}

// DropSearchIndex mocks base method.
func (m *MockCollection) DropSearchIndex(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropSearchIndex", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DropSearchIndex indicates an expected call of DropSearchIndex.
func (mr *MockCollectionMockRecorder) DropSearchIndex(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropSearchIndex", reflect.TypeOf((*MockCollection)(nil).DropSearchIndex), ctx, name)
}

// SearchIndexByName mocks base method.
func (m *MockCollection) SearchIndexByName(ctx context.Context, name string) (*mongodbclient.SearchIndexDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIndexByName", ctx, name)
	ret0, _ := ret[0].(*mongodbclient.SearchIndexDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIndexByName indicates an expected call of SearchIndexByName.
func (mr *MockCollectionMockRecorder) SearchIndexByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIndexByName", reflect.TypeOf((*MockCollection)(nil).SearchIndexByName), ctx, name)
}

// SearchIndexes mocks base method.
func (m *MockCollection) SearchIndexes(ctx context.Context) ([]*mongodbclient.SearchIndexDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIndexes", ctx)
	ret0, _ := ret[0].([]*mongodbclient.SearchIndexDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIndexes indicates an expected call of SearchIndexes.
func (mr *MockCollectionMockRecorder) SearchIndexes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIndexes", reflect.TypeOf((*MockCollection)(nil).SearchIndexes), ctx)
}
