// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: OrganizationInvitationLister,OrganizationInvitationDeleter,OrganizationInvitationDescriber)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	reflect "reflect"
)

// MockOrganizationInvitationLister is a mock of OrganizationInvitationLister interface
type MockOrganizationInvitationLister struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationInvitationListerMockRecorder
}

// MockOrganizationInvitationListerMockRecorder is the mock recorder for MockOrganizationInvitationLister
type MockOrganizationInvitationListerMockRecorder struct {
	mock *MockOrganizationInvitationLister
}

// NewMockOrganizationInvitationLister creates a new mock instance
func NewMockOrganizationInvitationLister(ctrl *gomock.Controller) *MockOrganizationInvitationLister {
	mock := &MockOrganizationInvitationLister{ctrl: ctrl}
	mock.recorder = &MockOrganizationInvitationListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrganizationInvitationLister) EXPECT() *MockOrganizationInvitationListerMockRecorder {
	return m.recorder
}

// OrganizationInvitations mocks base method
func (m *MockOrganizationInvitationLister) OrganizationInvitations(arg0 string, arg1 *mongodbatlas.InvitationOptions) ([]*mongodbatlas.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationInvitations", arg0, arg1)
	ret0, _ := ret[0].([]*mongodbatlas.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationInvitations indicates an expected call of OrganizationInvitations
func (mr *MockOrganizationInvitationListerMockRecorder) OrganizationInvitations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationInvitations", reflect.TypeOf((*MockOrganizationInvitationLister)(nil).OrganizationInvitations), arg0, arg1)
}

// MockOrganizationInvitationDeleter is a mock of OrganizationInvitationDeleter interface
type MockOrganizationInvitationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationInvitationDeleterMockRecorder
}

// MockOrganizationInvitationDeleterMockRecorder is the mock recorder for MockOrganizationInvitationDeleter
type MockOrganizationInvitationDeleterMockRecorder struct {
	mock *MockOrganizationInvitationDeleter
}

// NewMockOrganizationInvitationDeleter creates a new mock instance
func NewMockOrganizationInvitationDeleter(ctrl *gomock.Controller) *MockOrganizationInvitationDeleter {
	mock := &MockOrganizationInvitationDeleter{ctrl: ctrl}
	mock.recorder = &MockOrganizationInvitationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrganizationInvitationDeleter) EXPECT() *MockOrganizationInvitationDeleterMockRecorder {
	return m.recorder
}

// DeleteInvitation mocks base method
func (m *MockOrganizationInvitationDeleter) DeleteInvitation(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvitation indicates an expected call of DeleteInvitation
func (mr *MockOrganizationInvitationDeleterMockRecorder) DeleteInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitation", reflect.TypeOf((*MockOrganizationInvitationDeleter)(nil).DeleteInvitation), arg0, arg1)
}

// MockOrganizationInvitationDescriber is a mock of OrganizationInvitationDescriber interface
type MockOrganizationInvitationDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationInvitationDescriberMockRecorder
}

// MockOrganizationInvitationDescriberMockRecorder is the mock recorder for MockOrganizationInvitationDescriber
type MockOrganizationInvitationDescriberMockRecorder struct {
	mock *MockOrganizationInvitationDescriber
}

// NewMockOrganizationInvitationDescriber creates a new mock instance
func NewMockOrganizationInvitationDescriber(ctrl *gomock.Controller) *MockOrganizationInvitationDescriber {
	mock := &MockOrganizationInvitationDescriber{ctrl: ctrl}
	mock.recorder = &MockOrganizationInvitationDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrganizationInvitationDescriber) EXPECT() *MockOrganizationInvitationDescriberMockRecorder {
	return m.recorder
}

// OrganizationInvitation mocks base method
func (m *MockOrganizationInvitationDescriber) OrganizationInvitation(arg0, arg1 string) (*mongodbatlas.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationInvitation", arg0, arg1)
	ret0, _ := ret[0].(*mongodbatlas.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationInvitation indicates an expected call of OrganizationInvitation
func (mr *MockOrganizationInvitationDescriberMockRecorder) OrganizationInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationInvitation", reflect.TypeOf((*MockOrganizationInvitationDescriber)(nil).OrganizationInvitation), arg0, arg1)
}
