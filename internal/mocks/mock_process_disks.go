// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store (interfaces: ProcessDisksLister)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_process_disks.go -package=mocks github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store ProcessDisksLister
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	store "github.com/mongodb/mongodb-atlas-cli/atlascli/internal/store"
	admin "go.mongodb.org/atlas-sdk/v20250312002/admin"
	gomock "go.uber.org/mock/gomock"
)

// MockProcessDisksLister is a mock of ProcessDisksLister interface.
type MockProcessDisksLister struct {
	ctrl     *gomock.Controller
	recorder *MockProcessDisksListerMockRecorder
	isgomock struct{}
}

// MockProcessDisksListerMockRecorder is the mock recorder for MockProcessDisksLister.
type MockProcessDisksListerMockRecorder struct {
	mock *MockProcessDisksLister
}

// NewMockProcessDisksLister creates a new mock instance.
func NewMockProcessDisksLister(ctrl *gomock.Controller) *MockProcessDisksLister {
	mock := &MockProcessDisksLister{ctrl: ctrl}
	mock.recorder = &MockProcessDisksListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessDisksLister) EXPECT() *MockProcessDisksListerMockRecorder {
	return m.recorder
}

// ProcessDisks mocks base method.
func (m *MockProcessDisksLister) ProcessDisks(arg0, arg1 string, arg2 int, arg3 *store.ListOptions) (*admin.PaginatedDiskPartition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessDisks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*admin.PaginatedDiskPartition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessDisks indicates an expected call of ProcessDisks.
func (mr *MockProcessDisksListerMockRecorder) ProcessDisks(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessDisks", reflect.TypeOf((*MockProcessDisksLister)(nil).ProcessDisks), arg0, arg1, arg2, arg3)
}
