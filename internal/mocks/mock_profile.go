// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/config (interfaces: Setter,Saver,SetSaver,Getter,Config)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSetter is a mock of Setter interface
type MockSetter struct {
	ctrl     *gomock.Controller
	recorder *MockSetterMockRecorder
}

// MockSetterMockRecorder is the mock recorder for MockSetter
type MockSetterMockRecorder struct {
	mock *MockSetter
}

// NewMockSetter creates a new mock instance
func NewMockSetter(ctrl *gomock.Controller) *MockSetter {
	mock := &MockSetter{ctrl: ctrl}
	mock.recorder = &MockSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetter) EXPECT() *MockSetterMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockSetter) Set(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1)
}

// Set indicates an expected call of Set
func (mr *MockSetterMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSetter)(nil).Set), arg0, arg1)
}

// MockSaver is a mock of Saver interface
type MockSaver struct {
	ctrl     *gomock.Controller
	recorder *MockSaverMockRecorder
}

// MockSaverMockRecorder is the mock recorder for MockSaver
type MockSaverMockRecorder struct {
	mock *MockSaver
}

// NewMockSaver creates a new mock instance
func NewMockSaver(ctrl *gomock.Controller) *MockSaver {
	mock := &MockSaver{ctrl: ctrl}
	mock.recorder = &MockSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSaver) EXPECT() *MockSaverMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockSaver) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSaverMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSaver)(nil).Save))
}

// MockSetSaver is a mock of SetSaver interface
type MockSetSaver struct {
	ctrl     *gomock.Controller
	recorder *MockSetSaverMockRecorder
}

// MockSetSaverMockRecorder is the mock recorder for MockSetSaver
type MockSetSaverMockRecorder struct {
	mock *MockSetSaver
}

// NewMockSetSaver creates a new mock instance
func NewMockSetSaver(ctrl *gomock.Controller) *MockSetSaver {
	mock := &MockSetSaver{ctrl: ctrl}
	mock.recorder = &MockSetSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetSaver) EXPECT() *MockSetSaverMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockSetSaver) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSetSaverMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSetSaver)(nil).Save))
}

// Set mocks base method
func (m *MockSetSaver) Set(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1)
}

// Set indicates an expected call of Set
func (mr *MockSetSaverMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSetSaver)(nil).Set), arg0, arg1)
}

// MockGetter is a mock of Getter interface
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// GetString mocks base method
func (m *MockGetter) GetString(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString
func (mr *MockGetterMockRecorder) GetString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockGetter)(nil).GetString), arg0)
}

// MockConfig is a mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetString mocks base method
func (m *MockConfig) GetString(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString
func (mr *MockConfigMockRecorder) GetString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockConfig)(nil).GetString), arg0)
}

// OpsManagerCACertificate mocks base method
func (m *MockConfig) OpsManagerCACertificate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsManagerCACertificate")
	ret0, _ := ret[0].(string)
	return ret0
}

// OpsManagerCACertificate indicates an expected call of OpsManagerCACertificate
func (mr *MockConfigMockRecorder) OpsManagerCACertificate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsManagerCACertificate", reflect.TypeOf((*MockConfig)(nil).OpsManagerCACertificate))
}

// OpsManagerSkipVerify mocks base method
func (m *MockConfig) OpsManagerSkipVerify() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsManagerSkipVerify")
	ret0, _ := ret[0].(string)
	return ret0
}

// OpsManagerSkipVerify indicates an expected call of OpsManagerSkipVerify
func (mr *MockConfigMockRecorder) OpsManagerSkipVerify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsManagerSkipVerify", reflect.TypeOf((*MockConfig)(nil).OpsManagerSkipVerify))
}

// OpsManagerURL mocks base method
func (m *MockConfig) OpsManagerURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpsManagerURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// OpsManagerURL indicates an expected call of OpsManagerURL
func (mr *MockConfigMockRecorder) OpsManagerURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpsManagerURL", reflect.TypeOf((*MockConfig)(nil).OpsManagerURL))
}

// PrivateAPIKey mocks base method
func (m *MockConfig) PrivateAPIKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateAPIKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// PrivateAPIKey indicates an expected call of PrivateAPIKey
func (mr *MockConfigMockRecorder) PrivateAPIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateAPIKey", reflect.TypeOf((*MockConfig)(nil).PrivateAPIKey))
}

// PublicAPIKey mocks base method
func (m *MockConfig) PublicAPIKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicAPIKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// PublicAPIKey indicates an expected call of PublicAPIKey
func (mr *MockConfigMockRecorder) PublicAPIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicAPIKey", reflect.TypeOf((*MockConfig)(nil).PublicAPIKey))
}

// Save mocks base method
func (m *MockConfig) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockConfigMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockConfig)(nil).Save))
}

// Service mocks base method
func (m *MockConfig) Service() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(string)
	return ret0
}

// Service indicates an expected call of Service
func (mr *MockConfigMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockConfig)(nil).Service))
}

// Set mocks base method
func (m *MockConfig) Set(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0, arg1)
}

// Set indicates an expected call of Set
func (mr *MockConfigMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockConfig)(nil).Set), arg0, arg1)
}
