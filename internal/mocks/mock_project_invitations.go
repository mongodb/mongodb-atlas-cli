// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: ProjectInvitationLister,ProjectInvitationDeleter)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	reflect "reflect"
)

// MockProjectInvitationLister is a mock of ProjectInvitationLister interface
type MockProjectInvitationLister struct {
	ctrl     *gomock.Controller
	recorder *MockProjectInvitationListerMockRecorder
}

// MockProjectInvitationListerMockRecorder is the mock recorder for MockProjectInvitationLister
type MockProjectInvitationListerMockRecorder struct {
	mock *MockProjectInvitationLister
}

// NewMockProjectInvitationLister creates a new mock instance
func NewMockProjectInvitationLister(ctrl *gomock.Controller) *MockProjectInvitationLister {
	mock := &MockProjectInvitationLister{ctrl: ctrl}
	mock.recorder = &MockProjectInvitationListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectInvitationLister) EXPECT() *MockProjectInvitationListerMockRecorder {
	return m.recorder
}

// ProjectInvitations mocks base method
func (m *MockProjectInvitationLister) ProjectInvitations(arg0 string, arg1 *mongodbatlas.InvitationOptions) ([]*mongodbatlas.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectInvitations", arg0, arg1)
	ret0, _ := ret[0].([]*mongodbatlas.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectInvitations indicates an expected call of ProjectInvitations
func (mr *MockProjectInvitationListerMockRecorder) ProjectInvitations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectInvitations", reflect.TypeOf((*MockProjectInvitationLister)(nil).ProjectInvitations), arg0, arg1)
}

// MockProjectInvitationDeleter is a mock of ProjectInvitationDeleter interface
type MockProjectInvitationDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectInvitationDeleterMockRecorder
}

// MockProjectInvitationDeleterMockRecorder is the mock recorder for MockProjectInvitationDeleter
type MockProjectInvitationDeleterMockRecorder struct {
	mock *MockProjectInvitationDeleter
}

// NewMockProjectInvitationDeleter creates a new mock instance
func NewMockProjectInvitationDeleter(ctrl *gomock.Controller) *MockProjectInvitationDeleter {
	mock := &MockProjectInvitationDeleter{ctrl: ctrl}
	mock.recorder = &MockProjectInvitationDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectInvitationDeleter) EXPECT() *MockProjectInvitationDeleterMockRecorder {
	return m.recorder
}

// DeleteProjectInvitation mocks base method
func (m *MockProjectInvitationDeleter) DeleteProjectInvitation(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectInvitation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectInvitation indicates an expected call of DeleteProjectInvitation
func (mr *MockProjectInvitationDeleterMockRecorder) DeleteProjectInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectInvitation", reflect.TypeOf((*MockProjectInvitationDeleter)(nil).DeleteProjectInvitation), arg0, arg1)
}
