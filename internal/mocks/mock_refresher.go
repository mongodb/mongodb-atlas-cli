// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli (interfaces: Refresher)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_refresher.go -package=mocks github.com/mongodb/mongodb-atlas-cli/atlascli/internal/cli Refresher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "go.mongodb.org/atlas/auth"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	gomock "go.uber.org/mock/gomock"
)

// MockRefresher is a mock of Refresher interface.
type MockRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockRefresherMockRecorder
	isgomock struct{}
}

// MockRefresherMockRecorder is the mock recorder for MockRefresher.
type MockRefresherMockRecorder struct {
	mock *MockRefresher
}

// NewMockRefresher creates a new mock instance.
func NewMockRefresher(ctrl *gomock.Controller) *MockRefresher {
	mock := &MockRefresher{ctrl: ctrl}
	mock.recorder = &MockRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefresher) EXPECT() *MockRefresherMockRecorder {
	return m.recorder
}

// PollToken mocks base method.
func (m *MockRefresher) PollToken(arg0 context.Context, arg1 *auth.DeviceCode) (*auth.Token, *mongodbatlas.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollToken", arg0, arg1)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(*mongodbatlas.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PollToken indicates an expected call of PollToken.
func (mr *MockRefresherMockRecorder) PollToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollToken", reflect.TypeOf((*MockRefresher)(nil).PollToken), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockRefresher) RefreshToken(arg0 context.Context, arg1 string) (*auth.Token, *mongodbatlas.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(*mongodbatlas.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockRefresherMockRecorder) RefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockRefresher)(nil).RefreshToken), arg0, arg1)
}

// RegistrationConfig mocks base method.
func (m *MockRefresher) RegistrationConfig(ctx context.Context) (*auth.RegistrationConfig, *mongodbatlas.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrationConfig", ctx)
	ret0, _ := ret[0].(*auth.RegistrationConfig)
	ret1, _ := ret[1].(*mongodbatlas.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegistrationConfig indicates an expected call of RegistrationConfig.
func (mr *MockRefresherMockRecorder) RegistrationConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrationConfig", reflect.TypeOf((*MockRefresher)(nil).RegistrationConfig), ctx)
}

// RequestCode mocks base method.
func (m *MockRefresher) RequestCode(arg0 context.Context) (*auth.DeviceCode, *mongodbatlas.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestCode", arg0)
	ret0, _ := ret[0].(*auth.DeviceCode)
	ret1, _ := ret[1].(*mongodbatlas.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestCode indicates an expected call of RequestCode.
func (mr *MockRefresherMockRecorder) RequestCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestCode", reflect.TypeOf((*MockRefresher)(nil).RequestCode), arg0)
}
