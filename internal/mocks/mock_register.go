// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/internal/cli/auth (interfaces: RegisterFlow)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegisterFlow is a mock of RegisterFlow interface.
type MockRegisterFlow struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterFlowMockRecorder
}

// MockRegisterFlowMockRecorder is the mock recorder for MockRegisterFlow.
type MockRegisterFlowMockRecorder struct {
	mock *MockRegisterFlow
}

// NewMockRegisterFlow creates a new mock instance.
func NewMockRegisterFlow(ctrl *gomock.Controller) *MockRegisterFlow {
	mock := &MockRegisterFlow{ctrl: ctrl}
	mock.recorder = &MockRegisterFlowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterFlow) EXPECT() *MockRegisterFlowMockRecorder {
	return m.recorder
}

// PreRun mocks base method.
func (m *MockRegisterFlow) PreRun(arg0 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreRun", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreRun indicates an expected call of PreRun.
func (mr *MockRegisterFlowMockRecorder) PreRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreRun", reflect.TypeOf((*MockRegisterFlow)(nil).PreRun), arg0)
}

// Run mocks base method.
func (m *MockRegisterFlow) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRegisterFlowMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRegisterFlow)(nil).Run), arg0)
}
