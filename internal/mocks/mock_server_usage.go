// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: ProjectServerTypeGetter,ProjectServerTypeUpdater,OrganizationServerTypeGetter,OrganizationServerTypeUpdater)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	opsmngr "go.mongodb.org/ops-manager/opsmngr"
	reflect "reflect"
)

// MockProjectServerTypeGetter is a mock of ProjectServerTypeGetter interface
type MockProjectServerTypeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServerTypeGetterMockRecorder
}

// MockProjectServerTypeGetterMockRecorder is the mock recorder for MockProjectServerTypeGetter
type MockProjectServerTypeGetterMockRecorder struct {
	mock *MockProjectServerTypeGetter
}

// NewMockProjectServerTypeGetter creates a new mock instance
func NewMockProjectServerTypeGetter(ctrl *gomock.Controller) *MockProjectServerTypeGetter {
	mock := &MockProjectServerTypeGetter{ctrl: ctrl}
	mock.recorder = &MockProjectServerTypeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectServerTypeGetter) EXPECT() *MockProjectServerTypeGetterMockRecorder {
	return m.recorder
}

// ProjectServerType mocks base method
func (m *MockProjectServerTypeGetter) ProjectServerType(arg0 string) (*opsmngr.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectServerType", arg0)
	ret0, _ := ret[0].(*opsmngr.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectServerType indicates an expected call of ProjectServerType
func (mr *MockProjectServerTypeGetterMockRecorder) ProjectServerType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectServerType", reflect.TypeOf((*MockProjectServerTypeGetter)(nil).ProjectServerType), arg0)
}

// MockProjectServerTypeUpdater is a mock of ProjectServerTypeUpdater interface
type MockProjectServerTypeUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServerTypeUpdaterMockRecorder
}

// MockProjectServerTypeUpdaterMockRecorder is the mock recorder for MockProjectServerTypeUpdater
type MockProjectServerTypeUpdaterMockRecorder struct {
	mock *MockProjectServerTypeUpdater
}

// NewMockProjectServerTypeUpdater creates a new mock instance
func NewMockProjectServerTypeUpdater(ctrl *gomock.Controller) *MockProjectServerTypeUpdater {
	mock := &MockProjectServerTypeUpdater{ctrl: ctrl}
	mock.recorder = &MockProjectServerTypeUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectServerTypeUpdater) EXPECT() *MockProjectServerTypeUpdaterMockRecorder {
	return m.recorder
}

// UpdateProjectServerType mocks base method
func (m *MockProjectServerTypeUpdater) UpdateProjectServerType(arg0 string, arg1 *opsmngr.ServerTypeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectServerType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectServerType indicates an expected call of UpdateProjectServerType
func (mr *MockProjectServerTypeUpdaterMockRecorder) UpdateProjectServerType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectServerType", reflect.TypeOf((*MockProjectServerTypeUpdater)(nil).UpdateProjectServerType), arg0, arg1)
}

// MockOrganizationServerTypeGetter is a mock of OrganizationServerTypeGetter interface
type MockOrganizationServerTypeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationServerTypeGetterMockRecorder
}

// MockOrganizationServerTypeGetterMockRecorder is the mock recorder for MockOrganizationServerTypeGetter
type MockOrganizationServerTypeGetterMockRecorder struct {
	mock *MockOrganizationServerTypeGetter
}

// NewMockOrganizationServerTypeGetter creates a new mock instance
func NewMockOrganizationServerTypeGetter(ctrl *gomock.Controller) *MockOrganizationServerTypeGetter {
	mock := &MockOrganizationServerTypeGetter{ctrl: ctrl}
	mock.recorder = &MockOrganizationServerTypeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrganizationServerTypeGetter) EXPECT() *MockOrganizationServerTypeGetterMockRecorder {
	return m.recorder
}

// OrganizationServerType mocks base method
func (m *MockOrganizationServerTypeGetter) OrganizationServerType(arg0 string) (*opsmngr.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationServerType", arg0)
	ret0, _ := ret[0].(*opsmngr.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationServerType indicates an expected call of OrganizationServerType
func (mr *MockOrganizationServerTypeGetterMockRecorder) OrganizationServerType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationServerType", reflect.TypeOf((*MockOrganizationServerTypeGetter)(nil).OrganizationServerType), arg0)
}

// MockOrganizationServerTypeUpdater is a mock of OrganizationServerTypeUpdater interface
type MockOrganizationServerTypeUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationServerTypeUpdaterMockRecorder
}

// MockOrganizationServerTypeUpdaterMockRecorder is the mock recorder for MockOrganizationServerTypeUpdater
type MockOrganizationServerTypeUpdaterMockRecorder struct {
	mock *MockOrganizationServerTypeUpdater
}

// NewMockOrganizationServerTypeUpdater creates a new mock instance
func NewMockOrganizationServerTypeUpdater(ctrl *gomock.Controller) *MockOrganizationServerTypeUpdater {
	mock := &MockOrganizationServerTypeUpdater{ctrl: ctrl}
	mock.recorder = &MockOrganizationServerTypeUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrganizationServerTypeUpdater) EXPECT() *MockOrganizationServerTypeUpdaterMockRecorder {
	return m.recorder
}

// UpdateOrganizationServerType mocks base method
func (m *MockOrganizationServerTypeUpdater) UpdateOrganizationServerType(arg0 string, arg1 *opsmngr.ServerTypeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationServerType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganizationServerType indicates an expected call of UpdateOrganizationServerType
func (mr *MockOrganizationServerTypeUpdaterMockRecorder) UpdateOrganizationServerType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationServerType", reflect.TypeOf((*MockOrganizationServerTypeUpdater)(nil).UpdateOrganizationServerType), arg0, arg1)
}
