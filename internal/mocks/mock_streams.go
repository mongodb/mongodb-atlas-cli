// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/internal/store (interfaces: StreamsLister,StreamsDescriber,StreamsCreator,StreamsDeleter,StreamsUpdater)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	store "github.com/mongodb/mongodb-atlas-cli/internal/store"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
)

// MockStreamsLister is a mock of StreamsLister interface.
type MockStreamsLister struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsListerMockRecorder
}

// MockStreamsListerMockRecorder is the mock recorder for MockStreamsLister.
type MockStreamsListerMockRecorder struct {
	mock *MockStreamsLister
}

// NewMockStreamsLister creates a new mock instance.
func NewMockStreamsLister(ctrl *gomock.Controller) *MockStreamsLister {
	mock := &MockStreamsLister{ctrl: ctrl}
	mock.recorder = &MockStreamsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsLister) EXPECT() *MockStreamsListerMockRecorder {
	return m.recorder
}

// ProjectStreams mocks base method.
func (m *MockStreamsLister) ProjectStreams(arg0 string, arg1 *mongodbatlas.ListOptions) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectStreams", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectStreams indicates an expected call of ProjectStreams.
func (mr *MockStreamsListerMockRecorder) ProjectStreams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectStreams", reflect.TypeOf((*MockStreamsLister)(nil).ProjectStreams), arg0, arg1)
}

// MockStreamsDescriber is a mock of StreamsDescriber interface.
type MockStreamsDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsDescriberMockRecorder
}

// MockStreamsDescriberMockRecorder is the mock recorder for MockStreamsDescriber.
type MockStreamsDescriberMockRecorder struct {
	mock *MockStreamsDescriber
}

// NewMockStreamsDescriber creates a new mock instance.
func NewMockStreamsDescriber(ctrl *gomock.Controller) *MockStreamsDescriber {
	mock := &MockStreamsDescriber{ctrl: ctrl}
	mock.recorder = &MockStreamsDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsDescriber) EXPECT() *MockStreamsDescriberMockRecorder {
	return m.recorder
}

// AtlasStream mocks base method.
func (m *MockStreamsDescriber) AtlasStream(arg0, arg1 string) (*store.StreamProcessorInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtlasStream", arg0, arg1)
	ret0, _ := ret[0].(*store.StreamProcessorInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AtlasStream indicates an expected call of AtlasStream.
func (mr *MockStreamsDescriberMockRecorder) AtlasStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtlasStream", reflect.TypeOf((*MockStreamsDescriber)(nil).AtlasStream), arg0, arg1)
}

// MockStreamsCreator is a mock of StreamsCreator interface.
type MockStreamsCreator struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsCreatorMockRecorder
}

// MockStreamsCreatorMockRecorder is the mock recorder for MockStreamsCreator.
type MockStreamsCreatorMockRecorder struct {
	mock *MockStreamsCreator
}

// NewMockStreamsCreator creates a new mock instance.
func NewMockStreamsCreator(ctrl *gomock.Controller) *MockStreamsCreator {
	mock := &MockStreamsCreator{ctrl: ctrl}
	mock.recorder = &MockStreamsCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsCreator) EXPECT() *MockStreamsCreatorMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockStreamsCreator) CreateStream(arg0 *store.StreamProcessorInstance) (*store.StreamProcessorInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", arg0)
	ret0, _ := ret[0].(*store.StreamProcessorInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockStreamsCreatorMockRecorder) CreateStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockStreamsCreator)(nil).CreateStream), arg0)
}

// MockStreamsDeleter is a mock of StreamsDeleter interface.
type MockStreamsDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsDeleterMockRecorder
}

// MockStreamsDeleterMockRecorder is the mock recorder for MockStreamsDeleter.
type MockStreamsDeleterMockRecorder struct {
	mock *MockStreamsDeleter
}

// NewMockStreamsDeleter creates a new mock instance.
func NewMockStreamsDeleter(ctrl *gomock.Controller) *MockStreamsDeleter {
	mock := &MockStreamsDeleter{ctrl: ctrl}
	mock.recorder = &MockStreamsDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsDeleter) EXPECT() *MockStreamsDeleterMockRecorder {
	return m.recorder
}

// DeleteStream mocks base method.
func (m *MockStreamsDeleter) DeleteStream(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockStreamsDeleterMockRecorder) DeleteStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockStreamsDeleter)(nil).DeleteStream), arg0, arg1)
}

// MockStreamsUpdater is a mock of StreamsUpdater interface.
type MockStreamsUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsUpdaterMockRecorder
}

// MockStreamsUpdaterMockRecorder is the mock recorder for MockStreamsUpdater.
type MockStreamsUpdaterMockRecorder struct {
	mock *MockStreamsUpdater
}

// NewMockStreamsUpdater creates a new mock instance.
func NewMockStreamsUpdater(ctrl *gomock.Controller) *MockStreamsUpdater {
	mock := &MockStreamsUpdater{ctrl: ctrl}
	mock.recorder = &MockStreamsUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsUpdater) EXPECT() *MockStreamsUpdaterMockRecorder {
	return m.recorder
}

// UpdateStream mocks base method.
func (m *MockStreamsUpdater) UpdateStream(arg0, arg1 string, arg2 *store.StreamProcessorInstance) (*store.StreamProcessorInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStream", arg0, arg1, arg2)
	ret0, _ := ret[0].(*store.StreamProcessorInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStream indicates an expected call of UpdateStream.
func (mr *MockStreamsUpdaterMockRecorder) UpdateStream(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockStreamsUpdater)(nil).UpdateStream), arg0, arg1, arg2)
}
