// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/version (interfaces: LatestVersionFinder)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLatestVersionFinder is a mock of LatestVersionFinder interface.
type MockLatestVersionFinder struct {
	ctrl     *gomock.Controller
	recorder *MockLatestVersionFinderMockRecorder
}

// MockLatestVersionFinderMockRecorder is the mock recorder for MockLatestVersionFinder.
type MockLatestVersionFinderMockRecorder struct {
	mock *MockLatestVersionFinder
}

// NewMockLatestVersionFinder creates a new mock instance.
func NewMockLatestVersionFinder(ctrl *gomock.Controller) *MockLatestVersionFinder {
	mock := &MockLatestVersionFinder{ctrl: ctrl}
	mock.recorder = &MockLatestVersionFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLatestVersionFinder) EXPECT() *MockLatestVersionFinderMockRecorder {
	return m.recorder
}

// PrintNewVersionAvailable mocks base method.
func (m *MockLatestVersionFinder) PrintNewVersionAvailable(arg0 io.Writer, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintNewVersionAvailable", arg0, arg1, arg2)
}

// PrintNewVersionAvailable indicates an expected call of PrintNewVersionAvailable.
func (mr *MockLatestVersionFinderMockRecorder) PrintNewVersionAvailable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintNewVersionAvailable", reflect.TypeOf((*MockLatestVersionFinder)(nil).PrintNewVersionAvailable), arg0, arg1, arg2)
}
