// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: UserCreator,UserDescriber)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	store "github.com/mongodb/mongocli/internal/store"
	reflect "reflect"
)

// MockUserCreator is a mock of UserCreator interface
type MockUserCreator struct {
	ctrl     *gomock.Controller
	recorder *MockUserCreatorMockRecorder
}

// MockUserCreatorMockRecorder is the mock recorder for MockUserCreator
type MockUserCreatorMockRecorder struct {
	mock *MockUserCreator
}

// NewMockUserCreator creates a new mock instance
func NewMockUserCreator(ctrl *gomock.Controller) *MockUserCreator {
	mock := &MockUserCreator{ctrl: ctrl}
	mock.recorder = &MockUserCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserCreator) EXPECT() *MockUserCreatorMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockUserCreator) CreateUser(arg0 *store.UserRequest) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUserCreatorMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserCreator)(nil).CreateUser), arg0)
}

// MockUserDescriber is a mock of UserDescriber interface
type MockUserDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockUserDescriberMockRecorder
}

// MockUserDescriberMockRecorder is the mock recorder for MockUserDescriber
type MockUserDescriberMockRecorder struct {
	mock *MockUserDescriber
}

// NewMockUserDescriber creates a new mock instance
func NewMockUserDescriber(ctrl *gomock.Controller) *MockUserDescriber {
	mock := &MockUserDescriber{ctrl: ctrl}
	mock.recorder = &MockUserDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDescriber) EXPECT() *MockUserDescriberMockRecorder {
	return m.recorder
}

// UserByID mocks base method
func (m *MockUserDescriber) UserByID(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByID", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByID indicates an expected call of UserByID
func (mr *MockUserDescriberMockRecorder) UserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByID", reflect.TypeOf((*MockUserDescriber)(nil).UserByID), arg0)
}

// UserByName mocks base method
func (m *MockUserDescriber) UserByName(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByName", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByName indicates an expected call of UserByName
func (mr *MockUserDescriberMockRecorder) UserByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByName", reflect.TypeOf((*MockUserDescriber)(nil).UserByName), arg0)
}
