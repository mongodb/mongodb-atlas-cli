// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: VersionManifestUpdater,VersionManifestGetter,VersionManifestUpdaterServiceVersionDescriber)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
	opsmngr "go.mongodb.org/ops-manager/opsmngr"
)

// MockVersionManifestUpdater is a mock of VersionManifestUpdater interface.
type MockVersionManifestUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockVersionManifestUpdaterMockRecorder
}

// MockVersionManifestUpdaterMockRecorder is the mock recorder for MockVersionManifestUpdater.
type MockVersionManifestUpdaterMockRecorder struct {
	mock *MockVersionManifestUpdater
}

// NewMockVersionManifestUpdater creates a new mock instance.
func NewMockVersionManifestUpdater(ctrl *gomock.Controller) *MockVersionManifestUpdater {
	mock := &MockVersionManifestUpdater{ctrl: ctrl}
	mock.recorder = &MockVersionManifestUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionManifestUpdater) EXPECT() *MockVersionManifestUpdaterMockRecorder {
	return m.recorder
}

// UpdateVersionManifest mocks base method.
func (m *MockVersionManifestUpdater) UpdateVersionManifest(arg0 *opsmngr.VersionManifest) (*opsmngr.VersionManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVersionManifest", arg0)
	ret0, _ := ret[0].(*opsmngr.VersionManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVersionManifest indicates an expected call of UpdateVersionManifest.
func (mr *MockVersionManifestUpdaterMockRecorder) UpdateVersionManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVersionManifest", reflect.TypeOf((*MockVersionManifestUpdater)(nil).UpdateVersionManifest), arg0)
}

// MockVersionManifestGetter is a mock of VersionManifestGetter interface.
type MockVersionManifestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockVersionManifestGetterMockRecorder
}

// MockVersionManifestGetterMockRecorder is the mock recorder for MockVersionManifestGetter.
type MockVersionManifestGetterMockRecorder struct {
	mock *MockVersionManifestGetter
}

// NewMockVersionManifestGetter creates a new mock instance.
func NewMockVersionManifestGetter(ctrl *gomock.Controller) *MockVersionManifestGetter {
	mock := &MockVersionManifestGetter{ctrl: ctrl}
	mock.recorder = &MockVersionManifestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionManifestGetter) EXPECT() *MockVersionManifestGetterMockRecorder {
	return m.recorder
}

// GetVersionManifest mocks base method.
func (m *MockVersionManifestGetter) GetVersionManifest(arg0 string) (*opsmngr.VersionManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionManifest", arg0)
	ret0, _ := ret[0].(*opsmngr.VersionManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionManifest indicates an expected call of GetVersionManifest.
func (mr *MockVersionManifestGetterMockRecorder) GetVersionManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionManifest", reflect.TypeOf((*MockVersionManifestGetter)(nil).GetVersionManifest), arg0)
}

// MockVersionManifestUpdaterServiceVersionDescriber is a mock of VersionManifestUpdaterServiceVersionDescriber interface.
type MockVersionManifestUpdaterServiceVersionDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockVersionManifestUpdaterServiceVersionDescriberMockRecorder
}

// MockVersionManifestUpdaterServiceVersionDescriberMockRecorder is the mock recorder for MockVersionManifestUpdaterServiceVersionDescriber.
type MockVersionManifestUpdaterServiceVersionDescriberMockRecorder struct {
	mock *MockVersionManifestUpdaterServiceVersionDescriber
}

// NewMockVersionManifestUpdaterServiceVersionDescriber creates a new mock instance.
func NewMockVersionManifestUpdaterServiceVersionDescriber(ctrl *gomock.Controller) *MockVersionManifestUpdaterServiceVersionDescriber {
	mock := &MockVersionManifestUpdaterServiceVersionDescriber{ctrl: ctrl}
	mock.recorder = &MockVersionManifestUpdaterServiceVersionDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionManifestUpdaterServiceVersionDescriber) EXPECT() *MockVersionManifestUpdaterServiceVersionDescriberMockRecorder {
	return m.recorder
}

// ServiceVersion mocks base method.
func (m *MockVersionManifestUpdaterServiceVersionDescriber) ServiceVersion() (*mongodbatlas.ServiceVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceVersion")
	ret0, _ := ret[0].(*mongodbatlas.ServiceVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceVersion indicates an expected call of ServiceVersion.
func (mr *MockVersionManifestUpdaterServiceVersionDescriberMockRecorder) ServiceVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceVersion", reflect.TypeOf((*MockVersionManifestUpdaterServiceVersionDescriber)(nil).ServiceVersion))
}

// UpdateVersionManifest mocks base method.
func (m *MockVersionManifestUpdaterServiceVersionDescriber) UpdateVersionManifest(arg0 *opsmngr.VersionManifest) (*opsmngr.VersionManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVersionManifest", arg0)
	ret0, _ := ret[0].(*opsmngr.VersionManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVersionManifest indicates an expected call of UpdateVersionManifest.
func (mr *MockVersionManifestUpdaterServiceVersionDescriberMockRecorder) UpdateVersionManifest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVersionManifest", reflect.TypeOf((*MockVersionManifestUpdaterServiceVersionDescriber)(nil).UpdateVersionManifest), arg0)
}
