// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongocli/internal/store (interfaces: X509CertificateLister,X509CertificateStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
)

// MockX509CertificateLister is a mock of X509CertificateLister interface
type MockX509CertificateLister struct {
	ctrl     *gomock.Controller
	recorder *MockX509CertificateListerMockRecorder
}

// MockX509CertificateListerMockRecorder is the mock recorder for MockX509CertificateLister
type MockX509CertificateListerMockRecorder struct {
	mock *MockX509CertificateLister
}

// NewMockX509CertificateLister creates a new mock instance
func NewMockX509CertificateLister(ctrl *gomock.Controller) *MockX509CertificateLister {
	mock := &MockX509CertificateLister{ctrl: ctrl}
	mock.recorder = &MockX509CertificateListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockX509CertificateLister) EXPECT() *MockX509CertificateListerMockRecorder {
	return m.recorder
}

// X509Certificates mocks base method
func (m *MockX509CertificateLister) X509Certificates(arg0, arg1 string) ([]mongodbatlas.UserCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "X509Certificates", arg0, arg1)
	ret0, _ := ret[0].([]mongodbatlas.UserCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// X509Certificates indicates an expected call of X509Certificates
func (mr *MockX509CertificateListerMockRecorder) X509Certificates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "X509Certificates", reflect.TypeOf((*MockX509CertificateLister)(nil).X509Certificates), arg0, arg1)
}

// MockX509CertificateStore is a mock of X509CertificateStore interface
type MockX509CertificateStore struct {
	ctrl     *gomock.Controller
	recorder *MockX509CertificateStoreMockRecorder
}

// MockX509CertificateStoreMockRecorder is the mock recorder for MockX509CertificateStore
type MockX509CertificateStoreMockRecorder struct {
	mock *MockX509CertificateStore
}

// NewMockX509CertificateStore creates a new mock instance
func NewMockX509CertificateStore(ctrl *gomock.Controller) *MockX509CertificateStore {
	mock := &MockX509CertificateStore{ctrl: ctrl}
	mock.recorder = &MockX509CertificateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockX509CertificateStore) EXPECT() *MockX509CertificateStoreMockRecorder {
	return m.recorder
}

// X509Certificates mocks base method
func (m *MockX509CertificateStore) X509Certificates(arg0, arg1 string) ([]mongodbatlas.UserCertificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "X509Certificates", arg0, arg1)
	ret0, _ := ret[0].([]mongodbatlas.UserCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// X509Certificates indicates an expected call of X509Certificates
func (mr *MockX509CertificateStoreMockRecorder) X509Certificates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "X509Certificates", reflect.TypeOf((*MockX509CertificateStore)(nil).X509Certificates), arg0, arg1)
}
