// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated at 2023-04-12T16:00:33+01:00. Note: Manual updates are allowed, but may be overwritten.

package atlas

import (
	"time"

	atlas "go.mongodb.org/atlas/mongodbatlas"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../../mocks/atlas/mock_data_lake_pipelines.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas PipelinesLister,PipelinesDescriber,PipelinesCreator,PipelinesUpdater,PipelinesDeleter,PipelineAvailableSnapshotsLister,PipelineAvailableSchedulesLister

type PipelinesLister interface {
	Pipelines(string) ([]atlasv2.IngestionPipeline, error)
}

type PipelinesCreator interface {
	CreatePipeline(string, atlasv2.IngestionPipeline) (*atlasv2.IngestionPipeline, error)
}

type PipelinesDeleter interface {
	DeletePipeline(string, string) error
}

type PipelinesDescriber interface {
	Pipeline(string, string) (*atlasv2.IngestionPipeline, error)
}

type PipelinesUpdater interface {
	UpdatePipeline(string, string, atlasv2.IngestionPipeline) (*atlasv2.IngestionPipeline, error)
}

type PipelineAvailableSnapshotsLister interface {
	PipelineAvailableSnapshots(string, string, *time.Time, *atlas.ListOptions) (*atlasv2.PaginatedBackupSnapshot, error)
}

type PipelineAvailableSchedulesLister interface {
	PipelineAvailableSchedules(string, string) ([]atlasv2.PolicyItem, error)
}

// Pipelines encapsulates the logic to manage different cloud providers.
func (s *Store) Pipelines(projectID string) ([]atlasv2.IngestionPipeline, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.ListPipelines(s.ctx, projectID).Execute()
	return result, err
}

// Pipeline encapsulates the logic to manage different cloud providers.
func (s *Store) Pipeline(projectID, id string) (*atlasv2.IngestionPipeline, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.GetPipeline(s.ctx, projectID, id).Execute()
	return result, err
}

// CreatePipeline encapsulates the logic to manage different cloud providers.
func (s *Store) CreatePipeline(projectID string, opts atlasv2.IngestionPipeline) (*atlasv2.IngestionPipeline, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.CreatePipeline(s.ctx, projectID).IngestionPipeline(opts).Execute()
	return result, err
}

// UpdatePipeline encapsulates the logic to manage different cloud providers.
func (s *Store) UpdatePipeline(projectID, id string, opts atlasv2.IngestionPipeline) (*atlasv2.IngestionPipeline, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.UpdatePipeline(s.ctx, projectID, id).IngestionPipeline(opts).Execute()
	return result, err
}

// DeletePipeline encapsulates the logic to manage different cloud providers.
func (s *Store) DeletePipeline(projectID, id string) error {
	_, _, err := s.clientv2.DataLakePipelinesApi.DeletePipeline(s.ctx, projectID, id).Execute()
	return err
}

// PipelineAvailableSchedules encapsulates the logic to manage different cloud providers.
func (s *Store) PipelineAvailableSchedules(projectID, pipelineName string) ([]atlasv2.PolicyItem, error) {
	result, _, err := s.clientv2.DataLakePipelinesApi.ListPipelineSchedules(s.ctx, projectID, pipelineName).Execute()
	return result, err
}

// PipelineAvailableSnapshots encapsulates the logic to manage different cloud providers.
func (s *Store) PipelineAvailableSnapshots(projectID, pipelineName string, completedAfter *time.Time, listOps *atlas.ListOptions) (*atlasv2.PaginatedBackupSnapshot, error) {
	request := s.clientv2.DataLakePipelinesApi.ListPipelineSnapshots(s.ctx, projectID, pipelineName)
	if completedAfter != nil {
		request = request.CompletedAfter(*completedAfter)
	}
	if listOps != nil {
		request = request.ItemsPerPage(int32(listOps.ItemsPerPage))
		request = request.PageNum(int32(listOps.PageNum))
	}
	result, _, err := request.Execute()
	return result, err
}
