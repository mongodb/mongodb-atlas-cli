// Copyright 2023 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated at 2023-10-24T15:43:22+02:00. Note: Manual updates are allowed, but may be overwritten.

package atlas

import (
	admin "go.mongodb.org/atlas-sdk/v20231001001/admin"
)

//go:generate mockgen -destination=../../mocks/atlas/mock_serviceaccounts.go -package=atlas github.com/mongodb/mongodb-atlas-cli/internal/store/atlas ServiceAccountLister,ServiceAccountDescriber,ServiceAccountCreator,ServiceAccountUpdater,ServiceAccountDeleter

type ServiceAccountLister interface {
	ServiceAccountList(string) (*admin.PaginatedServiceAccounts, error)
}

type ServiceAccountCreator interface {
	CreateServiceAccount(string, *admin.ServiceAccountRequest) (*admin.ServiceAccount, error)
}

type ServiceAccountDeleter interface {
	DeleteServiceAccount(string, string) error
}

type ServiceAccountDescriber interface {
	GetServiceAccount(string, string) (*admin.ServiceAccountDetails, error)
}

type ServiceAccountUpdater interface {
	UpdateServiceAccount(string, string, *admin.ServiceAccountUpdateRequest) (*admin.ServiceAccountDetails, error)
}

// ServiceAccount encapsulates the logic to manage different cloud providers.
func (s *Store) ServiceAccountList(orgId string) (*admin.PaginatedServiceAccounts, error) {
	result, _, err := s.clientv2.OrganizationsApi.ListServiceAccounts(s.ctx, orgId).Execute()
	return result, err
}

// ServiceAccount encapsulates the logic to manage different cloud providers.
func (s *Store) GetServiceAccount(orgId, id string) (*admin.ServiceAccountDetails, error) {
	result, _, err := s.clientv2.OrganizationsApi.GetServiceAccount(s.ctx, orgId, id).Execute()
	return result, err
}

// CreateServiceAccount encapsulates the logic to manage different cloud providers.
func (s *Store) CreateServiceAccount(orgId string, opts *admin.ServiceAccountRequest) (*admin.ServiceAccount, error) {
	result, _, err := s.clientv2.OrganizationsApi.CreateServiceAccount(s.ctx, orgId, opts).Execute()
	return result, err
}

// UpdateServiceAccount encapsulates the logic to manage different cloud providers.
func (s *Store) UpdateServiceAccount(orgId, id string, opts *admin.ServiceAccountUpdateRequest) (*admin.ServiceAccountDetails, error) {
	result, _, err := s.clientv2.OrganizationsApi.UpdateServiceAccount(s.ctx, orgId, id, opts).Execute()
	return result, err
}

// DeleteServiceAccount encapsulates the logic to manage different cloud providers.
func (s *Store) DeleteServiceAccount(orgId, id string) error {
	_, err := s.clientv2.OrganizationsApi.DeleteServiceAccount(s.ctx, id, orgId).Execute()
	return err
}
