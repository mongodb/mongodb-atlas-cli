// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/telemetry (interfaces: EventsSender,UnauthEventsSender)
//
// Generated by this command:
//
//	mockgen -typed -destination=tracker_mock_test.go -package=telemetry . EventsSender,UnauthEventsSender
//

// Package telemetry is a generated GoMock package.
package telemetry

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventsSender is a mock of EventsSender interface.
type MockEventsSender struct {
	ctrl     *gomock.Controller
	recorder *MockEventsSenderMockRecorder
	isgomock struct{}
}

// MockEventsSenderMockRecorder is the mock recorder for MockEventsSender.
type MockEventsSenderMockRecorder struct {
	mock *MockEventsSender
}

// NewMockEventsSender creates a new mock instance.
func NewMockEventsSender(ctrl *gomock.Controller) *MockEventsSender {
	mock := &MockEventsSender{ctrl: ctrl}
	mock.recorder = &MockEventsSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsSender) EXPECT() *MockEventsSenderMockRecorder {
	return m.recorder
}

// SendEvents mocks base method.
func (m *MockEventsSender) SendEvents(body any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvents", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvents indicates an expected call of SendEvents.
func (mr *MockEventsSenderMockRecorder) SendEvents(body any) *MockEventsSenderSendEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvents", reflect.TypeOf((*MockEventsSender)(nil).SendEvents), body)
	return &MockEventsSenderSendEventsCall{Call: call}
}

// MockEventsSenderSendEventsCall wrap *gomock.Call
type MockEventsSenderSendEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventsSenderSendEventsCall) Return(arg0 error) *MockEventsSenderSendEventsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventsSenderSendEventsCall) Do(f func(any) error) *MockEventsSenderSendEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventsSenderSendEventsCall) DoAndReturn(f func(any) error) *MockEventsSenderSendEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUnauthEventsSender is a mock of UnauthEventsSender interface.
type MockUnauthEventsSender struct {
	ctrl     *gomock.Controller
	recorder *MockUnauthEventsSenderMockRecorder
	isgomock struct{}
}

// MockUnauthEventsSenderMockRecorder is the mock recorder for MockUnauthEventsSender.
type MockUnauthEventsSenderMockRecorder struct {
	mock *MockUnauthEventsSender
}

// NewMockUnauthEventsSender creates a new mock instance.
func NewMockUnauthEventsSender(ctrl *gomock.Controller) *MockUnauthEventsSender {
	mock := &MockUnauthEventsSender{ctrl: ctrl}
	mock.recorder = &MockUnauthEventsSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnauthEventsSender) EXPECT() *MockUnauthEventsSenderMockRecorder {
	return m.recorder
}

// SendUnauthEvents mocks base method.
func (m *MockUnauthEventsSender) SendUnauthEvents(body any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUnauthEvents", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUnauthEvents indicates an expected call of SendUnauthEvents.
func (mr *MockUnauthEventsSenderMockRecorder) SendUnauthEvents(body any) *MockUnauthEventsSenderSendUnauthEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUnauthEvents", reflect.TypeOf((*MockUnauthEventsSender)(nil).SendUnauthEvents), body)
	return &MockUnauthEventsSenderSendUnauthEventsCall{Call: call}
}

// MockUnauthEventsSenderSendUnauthEventsCall wrap *gomock.Call
type MockUnauthEventsSenderSendUnauthEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnauthEventsSenderSendUnauthEventsCall) Return(arg0 error) *MockUnauthEventsSenderSendUnauthEventsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnauthEventsSenderSendUnauthEventsCall) Do(f func(any) error) *MockUnauthEventsSenderSendUnauthEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnauthEventsSenderSendUnauthEventsCall) DoAndReturn(f func(any) error) *MockUnauthEventsSenderSendUnauthEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
