commands:
  - command_path: atlas dataLakePipelines
    package_name: datalakepipelines
    description: Data Lake pipelines.
    template: parent
    sub_commands:
      - command_path: atlas dataLakePipelines list
        package_name: datalakepipelines
        store_name: PipelinesLister
        store_method: Pipelines
        description: Returns all data lake pipelines for your project.
        template: list
        output_template: |
          ID	NAME	STATE{{range .}}
          {{.Id}}	{{.Name}}	{{.State}}
          {{end}}
        example: |
          # list all pipelines:
            atlas dataLakePipelines list
      - command_path: atlas dataLakePipelines describe
        package_name: datalakepipelines
        store_name: PipelinesDescriber
        store_method: Pipeline
        description: Return the details for the specified data lake pipeline for your project.
        template: describe
        id_name: pipelineName
        id_description: Name of the pipeline
        output_template: |
          ID	NAME	STATE
          {{.Id}}	{{.Name}}	{{.State}}
        example: |
          # retrieves pipeline 'Pipeline1':
            atlas dataLakePipelines describe Pipeline1
      - command_path: atlas dataLakePipelines delete
        package_name: datalakepipelines
        store_name: PipelinesDeleter
        store_method: DeletePipeline
        template: delete
        description: Remove the specified data lake pipeline from your project.
        id_name: pipelineName
        id_description: Name of the pipeline
        example: |
          # deletes pipeline 'Pipeline1':
            atlas dataLakePipelines delete Pipeline1
      - command_path: atlas dataLakePipelines create
        package_name: datalakepipelines
        store_name: PipelinesCreator
        store_method: CreatePipeline
        template: create
        description: Creates a new Data Lake Pipeline.
        id_name: pipelineName
        id_description: Label that identifies the pipeline
        output_template: Pipeline {{.Name}} created.
        request_type: 'admin.IngestionPipeline'
        example: |
          # create data lake pipeline:
            atlas dataLakePipelines create Pipeline1 --sinkType CPS --sinkMetadataProvider AWS --sinkMetadataRegion us-east-1 --sinkPartitionField name:0,summary:1 --sourceType PERIODIC_CPS --sourceClusterName Cluster1 --sourceDatabaseName sample_airbnb --sourceCollectionName listingsAndReviews --sourcePolicyItemId 507f1f77bcf86cd799439011 --transform EXCLUDE:space,EXCLUDE:notes
      - command_path: atlas dataLakePipelines update
        package_name: datalakepipelines
        store_name: PipelinesUpdater
        store_method: UpdatePipeline
        template: update
        description: Modify the details of the specified data lake pipeline for your project.
        id_name: pipelineName
        id_description: Label that identifies the pipeline
        output_template: Pipeline {{.Name}} updated.
        request_type: 'admin.IngestionPipeline'
        example: |
          # update data lake pipeline:
            atlas dataLakePipelines update Pipeline1 --sinkType CPS --sinkMetadataProvider AWS --sinkMetadataRegion us-east-1 --sinkPartitionField name:0,summary:1 --sourceType PERIODIC_CPS --sourceClusterName Cluster1 --sourceDatabaseName sample_airbnb --sourceCollectionName listingsAndReviews --sourcePolicyItemId 507f1f77bcf86cd799439011 --transform EXCLUDE:space,EXCLUDE:notes
      - command_path: atlas dataLakePipelines runs
        package_name: runs
        description: Data Lake pipelines runs.
        template: parent
        sub_commands:
          - command_path: atlas dataLakePipelines runs list
            package_name: runs
            store_name: PipelineRunsLister
            store_method: PipelineRuns
            description: Returns all data lake pipeline runs for your project.
            template: list
            output_template: |
              ID	DATASET NAME	STATE{{range .Results}}
              {{.Id}}	{{.DatasetName}}	{{.State}}
              {{end}}
            example: |
              # list all pipelines runs:
                atlas dataLakePipelines runs list
          - command_path: atlas dataLakePipelines runs describe
            package_name: runs
            store_name: PipelineRunsDescriber
            store_method: PipelineRun
            description: Return the details for the specified data lake pipeline run for your project.
            template: describe
            id_name: pipelineRunId
            id_description: Unique identifier for the data lake pipeline run
            output_template: |
              ID	DATASET NAME	STATE
              {{.Id}}	{{.DatasetName}}	{{.State}}
            example: |
              # retrieves pipeline run '507f1f77bcf86cd799439011':
                atlas dataLakePipelines runs describe 507f1f77bcf86cd799439011
      - command_path: atlas dataLakePipelines availableSchedules
        package_name: availableschedules
        description: Manage available schedules for the specified data lake pipeline.
        template: parent
        sub_commands:
          - command_path: atlas dataLakePipelines availableSchedules list
            package_name: availableschedules
            store_name: PipelineAvailableSchedulesLister
            store_method: PipelineAvailableSchedules
            description: Return all available schedules for the specified data lake pipeline.
            template: list
            output_template: |
              ID	FREQUENCY INTERVAL	FREQUENCY TYPE	RETENTION UNIT	RETENTION VALUE{{range .}}
              {{ .Id }}	{{ .FrequencyInterval }}	{{ .FrequencyType }}	{{ .RetentionUnit }}	{{ .RetentionValue }}{{end}}
            example: |
              # list available schedules for data lake pipeline called 'Pipeline1':
                atlas dataLakePipelines availableSchedules list Pipeline1
      - command_path: atlas dataLakePipelines availableSnapshots
        package_name: availablesnapshots
        description: Manage available backup snapshots for data lake pipelines.
        template: parent
        sub_commands:
          - command_path: atlas dataLakePipelines availableSnapshots list
            package_name: availablesnapshots
            store_name: PipelineAvailableSnapshotsLister
            store_method: PipelineAvailableSnapshots
            description: Return all available backup snapshots for the specified data lake pipeline.
            template: list
            output_template: |
              ID	STATUS{{range .Results}}
              {{if .DiskBackupReplicaSet}}{{.DiskBackupReplicaSet.Id}}	{{.DiskBackupReplicaSet.Status}}{{else}}{{.DiskBackupShardedClusterSnapshot.Id}}	{{.DiskBackupShardedClusterSnapshot.Status}}{{end}}{{end}}
            example: |
              # list available backup schedules for data lake pipeline called 'Pipeline1':
                atlas dataLakePipelines availableSnapshots list Pipeline1
      - command_path: atlas dataLakePipelines datasets
        package_name: datasets
        description: Manage datasets for the specified data lake pipeline.
        template: parent
        sub_commands:
          - command_path: atlas dataLakePipelines datasets delete
            package_name: datasets
            store_name: PipelineDatasetDeleter
            store_method: DeletePipelineDataset
            description:  Remove the specified data lake pipeline dataset from your project.
            template: delete
            id_name: pipelineRunId
            id_description: Unique identifier for the data lake pipeline run
            example: |
              # delete dataset '507f1f77bcf86cd799439011' for data lake pipeline called 'Pipeline1':
                atlas dataLakePipelines datasets delete 507f1f77bcf86cd799439011 --pipeline Pipeline1
  - command_path: atlas dataFederation
    package_name: datafederation
    description: Data federation.
    template: parent
    sub_commands:
      - command_path: atlas dataFederation list
        package_name: datafederation
        store_name: DataFederationLister
        store_method: DataFederationList
        description: Returns all data federation databases for your project.
        template: list
        output_template: |
          NAME	STATE{{range .}}
          {{.Name}}	{{.State}}
          {{end}}
        example: |
          # list all data federation databases:
            atlas dataFederation list
      - command_path: atlas dataFederation describe
        package_name: datafederation
        store_name: DataFederationDescriber
        store_method: DataFederation
        description: Return the details for the specified data federation database for your project.
        template: describe
        id_name: name
        id_description: Name of the data federation database
        output_template: |
          NAME	STATE
          {{.Name}}	{{.State}}
        example: |
          # retrieves data federation 'DataFederation1':
            atlas dataFederation describe DataFederation1
      - command_path: atlas dataFederation delete
        package_name: datafederation
        store_name: DataFederationDeleter
        store_method: DeleteDataFederation
        template: delete
        description: Remove the specified data federation database from your project.
        id_name: name
        id_description: Name of the data federation database
        example: |
          # deletes data federation 'DataFederation1':
            atlas dataFederation delete DataFederation1
      - command_path: atlas dataFederation create
        package_name: datafederation
        store_name: DataFederationCreator
        store_method: CreateDataFederation
        template: create
        description: Creates a new Data Federation database.
        id_name: name
        id_description: Name of the data federation database
        output_template: Data federation {{.Name}} created.
        request_type: 'admin.DataLakeTenant'
        example: |
          # create data federation database:
            atlas dataFederation create DataFederation1
      - command_path: atlas dataFederation update
        package_name: datafederation
        store_name: DataFederationUpdater
        store_method: UpdateDataFederation
        template: update
        description: Modify the details of the specified data federation database for your project.
        id_name: name
        id_description: Name of the data federation database
        output_template: Pipeline {{.Name}} updated.
        request_type: 'admin.DataLakeTenant'
        example: |
          # update data lake pipeline:
            atlas dataFederation update DataFederation1
      - command_path: atlas dataFederation privateEndpoints
        package_name: privateendpoints
        description: Data federation private endpoints.
        template: parent
        sub_commands:
          - command_path: atlas dataFederation privateEndpoints list
            package_name: privateendpoints
            store_name: DataFederationPrivateEndpointLister
            store_method: DataFederationPrivateEndpoints
            description: Returns all data federation private endpoints for your project.
            template: list
            output_template: |
              ENDPOINT ID	COMMENT	TYPE{{range .}}
              {{.EndpointId}}	{{.Comment}}	{{.Type}}
              {{end}}
            example: |
              # list all data federation private endpoints:
                atlas dataFederation privateEndpoints list
          - command_path: atlas dataFederation privateEndpoints describe
            package_name: privateendpoints
            store_name: DataFederationPrivateEndpointDescriber
            store_method: DataFederationPrivateEndpoint
            description: Return the details for the specified data federation private endpoints for your project.
            template: describe
            id_name: endpointId
            id_description: Endpoint identifier of the data federation private endpoints
            output_template: |
              ENDPOINT ID	COMMENT	TYPE
              {{.EndpointId}}	{{.Comment}}	{{.Type}}
            example: |
              # retrieves data federation private endpoint '507f1f77bcf86cd799439011':
                atlas dataFederation privateEndpoints describe 507f1f77bcf86cd799439011
          - command_path: atlas dataFederation privateEndpoints delete
            package_name: privateendpoints
            store_name: DataFederationPrivateEndpointDeleter
            store_method: DeleteDataFederationPrivateEndpoint
            template: delete
            description: Remove the specified data federation private endpoints from your project.
            id_name: endpointId
            id_description: Endpoint identifier of the data federation private endpoints
            example: |
              # deletes data federation private endpoint '507f1f77bcf86cd799439011':
                atlas dataFederation privateEndpoints delete 507f1f77bcf86cd799439011
          - command_path: atlas dataFederation privateEndpoints create
            package_name: privateendpoints
            store_name: DataFederationPrivateEndpointCreator
            store_method: CreateDataFederationPrivateEndpoint
            template: create
            description: Creates a new Data Federation private endpoints.
            id_name: endpointId
            id_description: Endpoint identifier of the data federation private endpoints
            output_template: Data federation private endpoint {{.EndpointId}} created.
            request_type: 'admin.PrivateNetworkEndpointIdEntry'
            example: |
              # create data federation private endpoint:
                atlas dataFederation privateEndpoints create 507f1f77bcf86cd799439011 --comment "comment"
      - command_path: atlas dataFederation queryLimits
        package_name: querylimits
        description: Data federation query limits.
        template: parent
        sub_commands:
          - command_path: atlas dataFederation queryLimits list
            package_name: querylimits
            store_name: DataFederationQueryLimitLister
            store_method: DataFederationQueryLimits
            description: Returns all data federation query limits for your project.
            template: list
            output_template: |
              TENANT NAME	NAME	VALUE{{range .}}
              {{.TenantName}}	{{.Name}}	{{.Value}}
              {{end}}
            example: |
              # list all data federation query limits:
                atlas dataFederation queryLimits list
          - command_path: atlas dataFederation queryLimits describe
            package_name: querylimits
            store_name: DataFederationQueryLimitDescriber
            store_method: DataFederationQueryLimit
            description: Return the details for the specified data federation query limit for your project.
            template: describe
            id_name: name
            id_description: Identifier of the data federation query limit
            output_template: |
              TENANT NAME	NAME	VALUE
              {{.TenantName}}	{{.Name}}	{{.Value}}
            example: |
              # retrieves data federation query limits "bytesProcessed.query" for 'DataFederation1':
                atlas dataFederation queryLimits describe bytesProcessed.query --dataFederation DataFederation1
          - command_path: atlas dataFederation queryLimits delete
            package_name: querylimits
            store_name: DataFederationQueryLimitDeleter
            store_method: DeleteDataFederationQueryLimit
            template: delete
            description: Remove the specified data federation query limit from your project.
            id_name: name
            id_description: Identifier of the data federation query limit
            example: |
              # deletes data federation query limits "bytesProcessed.query" for 'DataFederation1':
                atlas dataFederation queryLimits delete bytesProcessed.query --dataFederation DataFederation1
          - command_path: atlas dataFederation queryLimits create
            package_name: querylimits
            store_name: DataFederationQueryLimitCreator
            store_method: CreateDataFederationQueryLimit
            template: create
            description: Creates a new Data Federation query limit.
            id_name: name
            id_description: Identifier of the data federation query limit
            output_template: Data federation query limit {{.Name}} created.
            request_type: 'admin.PrivateNetworkEndpointIdEntry'
            example: |
              # create data federation query limit:
                atlas dataFederation queryLimit create bytesProcessed.query --value 1000 --dataFederation DataFederation1
stores:
  - base_file_name: data_lake_pipelines
    template: store
    lister:
      name: PipelinesLister
      method: Pipelines
      sdk_method: DataLakePipelinesApi.ListPipelines
      return_type: '[]admin.IngestionPipeline'
    describer:
      name: PipelinesDescriber
      method: Pipeline
      sdk_method: DataLakePipelinesApi.GetPipeline
      return_type: '*admin.IngestionPipeline'
    creator:
      name: PipelinesCreator
      method: CreatePipeline
      sdk_method: DataLakePipelinesApi.CreatePipeline
      arg_type: '*admin.IngestionPipeline'
      return_type: '*admin.IngestionPipeline'
    updater:
      name: PipelinesUpdater
      method: UpdatePipeline
      sdk_method: DataLakePipelinesApi.UpdatePipeline
      arg_type: '*admin.IngestionPipeline'
      return_type: '*admin.IngestionPipeline'
    deleter:
      name: PipelinesDeleter
      method: DeletePipeline
      sdk_method: DataLakePipelinesApi.DeletePipeline
  - base_file_name: data_lake_pipelines_runs
    template: store
    lister:
      name: PipelineRunsLister
      method: PipelineRuns
      sdk_method: DataLakePipelinesApi.ListPipelineRuns
      return_type: '*admin.PaginatedPipelineRun'
    describer:
      name: PipelineRunsDescriber
      method: PipelineRun
      sdk_method: DataLakePipelinesApi.GetPipelineRun
      return_type: '*admin.IngestionPipelineRun'
  - base_file_name: data_lake_pipelines_datasets
    template: store
    deleter:
      name: PipelineDatasetDeleter
      method: DeletePipelineDataset
      sdk_method: DataLakePipelinesApi.DeletePipelineRunDataset
  - base_file_name: data_federation
    template: store
    lister:
      name: DataFederationLister
      method: DataFederationList
      sdk_method: DataFederationApi.ListFederatedDatabases
      return_type: '[]admin.DataLakeTenant'
    describer:
      name: DataFederationDescriber
      method: DataFederation
      sdk_method: DataFederationApi.GetFederatedDatabase
      return_type: '*admin.DataLakeTenant'
    creator:
      name: DataFederationCreator
      method: CreateDataFederation
      sdk_method: DataFederationApi.CreateFederatedDatabase
      arg_type: '*admin.DataLakeTenant'
      return_type: '*admin.DataLakeTenant'
    updater:
      name: DataFederationUpdater
      method: UpdateDataFederation
      sdk_method: DataFederationApi.UpdateFederatedDatabase
      arg_type: '*admin.DataLakeTenant'
      return_type: '*admin.DataLakeTenant'
    deleter:
      name: DataFederationDeleter
      method: DeleteDataFederation
      sdk_method: DataFederationApi.DeleteFederatedDatabase
  - base_file_name: data_federation_private_endpoint
    template: store
    lister:
      name: DataFederationPrivateEndpointLister
      method: DataFederationPrivateEndpoints
      sdk_method: DataFederationApi.ListDataFederationPrivateEndpoints
      return_type: '*admin.PaginatedPrivateNetworkEndpointIdEntry'
    describer:
      name: DataFederationPrivateEndpointDescriber
      method: DataFederationPrivateEndpoint
      sdk_method: DataFederationApi.GetDataFederationPrivateEndpoint
      return_type: '*admin.PrivateNetworkEndpointIdEntry'
    creator:
      name: DataFederationPrivateEndpointCreator
      method: CreateDataFederationPrivateEndpoint
      sdk_method: DataFederationApi.CreateDataFederationPrivateEndpoint
      arg_type: '*admin.PrivateNetworkEndpointIdEntry'
      return_type: '*admin.PaginatedPrivateNetworkEndpointIdEntry'
    deleter:
      name: DataFederationPrivateEndpointDeleter
      method: DeleteDataFederationPrivateEndpoint
      sdk_method: DataFederationApi.DeleteDataFederationPrivateEndpoint
  - base_file_name: data_federation_query_limits
    template: store
    lister:
      name: DataFederationQueryLimitLister
      method: DataFederationQueryLimits
      sdk_method: DataFederationApi.ReturnFederatedDatabaseQueryLimits
      return_type: '[]admin.DataFederationTenantQueryLimit'
    describer:
      name: DataFederationQueryLimitDescriber
      method: DataFederationQueryLimit
      sdk_method: DataFederationApi.ReturnFederatedDatabaseQueryLimit
      return_type: '*admin.DataFederationTenantQueryLimit'
    creator:
      name: DataFederationQueryLimitCreator
      method: CreateDataFederationQueryLimit
      sdk_method: DataFederationApi.CreateOneDataFederationQueryLimit
      arg_type: '*admin.DataFederationTenantQueryLimit'
      return_type: '*admin.DataFederationTenantQueryLimit'
    deleter:
      name: DataFederationQueryLimitDeleter
      method: DeleteDataFederationQueryLimit
      sdk_method: DataFederationApi.DeleteOneDataFederationInstanceQueryLimit
