// Copyright {{ Year }} MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated at {{ Now }}. Note: Manual updates are allowed, but may be overwritten.

package store

import (
	"fmt"

	"github.com/mongodb/mongodb-atlas-cli/internal/config"
	atlasv2 "go.mongodb.org/atlas/mongodbatlasv2"
)

//go:generate mockgen -destination=../mocks/mock_{{ .BaseFileName }}.go -package=mocks github.com/mongodb/mongodb-atlas-cli/internal/store {{ .InterfaceNames }}

type {{ .Lister.Name }} interface {
	{{ .Lister.Method }} (string) ( {{ .Lister.ReturnType }} , error)
}

type {{ .Creator.Name }} interface {
	{{ .Creator.Method }}(string, {{ .Creator.ArgType }} ) ( {{ .Creator.ReturnType }} , error)
}

type {{ .Deleter.Name }} interface {
	{{ .Deleter.Method }}(string,string) error
}

type {{ .Describer.Name }} interface {
	{{ .Describer.Method }}(string,string) ({{ .Describer.ReturnType }}, error)
}

type {{ .Updater.Name }} interface {
	{{ .Updater.Method }}(string,string,{{ .Updater.ArgType }}) ({{ .Updater.ReturnType }}, error)
}


// {{ .Lister.Method }} encapsulates the logic to manage different cloud providers.
func (s *Store) {{ .Lister.Method }}(projectID string) ({{ .Lister.ReturnType }}, error) {
	switch s.service {
	case config.CloudService, config.CloudGovService:
		result, _, err := s.clientv2.{{ .Lister.SDKMethod }}(s.ctx, projectID).Execute()
		return result, err
	default:
		return nil, fmt.Errorf("%w: %s", errUnsupportedService, s.service)
	}
}


// {{ .Describer.Method }} encapsulates the logic to manage different cloud providers.
func (s *Store) {{ .Describer.Method }}(projectID, id string) ({{ .Describer.ReturnType }}, error) {
	switch s.service {
	case config.CloudService, config.CloudGovService:
		result, _, err := s.clientv2.{{ .Describer.SDKMethod }}(s.ctx, projectID, id).Execute()
		return result, err
	default:
		return nil, fmt.Errorf("%w: %s", errUnsupportedService, s.service)
	}
}

// {{ .Creator.Method }} encapsulates the logic to manage different cloud providers.
func (s *Store) {{ .Creator.Method }}(projectID string, opts {{ .Creator.ArgType }}) ({{ .Creator.ReturnType }}, error) {
	switch s.service {
	case config.CloudService, config.CloudGovService:
		result, _, err := s.clientv2.{{ .Creator.SDKMethod }}(s.ctx, projectID).{{ .Creator.ArgName }}(opts).Execute()
		return result, err
	default:
		return nil, fmt.Errorf("%w: %s", errUnsupportedService, s.service)
	}
}

// {{ .Updater.Method }} encapsulates the logic to manage different cloud providers.
func (s *Store) {{ .Updater.Method }}(projectID, id string, opts {{ .Updater.ArgType }}) ({{ .Updater.ReturnType }}, error) {
	switch s.service {
	case config.CloudService, config.CloudGovService:
		result, _, err := s.clientv2.{{ .Updater.SDKMethod }}(s.ctx, projectID, id).{{ .Updater.ArgName }}(opts).Execute()
		return result, err
	default:
		return nil, fmt.Errorf("%w: %s", errUnsupportedService, s.service)
	}
}


// {{ .Deleter.Method }} encapsulates the logic to manage different cloud providers.
func (s *Store) {{ .Deleter.Method }}(projectID, id string) error {
	switch s.service {
	case config.CloudService, config.CloudGovService:
		_, err := s.clientv2.{{ .Deleter.SDKMethod }}(s.ctx, projectID, id).Execute()
		return err
	default:
		return fmt.Errorf("%w: %s", errUnsupportedService, s.service)
	}
}
