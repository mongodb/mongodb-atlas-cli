{{- /* Template for generating L1 commands */ -}}
{{- /*gotype: github.com/mongodb/mongodb-atlas-cli/atlascli/internal/shared_api.GroupedAndSortedCommands */ -}}
// Copyright {{ currentYear }} MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated using `make gen-api-commands`. DO NOT EDIT.
// Don't make any manual changes to this file.

package api

import (
	"net/http"

	shared_api "github.com/mongodb/mongodb-atlas-cli/atlascli/tools/shared/api"
)

var Commands = shared_api.GroupedAndSortedCommands{
{{- range . }}
	{
		Name:        `{{ .Name }}`,
		Description: `{{ .Description }}`,
		Commands: []shared_api.Command{
		{{- range .Commands }}
			{
				OperationID: `{{ .OperationID }}`,
				Aliases: {{if not .Aliases}} nil {{else}} []string{ {{ range $i, $alias := .Aliases }}{{if $i}},{{end}}`{{ $alias }}`{{end}} } {{end}},
				Description: `{{ .Description }}`,
				RequestParameters: shared_api.RequestParameters{
					URL: `{{ .RequestParameters.URL }}`,
					QueryParameters: []shared_api.Parameter{
					{{- range .RequestParameters.QueryParameters }}
						{
							Name:        `{{ .Name }}`,
							Description: `{{ .Description }}`,
							Short:       `{{ .Short }}`,
							Required:    {{ .Required }},
							Type:        shared_api.ParameterType{
								IsArray:	{{ .Type.IsArray }},
								Type:		`{{ .Type.Type }}`,
							},
							{{if .Aliases }} Aliases: []string{ {{ range $i, $alias := .Aliases }}{{if $i}},{{end}}`{{ $alias }}`{{end}} }, {{end}}
						},
					{{- end }}
					},
					URLParameters: []shared_api.Parameter{
					{{- range .RequestParameters.URLParameters }}
						{
							Name:        `{{ .Name }}`,
							Description: `{{ .Description }}`,
							Short:       `{{ .Short }}`,
							Required:    {{ .Required }},
							Type:        shared_api.ParameterType{
								IsArray:	{{ .Type.IsArray }},
								Type:		`{{ .Type.Type }}`,
							},
							{{if .Aliases }} Aliases: []string{ {{ range $i, $alias := .Aliases }}{{if $i}},{{end}}`{{ $alias }}`{{end}} }, {{end}}
						},
					{{- end }}
					},
					Verb: {{ .RequestParameters.Verb }},
				},
				Versions: []shared_api.Version{
				{{- range .Versions }}
					{
						Version: `{{ .Version }}`,
						RequestContentType: `{{ .RequestContentType }}`,
						ResponseContentTypes: []string{
						{{- range .ResponseContentTypes }}
							`{{ . }}`,
						{{- end }}
						},
					},
				{{- end }}
				},{{if .Watcher}}
				Watcher: &shared_api.WatcherProperties{
					Get: shared_api.WatcherGetProperties{
						OperationID: `{{ .Watcher.Get.OperationID }}`,
						Version:     `{{ .Watcher.Get.Version }}`,
						Params: map[string]string{
							{{- range $k, $v := .Watcher.Get.Params }}
							`{{ $k }}`: `{{ $v }}`,
							{{- end }}
						},
					},
					Expect: {{if not .Watcher.Expect }} nil,{{else}}&shared_api.WatcherExpectProperties{ {{if ne .Watcher.Expect.HTTPCode 0}}
						HTTPCode: {{ .Watcher.Expect.HTTPCode }}, //nolint{{- end }}
						Match: {{if not .Watcher.Expect.Match }} nil,{{else}}&shared_api.WatcherMatchProperties{
							Path: `{{ .Watcher.Expect.Match.Path }}`,
							Values: []string{
								{{- range .Watcher.Expect.Match.Values }}
									`{{ . }}`,
								{{- end }}
							},
						},{{end}}
					},{{end}}
				},{{end}}
			},
		{{- end }}
		},
	},
{{- end }}
}
