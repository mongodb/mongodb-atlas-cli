{{- /* Template for exporting API examples */ -}}
// Copyright {{ currentYear }} MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated using `make gen-api-commands`. DO NOT EDIT.
// Don't make any manual changes to this file.

package main

import 	"github.com/mongodb/mongodb-atlas-cli/atlascli/tools/internal/metadatatypes"
{{- $metadata := . }}
var metadata = metadatatypes.Metadata{
{{- range $operationID := $metadata | sortedKeys }}{{$operationMetadata := index $metadata $operationID}}
	`{{ $operationID }}`: {
		Parameters: {{if not $operationMetadata.Parameters}}nil,{{else}}map[string]metadatatypes.ParameterMetadata{
		{{- range $paramName := $operationMetadata.Parameters | sortedKeys }}{{$paramMetadata := index $operationMetadata.Parameters $paramName}}
			`{{ $paramName }}`: {
				Usage: `{{ $paramMetadata.Usage | replace "`" "` + \"`\" + `"  }}`,
			},{{- end }}
		},{{- end }}
		Examples: {{if not $operationMetadata.Examples}}nil,{{else}}map[string][]metadatatypes.Example{
		{{- range $version := $operationMetadata.Examples | sortedKeys }}{{$examples := index $operationMetadata.Examples $version}}
			`{{ $version }}`: {{if not $examples}}nil,{{else}}{
					{{- range $example := $examples}}{
						{{ if $example.Source }}Source: `{{ $example.Source }}`,{{- end}}
						{{ if $example.Name }}Name: `{{ $example.Name }}`,{{- end}}
						{{ if $example.Description }}Description: `{{ $example.Description }}`,{{- end}}
						{{if $example.Value}}Value: `{{ $example.Value }}`,{{end}}
						{{if $example.Flags}}Flags: map[string]string {
						{{- range $flagName := $example.Flags | sortedKeys }}{{$flagValue := index $example.Flags $flagName}}
							`{{ $flagName }}`: `{{ $flagValue }}`,
						{{- end }}
						},{{- end}}
					},{{- end }}
				},{{- end }}
			{{- end }}
		},{{- end }}
	},{{- end }}
}
